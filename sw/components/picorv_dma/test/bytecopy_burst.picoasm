.include "picoasm_hal.h"

#define hir_base x1
#define burst_base x2
#define msb_set x3
#define src x4
#define dst x5
#define num_elems x6
#define burst_end x7
#define single_end x8
#define stat_busy x9
#define tmp x10
#define one x11
#define two x12
#define three x13
#define four x14
#define offset x15
#define mask_4_lsb x16
#define twenty_four x17

/*Byte Copy, any alignment, using burst mode*/

    .text
    .balign 4
    .globl _start

    /*Status register values*/
    .equ STAT_START, 1
    .equ STAT_BUSY, 3
    .equ STAT_DONE, 0

_start:
    li hir_base, HIR_REGS_BASE_ADDR
    li burst_base, BURST_REGS_BASE_ADDR
    li msb_set, 0x80000000
    li stat_busy, STAT_BUSY
    li one, 1
    li two, 2
    li three, 3
    li four, 4
    li mask_4_lsb, 0xfffffff0 /*mask to clear 4 lsbs*/
    li twenty_four, 24

wait_start:
    lw tmp, HIR3(hir_base)   /*HIR3: ctrl-status*/
    beqz tmp, wait_start
    sw stat_busy, HIR3(hir_base)   /*set status to 'Busy'*/

    lw src, HIR0(hir_base)        /*HIR0: src pointer*/
    lw dst, HIR1(hir_base)        /*HIR1: dst pointer*/
    lw num_elems, HIR2(hir_base)  /*HIR2: num bytes*/
    add single_end, num_elems, src /*Turn num_elems into single end pointer.*/
    bltu num_elems, twenty_four, single_loop_start 
    
    andi tmp, src, 3
    beqz tmp, src_is_aligned

    lb tmp, 0(src)
    sb tmp, 0(dst)
    addi src, src, 1
    addi dst, dst, 1
    andi tmp, src, 3
    sub num_elems, num_elems, one
    beqz tmp, src_is_aligned

    lb tmp, 0(src)
    sb tmp, 0(dst)
    addi src, src, 1
    addi dst, dst, 1
    andi tmp, src, 3
    sub num_elems, num_elems, one
    beqz tmp, src_is_aligned

    lb tmp, 0(src)
    sb tmp, 0(dst)
    addi src, src, 1
    addi dst, dst, 1
    andi tmp, src, 3
    sub num_elems, num_elems, one

src_is_aligned:
    andi offset, dst, 3
    sw offset, BURST_OFFSET(burst_base)
    beq offset, zero, offset_zero
    beq offset, two, offset_two
    beq offset, three, offset_three
offset_one:
    lw tmp, 0(src)
    sb tmp, 0(dst)
    srai tmp, tmp, 8
    sb tmp, 1(dst)
    srai tmp, tmp, 8
    sb tmp, 2(dst)
    srai tmp, tmp, 8
    sw tmp, BURST4(burst_base)
    addi src, src, 4
    addi dst, dst, 3
    sub num_elems, num_elems, four
    j burst
offset_two:
    lw tmp, 0(src)
    sb tmp, 0(dst)
    srai tmp, tmp, 8
    sb tmp, 1(dst)
    srai tmp, tmp, 8
    sw tmp, BURST4(burst_base)
    addi src, src, 4
    addi dst, dst, 2
    sub num_elems, num_elems, four
    j burst
offset_three:
    lw tmp, 0(src)
    sb tmp, 0(dst)
    srai tmp, tmp, 8
    sw tmp, BURST4(burst_base)
    addi src, src, 4
    addi dst, dst, 1
    sub num_elems, num_elems, four
offset_zero:
burst:
    and burst_end, num_elems, mask_4_lsb /*Nearest lower burst boundary*/
    add burst_end, burst_end, src        /*Turn into burst end pointer.*/
    or src, src, msb_set                 /*Set msb to engage burst mode*/
    or dst, dst, msb_set                 /*Set msb to engage burst mode*/
    or burst_end, burst_end, msb_set     /*Set msb to engage burst mode*/

burst_loop:
    /*Copy 4-word burst by 4-word burst*/
    lw tmp, 0(src)
    addi src, src, 16
    sw tmp, 0(dst)
    addi dst, dst, 16
    bltu src, burst_end, burst_loop

    xor src, src, msb_set  /*Clear msb again to turn off burst mode.*/
    xor dst, dst, msb_set  /*Clear msb again to turn off burst mode.*/

    lw tmp, BURST4(burst_base) /*Copy left-over bytes*/
    beq offset, zero, single_loop_start
    sb tmp, 0(dst)
    sub offset, offset, one
    addi dst, dst, 1
    beq offset, zero, single_loop_start
    srai tmp, tmp, 8
    sb tmp, 0(dst)
    sub offset, offset, one
    addi dst, dst, 1
    beq offset, zero, single_loop_start
    srai tmp, tmp, 8
    sb tmp, 0(dst)
    sub offset, offset, one
    addi dst, dst, 1

single_loop_start:
    bgeu src, single_end, end

single_loop:
    /*Copy remaining single byte by byte.*/
    lb tmp, 0(src)
    addi src, src, 1
    sb tmp, 0(dst)
    addi dst, dst, 1
    bltu src, single_end, single_loop

end:
    sw zero, BURST4(burst_base) /*Do one more write to a burst register to ensure last burst transaction completed.*/
    sw zero, HIR3(hir_base) /*set to 'Done'*/
    j wait_start
