//--------------------------------------------------------------------------------
// Auto-generated by LiteX (c717e4c8) on 2022-12-15 15:53:13
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x0L
#endif

/* ddrctrl */
#define CSR_DDRCTRL_BASE (CSR_BASE + 0x0L)
#define CSR_DDRCTRL_INIT_DONE_ADDR (CSR_BASE + 0x0L)
#define CSR_DDRCTRL_INIT_DONE_SIZE 1
static inline uint32_t ddrctrl_init_done_read(void) {
	return csr_read_simple((CSR_BASE + 0x0L));
}
static inline void ddrctrl_init_done_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x0L));
}
#define CSR_DDRCTRL_INIT_ERROR_ADDR (CSR_BASE + 0x4L)
#define CSR_DDRCTRL_INIT_ERROR_SIZE 1
static inline uint32_t ddrctrl_init_error_read(void) {
	return csr_read_simple((CSR_BASE + 0x4L));
}
static inline void ddrctrl_init_error_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x4L));
}

/* sdram */
#define CSR_SDRAM_BASE (CSR_BASE + 0x800L)
#define CSR_SDRAM_DFII_CONTROL_ADDR (CSR_BASE + 0x800L)
#define CSR_SDRAM_DFII_CONTROL_SIZE 1
static inline uint32_t sdram_dfii_control_read(void) {
	return csr_read_simple((CSR_BASE + 0x800L));
}
static inline void sdram_dfii_control_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x800L));
}
#define CSR_SDRAM_DFII_CONTROL_SEL_OFFSET 0
#define CSR_SDRAM_DFII_CONTROL_SEL_SIZE 1
static inline uint32_t sdram_dfii_control_sel_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_control_sel_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_sel_extract(word);
}
static inline uint32_t sdram_dfii_control_sel_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_control_sel_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_sel_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_CKE_OFFSET 1
#define CSR_SDRAM_DFII_CONTROL_CKE_SIZE 1
static inline uint32_t sdram_dfii_control_cke_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_control_cke_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_cke_extract(word);
}
static inline uint32_t sdram_dfii_control_cke_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_control_cke_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_cke_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_ODT_OFFSET 2
#define CSR_SDRAM_DFII_CONTROL_ODT_SIZE 1
static inline uint32_t sdram_dfii_control_odt_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_control_odt_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_odt_extract(word);
}
static inline uint32_t sdram_dfii_control_odt_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_control_odt_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_odt_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_CONTROL_RESET_N_OFFSET 3
#define CSR_SDRAM_DFII_CONTROL_RESET_N_SIZE 1
static inline uint32_t sdram_dfii_control_reset_n_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_control_reset_n_read(void) {
	uint32_t word = sdram_dfii_control_read();
	return sdram_dfii_control_reset_n_extract(word);
}
static inline uint32_t sdram_dfii_control_reset_n_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_control_reset_n_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_control_read();
	uint32_t newword = sdram_dfii_control_reset_n_replace(oldword, plain_value);
	sdram_dfii_control_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ADDR (CSR_BASE + 0x804L)
#define CSR_SDRAM_DFII_PI0_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x804L));
}
static inline void sdram_dfii_pi0_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x804L));
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI0_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi0_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI0_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_we_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi0_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_we_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI0_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi0_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI0_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi0_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI0_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi0_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI0_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi0_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi0_command_read();
	return sdram_dfii_pi0_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi0_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi0_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi0_command_read();
	uint32_t newword = sdram_dfii_pi0_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi0_command_write(newword);
}
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_ADDR (CSR_BASE + 0x808L)
#define CSR_SDRAM_DFII_PI0_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi0_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x808L));
}
static inline void sdram_dfii_pi0_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x808L));
}
#define CSR_SDRAM_DFII_PI0_ADDRESS_ADDR (CSR_BASE + 0x80cL)
#define CSR_SDRAM_DFII_PI0_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x80cL));
}
static inline void sdram_dfii_pi0_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x80cL));
}
#define CSR_SDRAM_DFII_PI0_BADDRESS_ADDR (CSR_BASE + 0x810L)
#define CSR_SDRAM_DFII_PI0_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi0_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x810L));
}
static inline void sdram_dfii_pi0_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x810L));
}
#define CSR_SDRAM_DFII_PI0_WRDATA_ADDR (CSR_BASE + 0x814L)
#define CSR_SDRAM_DFII_PI0_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x814L));
}
static inline void sdram_dfii_pi0_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x814L));
}
#define CSR_SDRAM_DFII_PI0_RDDATA_ADDR (CSR_BASE + 0x818L)
#define CSR_SDRAM_DFII_PI0_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi0_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x818L));
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ADDR (CSR_BASE + 0x81cL)
#define CSR_SDRAM_DFII_PI1_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x81cL));
}
static inline void sdram_dfii_pi1_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x81cL));
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI1_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi1_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI1_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_we_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi1_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_we_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI1_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi1_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI1_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi1_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI1_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi1_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI1_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi1_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi1_command_read();
	return sdram_dfii_pi1_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi1_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi1_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi1_command_read();
	uint32_t newword = sdram_dfii_pi1_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi1_command_write(newword);
}
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_ADDR (CSR_BASE + 0x820L)
#define CSR_SDRAM_DFII_PI1_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi1_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x820L));
}
static inline void sdram_dfii_pi1_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x820L));
}
#define CSR_SDRAM_DFII_PI1_ADDRESS_ADDR (CSR_BASE + 0x824L)
#define CSR_SDRAM_DFII_PI1_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x824L));
}
static inline void sdram_dfii_pi1_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x824L));
}
#define CSR_SDRAM_DFII_PI1_BADDRESS_ADDR (CSR_BASE + 0x828L)
#define CSR_SDRAM_DFII_PI1_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi1_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x828L));
}
static inline void sdram_dfii_pi1_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x828L));
}
#define CSR_SDRAM_DFII_PI1_WRDATA_ADDR (CSR_BASE + 0x82cL)
#define CSR_SDRAM_DFII_PI1_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi1_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x82cL));
}
static inline void sdram_dfii_pi1_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x82cL));
}
#define CSR_SDRAM_DFII_PI1_RDDATA_ADDR (CSR_BASE + 0x830L)
#define CSR_SDRAM_DFII_PI1_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi1_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x830L));
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ADDR (CSR_BASE + 0x834L)
#define CSR_SDRAM_DFII_PI2_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x834L));
}
static inline void sdram_dfii_pi2_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x834L));
}
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI2_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi2_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI2_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_we_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi2_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_we_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI2_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi2_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI2_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi2_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI2_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi2_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI2_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi2_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi2_command_read();
	return sdram_dfii_pi2_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi2_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi2_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi2_command_read();
	uint32_t newword = sdram_dfii_pi2_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi2_command_write(newword);
}
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_ADDR (CSR_BASE + 0x838L)
#define CSR_SDRAM_DFII_PI2_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi2_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x838L));
}
static inline void sdram_dfii_pi2_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x838L));
}
#define CSR_SDRAM_DFII_PI2_ADDRESS_ADDR (CSR_BASE + 0x83cL)
#define CSR_SDRAM_DFII_PI2_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi2_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x83cL));
}
static inline void sdram_dfii_pi2_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x83cL));
}
#define CSR_SDRAM_DFII_PI2_BADDRESS_ADDR (CSR_BASE + 0x840L)
#define CSR_SDRAM_DFII_PI2_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi2_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x840L));
}
static inline void sdram_dfii_pi2_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x840L));
}
#define CSR_SDRAM_DFII_PI2_WRDATA_ADDR (CSR_BASE + 0x844L)
#define CSR_SDRAM_DFII_PI2_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi2_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x844L));
}
static inline void sdram_dfii_pi2_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x844L));
}
#define CSR_SDRAM_DFII_PI2_RDDATA_ADDR (CSR_BASE + 0x848L)
#define CSR_SDRAM_DFII_PI2_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi2_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x848L));
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ADDR (CSR_BASE + 0x84cL)
#define CSR_SDRAM_DFII_PI3_COMMAND_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_read(void) {
	return csr_read_simple((CSR_BASE + 0x84cL));
}
static inline void sdram_dfii_pi3_command_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x84cL));
}
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_OFFSET 0
#define CSR_SDRAM_DFII_PI3_COMMAND_CS_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_cs_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_cs_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_cs_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_cs_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void sdram_dfii_pi3_command_cs_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_cs_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_WE_OFFSET 1
#define CSR_SDRAM_DFII_PI3_COMMAND_WE_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_we_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_we_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_we_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_we_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void sdram_dfii_pi3_command_we_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_we_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_CAS_OFFSET 2
#define CSR_SDRAM_DFII_PI3_COMMAND_CAS_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_cas_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 2) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_cas_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_cas_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_cas_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 2))) | (mask & plain_value)<< 2 ;
}
static inline void sdram_dfii_pi3_command_cas_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_cas_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_RAS_OFFSET 3
#define CSR_SDRAM_DFII_PI3_COMMAND_RAS_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_ras_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 3) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_ras_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_ras_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_ras_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 3))) | (mask & plain_value)<< 3 ;
}
static inline void sdram_dfii_pi3_command_ras_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_ras_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_WREN_OFFSET 4
#define CSR_SDRAM_DFII_PI3_COMMAND_WREN_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_wren_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 4) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_wren_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_wren_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_wren_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 4))) | (mask & plain_value)<< 4 ;
}
static inline void sdram_dfii_pi3_command_wren_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_wren_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_RDEN_OFFSET 5
#define CSR_SDRAM_DFII_PI3_COMMAND_RDEN_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_rden_extract(uint32_t oldword) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return ( (oldword >> 5) & mask );
}
static inline uint32_t sdram_dfii_pi3_command_rden_read(void) {
	uint32_t word = sdram_dfii_pi3_command_read();
	return sdram_dfii_pi3_command_rden_extract(word);
}
static inline uint32_t sdram_dfii_pi3_command_rden_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((uint32_t)(1 << 1)-1);
	return (oldword & (~(mask << 5))) | (mask & plain_value)<< 5 ;
}
static inline void sdram_dfii_pi3_command_rden_write(uint32_t plain_value) {
	uint32_t oldword = sdram_dfii_pi3_command_read();
	uint32_t newword = sdram_dfii_pi3_command_rden_replace(oldword, plain_value);
	sdram_dfii_pi3_command_write(newword);
}
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_ADDR (CSR_BASE + 0x850L)
#define CSR_SDRAM_DFII_PI3_COMMAND_ISSUE_SIZE 1
static inline uint32_t sdram_dfii_pi3_command_issue_read(void) {
	return csr_read_simple((CSR_BASE + 0x850L));
}
static inline void sdram_dfii_pi3_command_issue_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x850L));
}
#define CSR_SDRAM_DFII_PI3_ADDRESS_ADDR (CSR_BASE + 0x854L)
#define CSR_SDRAM_DFII_PI3_ADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi3_address_read(void) {
	return csr_read_simple((CSR_BASE + 0x854L));
}
static inline void sdram_dfii_pi3_address_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x854L));
}
#define CSR_SDRAM_DFII_PI3_BADDRESS_ADDR (CSR_BASE + 0x858L)
#define CSR_SDRAM_DFII_PI3_BADDRESS_SIZE 1
static inline uint32_t sdram_dfii_pi3_baddress_read(void) {
	return csr_read_simple((CSR_BASE + 0x858L));
}
static inline void sdram_dfii_pi3_baddress_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x858L));
}
#define CSR_SDRAM_DFII_PI3_WRDATA_ADDR (CSR_BASE + 0x85cL)
#define CSR_SDRAM_DFII_PI3_WRDATA_SIZE 1
static inline uint32_t sdram_dfii_pi3_wrdata_read(void) {
	return csr_read_simple((CSR_BASE + 0x85cL));
}
static inline void sdram_dfii_pi3_wrdata_write(uint32_t v) {
	csr_write_simple(v, (CSR_BASE + 0x85cL));
}
#define CSR_SDRAM_DFII_PI3_RDDATA_ADDR (CSR_BASE + 0x860L)
#define CSR_SDRAM_DFII_PI3_RDDATA_SIZE 1
static inline uint32_t sdram_dfii_pi3_rddata_read(void) {
	return csr_read_simple((CSR_BASE + 0x860L));
}

#endif
