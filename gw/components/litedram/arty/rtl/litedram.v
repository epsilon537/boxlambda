// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : litedram.v
// Device     : 
// LiteX sha1 : d2bd8d4f
// Date       : 2023-12-13 10:28:32
//------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module litedram (
    input  wire          clk,
    output wire   [13:0] ddram_a,
    output wire    [2:0] ddram_ba,
    output wire          ddram_cas_n,
    output wire          ddram_cke,
    output wire          ddram_clk_n,
    output wire          ddram_clk_p,
    output wire          ddram_cs_n,
    output wire    [1:0] ddram_dm,
    inout  wire   [15:0] ddram_dq,
    inout  wire    [1:0] ddram_dqs_n,
    inout  wire    [1:0] ddram_dqs_p,
    output wire          ddram_odt,
    output wire          ddram_ras_n,
    output wire          ddram_reset_n,
    output wire          ddram_we_n,
    output wire          init_done,
    output wire          init_error,
    output wire          pll_locked,
    input  wire          rst,
    output wire          user_clk,
    output wire          user_clkx2,
    output wire          user_port_wishbone_0_ack,
    input  wire   [25:0] user_port_wishbone_0_adr,
    input  wire          user_port_wishbone_0_cyc,
    output wire   [31:0] user_port_wishbone_0_dat_r,
    input  wire   [31:0] user_port_wishbone_0_dat_w,
    output wire          user_port_wishbone_0_err,
    input  wire    [3:0] user_port_wishbone_0_sel,
    input  wire          user_port_wishbone_0_stb,
    input  wire          user_port_wishbone_0_we,
    output wire          user_rst,
    output wire          wb_ctrl_ack,
    input  wire   [29:0] wb_ctrl_adr,
    input  wire    [1:0] wb_ctrl_bte,
    input  wire    [2:0] wb_ctrl_cti,
    input  wire          wb_ctrl_cyc,
    output wire   [31:0] wb_ctrl_dat_r,
    input  wire   [31:0] wb_ctrl_dat_w,
    output wire          wb_ctrl_err,
    input  wire    [3:0] wb_ctrl_sel,
    input  wire          wb_ctrl_stb,
    input  wire          wb_ctrl_we
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          a7ddrphy0;
wire          a7ddrphy1;
reg     [7:0] a7ddrphy_bitslip00 = 8'd0;
reg     [7:0] a7ddrphy_bitslip01 = 8'd0;
reg     [7:0] a7ddrphy_bitslip02 = 8'd0;
wire    [7:0] a7ddrphy_bitslip03;
reg     [7:0] a7ddrphy_bitslip04 = 8'd0;
reg    [15:0] a7ddrphy_bitslip0_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip0_r1 = 16'd0;
reg    [15:0] a7ddrphy_bitslip0_r2 = 16'd0;
reg    [15:0] a7ddrphy_bitslip0_r3 = 16'd0;
reg     [2:0] a7ddrphy_bitslip0_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip0_value1 = 3'd7;
reg     [2:0] a7ddrphy_bitslip0_value2 = 3'd7;
reg     [2:0] a7ddrphy_bitslip0_value3 = 3'd7;
reg     [7:0] a7ddrphy_bitslip10 = 8'd0;
reg     [7:0] a7ddrphy_bitslip100 = 8'd0;
wire    [7:0] a7ddrphy_bitslip101;
reg     [7:0] a7ddrphy_bitslip102 = 8'd0;
reg    [15:0] a7ddrphy_bitslip10_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip10_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip10_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip10_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip11 = 8'd0;
reg     [7:0] a7ddrphy_bitslip110 = 8'd0;
wire    [7:0] a7ddrphy_bitslip111;
reg     [7:0] a7ddrphy_bitslip112 = 8'd0;
reg    [15:0] a7ddrphy_bitslip11_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip11_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip11_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip11_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip12 = 8'd0;
reg     [7:0] a7ddrphy_bitslip120 = 8'd0;
wire    [7:0] a7ddrphy_bitslip121;
reg     [7:0] a7ddrphy_bitslip122 = 8'd0;
reg    [15:0] a7ddrphy_bitslip12_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip12_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip12_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip12_value1 = 3'd7;
wire    [7:0] a7ddrphy_bitslip13;
reg     [7:0] a7ddrphy_bitslip130 = 8'd0;
wire    [7:0] a7ddrphy_bitslip131;
reg     [7:0] a7ddrphy_bitslip132 = 8'd0;
reg    [15:0] a7ddrphy_bitslip13_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip13_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip13_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip13_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip14 = 8'd0;
reg     [7:0] a7ddrphy_bitslip140 = 8'd0;
wire    [7:0] a7ddrphy_bitslip141;
reg     [7:0] a7ddrphy_bitslip142 = 8'd0;
reg    [15:0] a7ddrphy_bitslip14_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip14_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip14_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip14_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip150 = 8'd0;
wire    [7:0] a7ddrphy_bitslip151;
reg     [7:0] a7ddrphy_bitslip152 = 8'd0;
reg    [15:0] a7ddrphy_bitslip15_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip15_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip15_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip15_value1 = 3'd7;
reg    [15:0] a7ddrphy_bitslip1_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip1_r1 = 16'd0;
reg    [15:0] a7ddrphy_bitslip1_r2 = 16'd0;
reg    [15:0] a7ddrphy_bitslip1_r3 = 16'd0;
reg     [2:0] a7ddrphy_bitslip1_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip1_value1 = 3'd7;
reg     [2:0] a7ddrphy_bitslip1_value2 = 3'd7;
reg     [2:0] a7ddrphy_bitslip1_value3 = 3'd7;
reg     [7:0] a7ddrphy_bitslip20 = 8'd0;
wire    [7:0] a7ddrphy_bitslip21;
reg     [7:0] a7ddrphy_bitslip22 = 8'd0;
reg    [15:0] a7ddrphy_bitslip2_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip2_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip2_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip2_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip30 = 8'd0;
wire    [7:0] a7ddrphy_bitslip31;
reg     [7:0] a7ddrphy_bitslip32 = 8'd0;
reg    [15:0] a7ddrphy_bitslip3_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip3_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip3_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip3_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip40 = 8'd0;
wire    [7:0] a7ddrphy_bitslip41;
reg     [7:0] a7ddrphy_bitslip42 = 8'd0;
reg    [15:0] a7ddrphy_bitslip4_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip4_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip4_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip4_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip50 = 8'd0;
wire    [7:0] a7ddrphy_bitslip51;
reg     [7:0] a7ddrphy_bitslip52 = 8'd0;
reg    [15:0] a7ddrphy_bitslip5_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip5_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip5_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip5_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip60 = 8'd0;
wire    [7:0] a7ddrphy_bitslip61;
reg     [7:0] a7ddrphy_bitslip62 = 8'd0;
reg    [15:0] a7ddrphy_bitslip6_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip6_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip6_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip6_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip70 = 8'd0;
wire    [7:0] a7ddrphy_bitslip71;
reg     [7:0] a7ddrphy_bitslip72 = 8'd0;
reg    [15:0] a7ddrphy_bitslip7_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip7_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip7_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip7_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip80 = 8'd0;
wire    [7:0] a7ddrphy_bitslip81;
reg     [7:0] a7ddrphy_bitslip82 = 8'd0;
reg    [15:0] a7ddrphy_bitslip8_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip8_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip8_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip8_value1 = 3'd7;
reg     [7:0] a7ddrphy_bitslip90 = 8'd0;
wire    [7:0] a7ddrphy_bitslip91;
reg     [7:0] a7ddrphy_bitslip92 = 8'd0;
reg    [15:0] a7ddrphy_bitslip9_r0 = 16'd0;
reg    [15:0] a7ddrphy_bitslip9_r1 = 16'd0;
reg     [2:0] a7ddrphy_bitslip9_value0 = 3'd7;
reg     [2:0] a7ddrphy_bitslip9_value1 = 3'd7;
wire          a7ddrphy_dfi_p0_act_n;
wire   [13:0] a7ddrphy_dfi_p0_address;
wire    [2:0] a7ddrphy_dfi_p0_bank;
wire          a7ddrphy_dfi_p0_cas_n;
wire          a7ddrphy_dfi_p0_cke;
wire          a7ddrphy_dfi_p0_cs_n;
wire          a7ddrphy_dfi_p0_odt;
wire          a7ddrphy_dfi_p0_ras_n;
reg    [31:0] a7ddrphy_dfi_p0_rddata = 32'd0;
wire          a7ddrphy_dfi_p0_rddata_en;
wire          a7ddrphy_dfi_p0_rddata_valid;
wire          a7ddrphy_dfi_p0_reset_n;
wire          a7ddrphy_dfi_p0_we_n;
wire   [31:0] a7ddrphy_dfi_p0_wrdata;
wire          a7ddrphy_dfi_p0_wrdata_en;
wire    [3:0] a7ddrphy_dfi_p0_wrdata_mask;
wire          a7ddrphy_dfi_p1_act_n;
wire   [13:0] a7ddrphy_dfi_p1_address;
wire    [2:0] a7ddrphy_dfi_p1_bank;
wire          a7ddrphy_dfi_p1_cas_n;
wire          a7ddrphy_dfi_p1_cke;
wire          a7ddrphy_dfi_p1_cs_n;
wire          a7ddrphy_dfi_p1_odt;
wire          a7ddrphy_dfi_p1_ras_n;
reg    [31:0] a7ddrphy_dfi_p1_rddata = 32'd0;
wire          a7ddrphy_dfi_p1_rddata_en;
wire          a7ddrphy_dfi_p1_rddata_valid;
wire          a7ddrphy_dfi_p1_reset_n;
wire          a7ddrphy_dfi_p1_we_n;
wire   [31:0] a7ddrphy_dfi_p1_wrdata;
wire          a7ddrphy_dfi_p1_wrdata_en;
wire    [3:0] a7ddrphy_dfi_p1_wrdata_mask;
wire          a7ddrphy_dfi_p2_act_n;
wire   [13:0] a7ddrphy_dfi_p2_address;
wire    [2:0] a7ddrphy_dfi_p2_bank;
wire          a7ddrphy_dfi_p2_cas_n;
wire          a7ddrphy_dfi_p2_cke;
wire          a7ddrphy_dfi_p2_cs_n;
wire          a7ddrphy_dfi_p2_odt;
wire          a7ddrphy_dfi_p2_ras_n;
reg    [31:0] a7ddrphy_dfi_p2_rddata = 32'd0;
wire          a7ddrphy_dfi_p2_rddata_en;
wire          a7ddrphy_dfi_p2_rddata_valid;
wire          a7ddrphy_dfi_p2_reset_n;
wire          a7ddrphy_dfi_p2_we_n;
wire   [31:0] a7ddrphy_dfi_p2_wrdata;
wire          a7ddrphy_dfi_p2_wrdata_en;
wire    [3:0] a7ddrphy_dfi_p2_wrdata_mask;
wire          a7ddrphy_dfi_p3_act_n;
wire   [13:0] a7ddrphy_dfi_p3_address;
wire    [2:0] a7ddrphy_dfi_p3_bank;
wire          a7ddrphy_dfi_p3_cas_n;
wire          a7ddrphy_dfi_p3_cke;
wire          a7ddrphy_dfi_p3_cs_n;
wire          a7ddrphy_dfi_p3_odt;
wire          a7ddrphy_dfi_p3_ras_n;
reg    [31:0] a7ddrphy_dfi_p3_rddata = 32'd0;
wire          a7ddrphy_dfi_p3_rddata_en;
wire          a7ddrphy_dfi_p3_rddata_valid;
wire          a7ddrphy_dfi_p3_reset_n;
wire          a7ddrphy_dfi_p3_we_n;
wire   [31:0] a7ddrphy_dfi_p3_wrdata;
wire          a7ddrphy_dfi_p3_wrdata_en;
wire    [3:0] a7ddrphy_dfi_p3_wrdata_mask;
reg           a7ddrphy_dly_sel_re = 1'd0;
reg     [1:0] a7ddrphy_dly_sel_storage = 2'd0;
wire          a7ddrphy_dq_i_delayed0;
wire          a7ddrphy_dq_i_delayed1;
wire          a7ddrphy_dq_i_delayed10;
wire          a7ddrphy_dq_i_delayed11;
wire          a7ddrphy_dq_i_delayed12;
wire          a7ddrphy_dq_i_delayed13;
wire          a7ddrphy_dq_i_delayed14;
wire          a7ddrphy_dq_i_delayed15;
wire          a7ddrphy_dq_i_delayed2;
wire          a7ddrphy_dq_i_delayed3;
wire          a7ddrphy_dq_i_delayed4;
wire          a7ddrphy_dq_i_delayed5;
wire          a7ddrphy_dq_i_delayed6;
wire          a7ddrphy_dq_i_delayed7;
wire          a7ddrphy_dq_i_delayed8;
wire          a7ddrphy_dq_i_delayed9;
wire          a7ddrphy_dq_i_nodelay0;
wire          a7ddrphy_dq_i_nodelay1;
wire          a7ddrphy_dq_i_nodelay10;
wire          a7ddrphy_dq_i_nodelay11;
wire          a7ddrphy_dq_i_nodelay12;
wire          a7ddrphy_dq_i_nodelay13;
wire          a7ddrphy_dq_i_nodelay14;
wire          a7ddrphy_dq_i_nodelay15;
wire          a7ddrphy_dq_i_nodelay2;
wire          a7ddrphy_dq_i_nodelay3;
wire          a7ddrphy_dq_i_nodelay4;
wire          a7ddrphy_dq_i_nodelay5;
wire          a7ddrphy_dq_i_nodelay6;
wire          a7ddrphy_dq_i_nodelay7;
wire          a7ddrphy_dq_i_nodelay8;
wire          a7ddrphy_dq_i_nodelay9;
wire          a7ddrphy_dq_o_nodelay0;
wire          a7ddrphy_dq_o_nodelay1;
wire          a7ddrphy_dq_o_nodelay10;
wire          a7ddrphy_dq_o_nodelay11;
wire          a7ddrphy_dq_o_nodelay12;
wire          a7ddrphy_dq_o_nodelay13;
wire          a7ddrphy_dq_o_nodelay14;
wire          a7ddrphy_dq_o_nodelay15;
wire          a7ddrphy_dq_o_nodelay2;
wire          a7ddrphy_dq_o_nodelay3;
wire          a7ddrphy_dq_o_nodelay4;
wire          a7ddrphy_dq_o_nodelay5;
wire          a7ddrphy_dq_o_nodelay6;
wire          a7ddrphy_dq_o_nodelay7;
wire          a7ddrphy_dq_o_nodelay8;
wire          a7ddrphy_dq_o_nodelay9;
wire          a7ddrphy_dq_oe;
wire          a7ddrphy_dq_oe_delay_tappeddelayline;
reg           a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 = 1'd0;
reg           a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 = 1'd0;
wire          a7ddrphy_dq_t0;
wire          a7ddrphy_dq_t1;
wire          a7ddrphy_dq_t10;
wire          a7ddrphy_dq_t11;
wire          a7ddrphy_dq_t12;
wire          a7ddrphy_dq_t13;
wire          a7ddrphy_dq_t14;
wire          a7ddrphy_dq_t15;
wire          a7ddrphy_dq_t2;
wire          a7ddrphy_dq_t3;
wire          a7ddrphy_dq_t4;
wire          a7ddrphy_dq_t5;
wire          a7ddrphy_dq_t6;
wire          a7ddrphy_dq_t7;
wire          a7ddrphy_dq_t8;
wire          a7ddrphy_dq_t9;
wire          a7ddrphy_dqs_o_no_delay0;
wire          a7ddrphy_dqs_o_no_delay1;
reg           a7ddrphy_dqs_oe = 1'd0;
wire          a7ddrphy_dqs_oe_delay_tappeddelayline;
reg           a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 = 1'd0;
reg           a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 = 1'd0;
wire          a7ddrphy_dqs_postamble;
wire          a7ddrphy_dqs_preamble;
wire          a7ddrphy_dqs_t0;
wire          a7ddrphy_dqs_t1;
reg           a7ddrphy_dqspattern0 = 1'd0;
reg           a7ddrphy_dqspattern1 = 1'd0;
reg     [7:0] a7ddrphy_dqspattern_o0 = 8'd0;
reg     [7:0] a7ddrphy_dqspattern_o1 = 8'd0;
reg           a7ddrphy_half_sys8x_taps_re = 1'd0;
reg     [4:0] a7ddrphy_half_sys8x_taps_storage = 5'd16;
wire    [2:0] a7ddrphy_pads_ba;
reg           a7ddrphy_rddata_en_tappeddelayline0 = 1'd0;
reg           a7ddrphy_rddata_en_tappeddelayline1 = 1'd0;
reg           a7ddrphy_rddata_en_tappeddelayline2 = 1'd0;
reg           a7ddrphy_rddata_en_tappeddelayline3 = 1'd0;
reg           a7ddrphy_rddata_en_tappeddelayline4 = 1'd0;
reg           a7ddrphy_rddata_en_tappeddelayline5 = 1'd0;
reg           a7ddrphy_rddata_en_tappeddelayline6 = 1'd0;
reg           a7ddrphy_rddata_en_tappeddelayline7 = 1'd0;
wire          a7ddrphy_rdly_dq_bitslip_r;
reg           a7ddrphy_rdly_dq_bitslip_re = 1'd0;
wire          a7ddrphy_rdly_dq_bitslip_rst_r;
reg           a7ddrphy_rdly_dq_bitslip_rst_re = 1'd0;
reg           a7ddrphy_rdly_dq_bitslip_rst_w = 1'd0;
reg           a7ddrphy_rdly_dq_bitslip_rst_we = 1'd0;
reg           a7ddrphy_rdly_dq_bitslip_w = 1'd0;
reg           a7ddrphy_rdly_dq_bitslip_we = 1'd0;
wire          a7ddrphy_rdly_dq_inc_r;
reg           a7ddrphy_rdly_dq_inc_re = 1'd0;
reg           a7ddrphy_rdly_dq_inc_w = 1'd0;
reg           a7ddrphy_rdly_dq_inc_we = 1'd0;
wire          a7ddrphy_rdly_dq_rst_r;
reg           a7ddrphy_rdly_dq_rst_re = 1'd0;
reg           a7ddrphy_rdly_dq_rst_w = 1'd0;
reg           a7ddrphy_rdly_dq_rst_we = 1'd0;
reg           a7ddrphy_rdphase_re = 1'd0;
reg     [1:0] a7ddrphy_rdphase_storage = 2'd2;
reg           a7ddrphy_rst_re = 1'd0;
reg           a7ddrphy_rst_storage = 1'd0;
wire          a7ddrphy_sd_clk_se_nodelay;
wire          a7ddrphy_wdly_dq_bitslip_r;
reg           a7ddrphy_wdly_dq_bitslip_re = 1'd0;
wire          a7ddrphy_wdly_dq_bitslip_rst_r;
reg           a7ddrphy_wdly_dq_bitslip_rst_re = 1'd0;
reg           a7ddrphy_wdly_dq_bitslip_rst_w = 1'd0;
reg           a7ddrphy_wdly_dq_bitslip_rst_we = 1'd0;
reg           a7ddrphy_wdly_dq_bitslip_w = 1'd0;
reg           a7ddrphy_wdly_dq_bitslip_we = 1'd0;
reg           a7ddrphy_wlevel_en_re = 1'd0;
reg           a7ddrphy_wlevel_en_storage = 1'd0;
wire          a7ddrphy_wlevel_strobe_r;
reg           a7ddrphy_wlevel_strobe_re = 1'd0;
reg           a7ddrphy_wlevel_strobe_w = 1'd0;
reg           a7ddrphy_wlevel_strobe_we = 1'd0;
reg           a7ddrphy_wrdata_en_tappeddelayline0 = 1'd0;
reg           a7ddrphy_wrdata_en_tappeddelayline1 = 1'd0;
reg           a7ddrphy_wrdata_en_tappeddelayline2 = 1'd0;
reg           a7ddrphy_wrphase_re = 1'd0;
reg     [1:0] a7ddrphy_wrphase_storage = 2'd3;
reg           aborted = 1'd0;
reg           aborted_litedramwishbone2native_next_value = 1'd0;
reg           aborted_litedramwishbone2native_next_value_ce = 1'd0;
reg     [2:0] array_muxed0 = 3'd0;
reg    [13:0] array_muxed1 = 14'd0;
reg           array_muxed10 = 1'd0;
reg           array_muxed11 = 1'd0;
reg           array_muxed12 = 1'd0;
reg           array_muxed13 = 1'd0;
reg     [2:0] array_muxed14 = 3'd0;
reg    [13:0] array_muxed15 = 14'd0;
reg           array_muxed16 = 1'd0;
reg           array_muxed17 = 1'd0;
reg           array_muxed18 = 1'd0;
reg           array_muxed19 = 1'd0;
reg           array_muxed2 = 1'd0;
reg           array_muxed20 = 1'd0;
reg     [2:0] array_muxed21 = 3'd0;
reg    [13:0] array_muxed22 = 14'd0;
reg           array_muxed23 = 1'd0;
reg           array_muxed24 = 1'd0;
reg           array_muxed25 = 1'd0;
reg           array_muxed26 = 1'd0;
reg           array_muxed27 = 1'd0;
reg           array_muxed3 = 1'd0;
reg           array_muxed4 = 1'd0;
reg           array_muxed5 = 1'd0;
reg           array_muxed6 = 1'd0;
reg     [2:0] array_muxed7 = 3'd0;
reg    [13:0] array_muxed8 = 14'd0;
reg           array_muxed9 = 1'd0;
reg           bankmachine0_auto_precharge = 1'd0;
reg    [13:0] bankmachine0_cmd_payload_a = 14'd0;
wire    [2:0] bankmachine0_cmd_payload_ba;
reg           bankmachine0_cmd_payload_cas = 1'd0;
reg           bankmachine0_cmd_payload_is_cmd = 1'd0;
reg           bankmachine0_cmd_payload_is_read = 1'd0;
reg           bankmachine0_cmd_payload_is_write = 1'd0;
reg           bankmachine0_cmd_payload_ras = 1'd0;
reg           bankmachine0_cmd_payload_we = 1'd0;
reg           bankmachine0_cmd_ready = 1'd0;
reg           bankmachine0_cmd_valid = 1'd0;
reg     [3:0] bankmachine0_consume = 4'd0;
wire          bankmachine0_do_read;
wire          bankmachine0_fifo_in_first;
wire          bankmachine0_fifo_in_last;
wire   [20:0] bankmachine0_fifo_in_payload_addr;
wire          bankmachine0_fifo_in_payload_we;
wire          bankmachine0_fifo_out_first;
wire          bankmachine0_fifo_out_last;
wire   [20:0] bankmachine0_fifo_out_payload_addr;
wire          bankmachine0_fifo_out_payload_we;
reg     [4:0] bankmachine0_level = 5'd0;
wire          bankmachine0_pipe_valid_sink_first;
wire          bankmachine0_pipe_valid_sink_last;
wire   [20:0] bankmachine0_pipe_valid_sink_payload_addr;
wire          bankmachine0_pipe_valid_sink_payload_we;
wire          bankmachine0_pipe_valid_sink_ready;
wire          bankmachine0_pipe_valid_sink_valid;
reg           bankmachine0_pipe_valid_source_first = 1'd0;
reg           bankmachine0_pipe_valid_source_last = 1'd0;
reg    [20:0] bankmachine0_pipe_valid_source_payload_addr = 21'd0;
reg           bankmachine0_pipe_valid_source_payload_we = 1'd0;
wire          bankmachine0_pipe_valid_source_ready;
reg           bankmachine0_pipe_valid_source_valid = 1'd0;
reg     [3:0] bankmachine0_produce = 4'd0;
wire    [3:0] bankmachine0_rdport_adr;
wire   [23:0] bankmachine0_rdport_dat_r;
reg           bankmachine0_refresh_gnt = 1'd0;
wire          bankmachine0_refresh_req;
reg           bankmachine0_replace = 1'd0;
wire   [20:0] bankmachine0_req_addr;
wire          bankmachine0_req_lock;
reg           bankmachine0_req_rdata_valid = 1'd0;
wire          bankmachine0_req_ready;
wire          bankmachine0_req_valid;
reg           bankmachine0_req_wdata_ready = 1'd0;
wire          bankmachine0_req_we;
reg    [13:0] bankmachine0_row = 14'd0;
reg           bankmachine0_row_close = 1'd0;
reg           bankmachine0_row_col_n_addr_sel = 1'd0;
wire          bankmachine0_row_hit;
reg           bankmachine0_row_open = 1'd0;
reg           bankmachine0_row_opened = 1'd0;
reg           bankmachine0_sink_first = 1'd0;
reg           bankmachine0_sink_last = 1'd0;
wire   [20:0] bankmachine0_sink_payload_addr;
wire          bankmachine0_sink_payload_we;
wire          bankmachine0_sink_ready;
wire          bankmachine0_sink_sink_first;
wire          bankmachine0_sink_sink_last;
wire   [20:0] bankmachine0_sink_sink_payload_addr;
wire          bankmachine0_sink_sink_payload_we;
wire          bankmachine0_sink_sink_ready;
wire          bankmachine0_sink_sink_valid;
wire          bankmachine0_sink_valid;
wire          bankmachine0_source_first;
wire          bankmachine0_source_last;
wire   [20:0] bankmachine0_source_payload_addr;
wire          bankmachine0_source_payload_we;
wire          bankmachine0_source_ready;
wire          bankmachine0_source_source_first;
wire          bankmachine0_source_source_last;
wire   [20:0] bankmachine0_source_source_payload_addr;
wire          bankmachine0_source_source_payload_we;
wire          bankmachine0_source_source_ready;
wire          bankmachine0_source_source_valid;
wire          bankmachine0_source_valid;
wire   [23:0] bankmachine0_syncfifo0_din;
wire   [23:0] bankmachine0_syncfifo0_dout;
wire          bankmachine0_syncfifo0_re;
wire          bankmachine0_syncfifo0_readable;
wire          bankmachine0_syncfifo0_we;
wire          bankmachine0_syncfifo0_writable;
reg     [1:0] bankmachine0_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine0_trascon_ready = 1'd0;
wire          bankmachine0_trascon_valid;
reg     [1:0] bankmachine0_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine0_trccon_ready = 1'd0;
wire          bankmachine0_trccon_valid;
reg     [2:0] bankmachine0_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           bankmachine0_twtpcon_ready = 1'd0;
wire          bankmachine0_twtpcon_valid;
reg     [3:0] bankmachine0_wrport_adr = 4'd0;
wire   [23:0] bankmachine0_wrport_dat_r;
wire   [23:0] bankmachine0_wrport_dat_w;
wire          bankmachine0_wrport_we;
reg           bankmachine1_auto_precharge = 1'd0;
reg    [13:0] bankmachine1_cmd_payload_a = 14'd0;
wire    [2:0] bankmachine1_cmd_payload_ba;
reg           bankmachine1_cmd_payload_cas = 1'd0;
reg           bankmachine1_cmd_payload_is_cmd = 1'd0;
reg           bankmachine1_cmd_payload_is_read = 1'd0;
reg           bankmachine1_cmd_payload_is_write = 1'd0;
reg           bankmachine1_cmd_payload_ras = 1'd0;
reg           bankmachine1_cmd_payload_we = 1'd0;
reg           bankmachine1_cmd_ready = 1'd0;
reg           bankmachine1_cmd_valid = 1'd0;
reg     [3:0] bankmachine1_consume = 4'd0;
wire          bankmachine1_do_read;
wire          bankmachine1_fifo_in_first;
wire          bankmachine1_fifo_in_last;
wire   [20:0] bankmachine1_fifo_in_payload_addr;
wire          bankmachine1_fifo_in_payload_we;
wire          bankmachine1_fifo_out_first;
wire          bankmachine1_fifo_out_last;
wire   [20:0] bankmachine1_fifo_out_payload_addr;
wire          bankmachine1_fifo_out_payload_we;
reg     [4:0] bankmachine1_level = 5'd0;
wire          bankmachine1_pipe_valid_sink_first;
wire          bankmachine1_pipe_valid_sink_last;
wire   [20:0] bankmachine1_pipe_valid_sink_payload_addr;
wire          bankmachine1_pipe_valid_sink_payload_we;
wire          bankmachine1_pipe_valid_sink_ready;
wire          bankmachine1_pipe_valid_sink_valid;
reg           bankmachine1_pipe_valid_source_first = 1'd0;
reg           bankmachine1_pipe_valid_source_last = 1'd0;
reg    [20:0] bankmachine1_pipe_valid_source_payload_addr = 21'd0;
reg           bankmachine1_pipe_valid_source_payload_we = 1'd0;
wire          bankmachine1_pipe_valid_source_ready;
reg           bankmachine1_pipe_valid_source_valid = 1'd0;
reg     [3:0] bankmachine1_produce = 4'd0;
wire    [3:0] bankmachine1_rdport_adr;
wire   [23:0] bankmachine1_rdport_dat_r;
reg           bankmachine1_refresh_gnt = 1'd0;
wire          bankmachine1_refresh_req;
reg           bankmachine1_replace = 1'd0;
wire   [20:0] bankmachine1_req_addr;
wire          bankmachine1_req_lock;
reg           bankmachine1_req_rdata_valid = 1'd0;
wire          bankmachine1_req_ready;
wire          bankmachine1_req_valid;
reg           bankmachine1_req_wdata_ready = 1'd0;
wire          bankmachine1_req_we;
reg    [13:0] bankmachine1_row = 14'd0;
reg           bankmachine1_row_close = 1'd0;
reg           bankmachine1_row_col_n_addr_sel = 1'd0;
wire          bankmachine1_row_hit;
reg           bankmachine1_row_open = 1'd0;
reg           bankmachine1_row_opened = 1'd0;
reg           bankmachine1_sink_first = 1'd0;
reg           bankmachine1_sink_last = 1'd0;
wire   [20:0] bankmachine1_sink_payload_addr;
wire          bankmachine1_sink_payload_we;
wire          bankmachine1_sink_ready;
wire          bankmachine1_sink_sink_first;
wire          bankmachine1_sink_sink_last;
wire   [20:0] bankmachine1_sink_sink_payload_addr;
wire          bankmachine1_sink_sink_payload_we;
wire          bankmachine1_sink_sink_ready;
wire          bankmachine1_sink_sink_valid;
wire          bankmachine1_sink_valid;
wire          bankmachine1_source_first;
wire          bankmachine1_source_last;
wire   [20:0] bankmachine1_source_payload_addr;
wire          bankmachine1_source_payload_we;
wire          bankmachine1_source_ready;
wire          bankmachine1_source_source_first;
wire          bankmachine1_source_source_last;
wire   [20:0] bankmachine1_source_source_payload_addr;
wire          bankmachine1_source_source_payload_we;
wire          bankmachine1_source_source_ready;
wire          bankmachine1_source_source_valid;
wire          bankmachine1_source_valid;
wire   [23:0] bankmachine1_syncfifo1_din;
wire   [23:0] bankmachine1_syncfifo1_dout;
wire          bankmachine1_syncfifo1_re;
wire          bankmachine1_syncfifo1_readable;
wire          bankmachine1_syncfifo1_we;
wire          bankmachine1_syncfifo1_writable;
reg     [1:0] bankmachine1_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine1_trascon_ready = 1'd0;
wire          bankmachine1_trascon_valid;
reg     [1:0] bankmachine1_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine1_trccon_ready = 1'd0;
wire          bankmachine1_trccon_valid;
reg     [2:0] bankmachine1_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           bankmachine1_twtpcon_ready = 1'd0;
wire          bankmachine1_twtpcon_valid;
reg     [3:0] bankmachine1_wrport_adr = 4'd0;
wire   [23:0] bankmachine1_wrport_dat_r;
wire   [23:0] bankmachine1_wrport_dat_w;
wire          bankmachine1_wrport_we;
reg           bankmachine2_auto_precharge = 1'd0;
reg    [13:0] bankmachine2_cmd_payload_a = 14'd0;
wire    [2:0] bankmachine2_cmd_payload_ba;
reg           bankmachine2_cmd_payload_cas = 1'd0;
reg           bankmachine2_cmd_payload_is_cmd = 1'd0;
reg           bankmachine2_cmd_payload_is_read = 1'd0;
reg           bankmachine2_cmd_payload_is_write = 1'd0;
reg           bankmachine2_cmd_payload_ras = 1'd0;
reg           bankmachine2_cmd_payload_we = 1'd0;
reg           bankmachine2_cmd_ready = 1'd0;
reg           bankmachine2_cmd_valid = 1'd0;
reg     [3:0] bankmachine2_consume = 4'd0;
wire          bankmachine2_do_read;
wire          bankmachine2_fifo_in_first;
wire          bankmachine2_fifo_in_last;
wire   [20:0] bankmachine2_fifo_in_payload_addr;
wire          bankmachine2_fifo_in_payload_we;
wire          bankmachine2_fifo_out_first;
wire          bankmachine2_fifo_out_last;
wire   [20:0] bankmachine2_fifo_out_payload_addr;
wire          bankmachine2_fifo_out_payload_we;
reg     [4:0] bankmachine2_level = 5'd0;
wire          bankmachine2_pipe_valid_sink_first;
wire          bankmachine2_pipe_valid_sink_last;
wire   [20:0] bankmachine2_pipe_valid_sink_payload_addr;
wire          bankmachine2_pipe_valid_sink_payload_we;
wire          bankmachine2_pipe_valid_sink_ready;
wire          bankmachine2_pipe_valid_sink_valid;
reg           bankmachine2_pipe_valid_source_first = 1'd0;
reg           bankmachine2_pipe_valid_source_last = 1'd0;
reg    [20:0] bankmachine2_pipe_valid_source_payload_addr = 21'd0;
reg           bankmachine2_pipe_valid_source_payload_we = 1'd0;
wire          bankmachine2_pipe_valid_source_ready;
reg           bankmachine2_pipe_valid_source_valid = 1'd0;
reg     [3:0] bankmachine2_produce = 4'd0;
wire    [3:0] bankmachine2_rdport_adr;
wire   [23:0] bankmachine2_rdport_dat_r;
reg           bankmachine2_refresh_gnt = 1'd0;
wire          bankmachine2_refresh_req;
reg           bankmachine2_replace = 1'd0;
wire   [20:0] bankmachine2_req_addr;
wire          bankmachine2_req_lock;
reg           bankmachine2_req_rdata_valid = 1'd0;
wire          bankmachine2_req_ready;
wire          bankmachine2_req_valid;
reg           bankmachine2_req_wdata_ready = 1'd0;
wire          bankmachine2_req_we;
reg    [13:0] bankmachine2_row = 14'd0;
reg           bankmachine2_row_close = 1'd0;
reg           bankmachine2_row_col_n_addr_sel = 1'd0;
wire          bankmachine2_row_hit;
reg           bankmachine2_row_open = 1'd0;
reg           bankmachine2_row_opened = 1'd0;
reg           bankmachine2_sink_first = 1'd0;
reg           bankmachine2_sink_last = 1'd0;
wire   [20:0] bankmachine2_sink_payload_addr;
wire          bankmachine2_sink_payload_we;
wire          bankmachine2_sink_ready;
wire          bankmachine2_sink_sink_first;
wire          bankmachine2_sink_sink_last;
wire   [20:0] bankmachine2_sink_sink_payload_addr;
wire          bankmachine2_sink_sink_payload_we;
wire          bankmachine2_sink_sink_ready;
wire          bankmachine2_sink_sink_valid;
wire          bankmachine2_sink_valid;
wire          bankmachine2_source_first;
wire          bankmachine2_source_last;
wire   [20:0] bankmachine2_source_payload_addr;
wire          bankmachine2_source_payload_we;
wire          bankmachine2_source_ready;
wire          bankmachine2_source_source_first;
wire          bankmachine2_source_source_last;
wire   [20:0] bankmachine2_source_source_payload_addr;
wire          bankmachine2_source_source_payload_we;
wire          bankmachine2_source_source_ready;
wire          bankmachine2_source_source_valid;
wire          bankmachine2_source_valid;
wire   [23:0] bankmachine2_syncfifo2_din;
wire   [23:0] bankmachine2_syncfifo2_dout;
wire          bankmachine2_syncfifo2_re;
wire          bankmachine2_syncfifo2_readable;
wire          bankmachine2_syncfifo2_we;
wire          bankmachine2_syncfifo2_writable;
reg     [1:0] bankmachine2_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine2_trascon_ready = 1'd0;
wire          bankmachine2_trascon_valid;
reg     [1:0] bankmachine2_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine2_trccon_ready = 1'd0;
wire          bankmachine2_trccon_valid;
reg     [2:0] bankmachine2_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           bankmachine2_twtpcon_ready = 1'd0;
wire          bankmachine2_twtpcon_valid;
reg     [3:0] bankmachine2_wrport_adr = 4'd0;
wire   [23:0] bankmachine2_wrport_dat_r;
wire   [23:0] bankmachine2_wrport_dat_w;
wire          bankmachine2_wrport_we;
reg           bankmachine3_auto_precharge = 1'd0;
reg    [13:0] bankmachine3_cmd_payload_a = 14'd0;
wire    [2:0] bankmachine3_cmd_payload_ba;
reg           bankmachine3_cmd_payload_cas = 1'd0;
reg           bankmachine3_cmd_payload_is_cmd = 1'd0;
reg           bankmachine3_cmd_payload_is_read = 1'd0;
reg           bankmachine3_cmd_payload_is_write = 1'd0;
reg           bankmachine3_cmd_payload_ras = 1'd0;
reg           bankmachine3_cmd_payload_we = 1'd0;
reg           bankmachine3_cmd_ready = 1'd0;
reg           bankmachine3_cmd_valid = 1'd0;
reg     [3:0] bankmachine3_consume = 4'd0;
wire          bankmachine3_do_read;
wire          bankmachine3_fifo_in_first;
wire          bankmachine3_fifo_in_last;
wire   [20:0] bankmachine3_fifo_in_payload_addr;
wire          bankmachine3_fifo_in_payload_we;
wire          bankmachine3_fifo_out_first;
wire          bankmachine3_fifo_out_last;
wire   [20:0] bankmachine3_fifo_out_payload_addr;
wire          bankmachine3_fifo_out_payload_we;
reg     [4:0] bankmachine3_level = 5'd0;
wire          bankmachine3_pipe_valid_sink_first;
wire          bankmachine3_pipe_valid_sink_last;
wire   [20:0] bankmachine3_pipe_valid_sink_payload_addr;
wire          bankmachine3_pipe_valid_sink_payload_we;
wire          bankmachine3_pipe_valid_sink_ready;
wire          bankmachine3_pipe_valid_sink_valid;
reg           bankmachine3_pipe_valid_source_first = 1'd0;
reg           bankmachine3_pipe_valid_source_last = 1'd0;
reg    [20:0] bankmachine3_pipe_valid_source_payload_addr = 21'd0;
reg           bankmachine3_pipe_valid_source_payload_we = 1'd0;
wire          bankmachine3_pipe_valid_source_ready;
reg           bankmachine3_pipe_valid_source_valid = 1'd0;
reg     [3:0] bankmachine3_produce = 4'd0;
wire    [3:0] bankmachine3_rdport_adr;
wire   [23:0] bankmachine3_rdport_dat_r;
reg           bankmachine3_refresh_gnt = 1'd0;
wire          bankmachine3_refresh_req;
reg           bankmachine3_replace = 1'd0;
wire   [20:0] bankmachine3_req_addr;
wire          bankmachine3_req_lock;
reg           bankmachine3_req_rdata_valid = 1'd0;
wire          bankmachine3_req_ready;
wire          bankmachine3_req_valid;
reg           bankmachine3_req_wdata_ready = 1'd0;
wire          bankmachine3_req_we;
reg    [13:0] bankmachine3_row = 14'd0;
reg           bankmachine3_row_close = 1'd0;
reg           bankmachine3_row_col_n_addr_sel = 1'd0;
wire          bankmachine3_row_hit;
reg           bankmachine3_row_open = 1'd0;
reg           bankmachine3_row_opened = 1'd0;
reg           bankmachine3_sink_first = 1'd0;
reg           bankmachine3_sink_last = 1'd0;
wire   [20:0] bankmachine3_sink_payload_addr;
wire          bankmachine3_sink_payload_we;
wire          bankmachine3_sink_ready;
wire          bankmachine3_sink_sink_first;
wire          bankmachine3_sink_sink_last;
wire   [20:0] bankmachine3_sink_sink_payload_addr;
wire          bankmachine3_sink_sink_payload_we;
wire          bankmachine3_sink_sink_ready;
wire          bankmachine3_sink_sink_valid;
wire          bankmachine3_sink_valid;
wire          bankmachine3_source_first;
wire          bankmachine3_source_last;
wire   [20:0] bankmachine3_source_payload_addr;
wire          bankmachine3_source_payload_we;
wire          bankmachine3_source_ready;
wire          bankmachine3_source_source_first;
wire          bankmachine3_source_source_last;
wire   [20:0] bankmachine3_source_source_payload_addr;
wire          bankmachine3_source_source_payload_we;
wire          bankmachine3_source_source_ready;
wire          bankmachine3_source_source_valid;
wire          bankmachine3_source_valid;
wire   [23:0] bankmachine3_syncfifo3_din;
wire   [23:0] bankmachine3_syncfifo3_dout;
wire          bankmachine3_syncfifo3_re;
wire          bankmachine3_syncfifo3_readable;
wire          bankmachine3_syncfifo3_we;
wire          bankmachine3_syncfifo3_writable;
reg     [1:0] bankmachine3_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine3_trascon_ready = 1'd0;
wire          bankmachine3_trascon_valid;
reg     [1:0] bankmachine3_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine3_trccon_ready = 1'd0;
wire          bankmachine3_trccon_valid;
reg     [2:0] bankmachine3_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           bankmachine3_twtpcon_ready = 1'd0;
wire          bankmachine3_twtpcon_valid;
reg     [3:0] bankmachine3_wrport_adr = 4'd0;
wire   [23:0] bankmachine3_wrport_dat_r;
wire   [23:0] bankmachine3_wrport_dat_w;
wire          bankmachine3_wrport_we;
reg           bankmachine4_auto_precharge = 1'd0;
reg    [13:0] bankmachine4_cmd_payload_a = 14'd0;
wire    [2:0] bankmachine4_cmd_payload_ba;
reg           bankmachine4_cmd_payload_cas = 1'd0;
reg           bankmachine4_cmd_payload_is_cmd = 1'd0;
reg           bankmachine4_cmd_payload_is_read = 1'd0;
reg           bankmachine4_cmd_payload_is_write = 1'd0;
reg           bankmachine4_cmd_payload_ras = 1'd0;
reg           bankmachine4_cmd_payload_we = 1'd0;
reg           bankmachine4_cmd_ready = 1'd0;
reg           bankmachine4_cmd_valid = 1'd0;
reg     [3:0] bankmachine4_consume = 4'd0;
wire          bankmachine4_do_read;
wire          bankmachine4_fifo_in_first;
wire          bankmachine4_fifo_in_last;
wire   [20:0] bankmachine4_fifo_in_payload_addr;
wire          bankmachine4_fifo_in_payload_we;
wire          bankmachine4_fifo_out_first;
wire          bankmachine4_fifo_out_last;
wire   [20:0] bankmachine4_fifo_out_payload_addr;
wire          bankmachine4_fifo_out_payload_we;
reg     [4:0] bankmachine4_level = 5'd0;
wire          bankmachine4_pipe_valid_sink_first;
wire          bankmachine4_pipe_valid_sink_last;
wire   [20:0] bankmachine4_pipe_valid_sink_payload_addr;
wire          bankmachine4_pipe_valid_sink_payload_we;
wire          bankmachine4_pipe_valid_sink_ready;
wire          bankmachine4_pipe_valid_sink_valid;
reg           bankmachine4_pipe_valid_source_first = 1'd0;
reg           bankmachine4_pipe_valid_source_last = 1'd0;
reg    [20:0] bankmachine4_pipe_valid_source_payload_addr = 21'd0;
reg           bankmachine4_pipe_valid_source_payload_we = 1'd0;
wire          bankmachine4_pipe_valid_source_ready;
reg           bankmachine4_pipe_valid_source_valid = 1'd0;
reg     [3:0] bankmachine4_produce = 4'd0;
wire    [3:0] bankmachine4_rdport_adr;
wire   [23:0] bankmachine4_rdport_dat_r;
reg           bankmachine4_refresh_gnt = 1'd0;
wire          bankmachine4_refresh_req;
reg           bankmachine4_replace = 1'd0;
wire   [20:0] bankmachine4_req_addr;
wire          bankmachine4_req_lock;
reg           bankmachine4_req_rdata_valid = 1'd0;
wire          bankmachine4_req_ready;
wire          bankmachine4_req_valid;
reg           bankmachine4_req_wdata_ready = 1'd0;
wire          bankmachine4_req_we;
reg    [13:0] bankmachine4_row = 14'd0;
reg           bankmachine4_row_close = 1'd0;
reg           bankmachine4_row_col_n_addr_sel = 1'd0;
wire          bankmachine4_row_hit;
reg           bankmachine4_row_open = 1'd0;
reg           bankmachine4_row_opened = 1'd0;
reg           bankmachine4_sink_first = 1'd0;
reg           bankmachine4_sink_last = 1'd0;
wire   [20:0] bankmachine4_sink_payload_addr;
wire          bankmachine4_sink_payload_we;
wire          bankmachine4_sink_ready;
wire          bankmachine4_sink_sink_first;
wire          bankmachine4_sink_sink_last;
wire   [20:0] bankmachine4_sink_sink_payload_addr;
wire          bankmachine4_sink_sink_payload_we;
wire          bankmachine4_sink_sink_ready;
wire          bankmachine4_sink_sink_valid;
wire          bankmachine4_sink_valid;
wire          bankmachine4_source_first;
wire          bankmachine4_source_last;
wire   [20:0] bankmachine4_source_payload_addr;
wire          bankmachine4_source_payload_we;
wire          bankmachine4_source_ready;
wire          bankmachine4_source_source_first;
wire          bankmachine4_source_source_last;
wire   [20:0] bankmachine4_source_source_payload_addr;
wire          bankmachine4_source_source_payload_we;
wire          bankmachine4_source_source_ready;
wire          bankmachine4_source_source_valid;
wire          bankmachine4_source_valid;
wire   [23:0] bankmachine4_syncfifo4_din;
wire   [23:0] bankmachine4_syncfifo4_dout;
wire          bankmachine4_syncfifo4_re;
wire          bankmachine4_syncfifo4_readable;
wire          bankmachine4_syncfifo4_we;
wire          bankmachine4_syncfifo4_writable;
reg     [1:0] bankmachine4_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine4_trascon_ready = 1'd0;
wire          bankmachine4_trascon_valid;
reg     [1:0] bankmachine4_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine4_trccon_ready = 1'd0;
wire          bankmachine4_trccon_valid;
reg     [2:0] bankmachine4_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           bankmachine4_twtpcon_ready = 1'd0;
wire          bankmachine4_twtpcon_valid;
reg     [3:0] bankmachine4_wrport_adr = 4'd0;
wire   [23:0] bankmachine4_wrport_dat_r;
wire   [23:0] bankmachine4_wrport_dat_w;
wire          bankmachine4_wrport_we;
reg           bankmachine5_auto_precharge = 1'd0;
reg    [13:0] bankmachine5_cmd_payload_a = 14'd0;
wire    [2:0] bankmachine5_cmd_payload_ba;
reg           bankmachine5_cmd_payload_cas = 1'd0;
reg           bankmachine5_cmd_payload_is_cmd = 1'd0;
reg           bankmachine5_cmd_payload_is_read = 1'd0;
reg           bankmachine5_cmd_payload_is_write = 1'd0;
reg           bankmachine5_cmd_payload_ras = 1'd0;
reg           bankmachine5_cmd_payload_we = 1'd0;
reg           bankmachine5_cmd_ready = 1'd0;
reg           bankmachine5_cmd_valid = 1'd0;
reg     [3:0] bankmachine5_consume = 4'd0;
wire          bankmachine5_do_read;
wire          bankmachine5_fifo_in_first;
wire          bankmachine5_fifo_in_last;
wire   [20:0] bankmachine5_fifo_in_payload_addr;
wire          bankmachine5_fifo_in_payload_we;
wire          bankmachine5_fifo_out_first;
wire          bankmachine5_fifo_out_last;
wire   [20:0] bankmachine5_fifo_out_payload_addr;
wire          bankmachine5_fifo_out_payload_we;
reg     [4:0] bankmachine5_level = 5'd0;
wire          bankmachine5_pipe_valid_sink_first;
wire          bankmachine5_pipe_valid_sink_last;
wire   [20:0] bankmachine5_pipe_valid_sink_payload_addr;
wire          bankmachine5_pipe_valid_sink_payload_we;
wire          bankmachine5_pipe_valid_sink_ready;
wire          bankmachine5_pipe_valid_sink_valid;
reg           bankmachine5_pipe_valid_source_first = 1'd0;
reg           bankmachine5_pipe_valid_source_last = 1'd0;
reg    [20:0] bankmachine5_pipe_valid_source_payload_addr = 21'd0;
reg           bankmachine5_pipe_valid_source_payload_we = 1'd0;
wire          bankmachine5_pipe_valid_source_ready;
reg           bankmachine5_pipe_valid_source_valid = 1'd0;
reg     [3:0] bankmachine5_produce = 4'd0;
wire    [3:0] bankmachine5_rdport_adr;
wire   [23:0] bankmachine5_rdport_dat_r;
reg           bankmachine5_refresh_gnt = 1'd0;
wire          bankmachine5_refresh_req;
reg           bankmachine5_replace = 1'd0;
wire   [20:0] bankmachine5_req_addr;
wire          bankmachine5_req_lock;
reg           bankmachine5_req_rdata_valid = 1'd0;
wire          bankmachine5_req_ready;
wire          bankmachine5_req_valid;
reg           bankmachine5_req_wdata_ready = 1'd0;
wire          bankmachine5_req_we;
reg    [13:0] bankmachine5_row = 14'd0;
reg           bankmachine5_row_close = 1'd0;
reg           bankmachine5_row_col_n_addr_sel = 1'd0;
wire          bankmachine5_row_hit;
reg           bankmachine5_row_open = 1'd0;
reg           bankmachine5_row_opened = 1'd0;
reg           bankmachine5_sink_first = 1'd0;
reg           bankmachine5_sink_last = 1'd0;
wire   [20:0] bankmachine5_sink_payload_addr;
wire          bankmachine5_sink_payload_we;
wire          bankmachine5_sink_ready;
wire          bankmachine5_sink_sink_first;
wire          bankmachine5_sink_sink_last;
wire   [20:0] bankmachine5_sink_sink_payload_addr;
wire          bankmachine5_sink_sink_payload_we;
wire          bankmachine5_sink_sink_ready;
wire          bankmachine5_sink_sink_valid;
wire          bankmachine5_sink_valid;
wire          bankmachine5_source_first;
wire          bankmachine5_source_last;
wire   [20:0] bankmachine5_source_payload_addr;
wire          bankmachine5_source_payload_we;
wire          bankmachine5_source_ready;
wire          bankmachine5_source_source_first;
wire          bankmachine5_source_source_last;
wire   [20:0] bankmachine5_source_source_payload_addr;
wire          bankmachine5_source_source_payload_we;
wire          bankmachine5_source_source_ready;
wire          bankmachine5_source_source_valid;
wire          bankmachine5_source_valid;
wire   [23:0] bankmachine5_syncfifo5_din;
wire   [23:0] bankmachine5_syncfifo5_dout;
wire          bankmachine5_syncfifo5_re;
wire          bankmachine5_syncfifo5_readable;
wire          bankmachine5_syncfifo5_we;
wire          bankmachine5_syncfifo5_writable;
reg     [1:0] bankmachine5_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine5_trascon_ready = 1'd0;
wire          bankmachine5_trascon_valid;
reg     [1:0] bankmachine5_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine5_trccon_ready = 1'd0;
wire          bankmachine5_trccon_valid;
reg     [2:0] bankmachine5_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           bankmachine5_twtpcon_ready = 1'd0;
wire          bankmachine5_twtpcon_valid;
reg     [3:0] bankmachine5_wrport_adr = 4'd0;
wire   [23:0] bankmachine5_wrport_dat_r;
wire   [23:0] bankmachine5_wrport_dat_w;
wire          bankmachine5_wrport_we;
reg           bankmachine6_auto_precharge = 1'd0;
reg    [13:0] bankmachine6_cmd_payload_a = 14'd0;
wire    [2:0] bankmachine6_cmd_payload_ba;
reg           bankmachine6_cmd_payload_cas = 1'd0;
reg           bankmachine6_cmd_payload_is_cmd = 1'd0;
reg           bankmachine6_cmd_payload_is_read = 1'd0;
reg           bankmachine6_cmd_payload_is_write = 1'd0;
reg           bankmachine6_cmd_payload_ras = 1'd0;
reg           bankmachine6_cmd_payload_we = 1'd0;
reg           bankmachine6_cmd_ready = 1'd0;
reg           bankmachine6_cmd_valid = 1'd0;
reg     [3:0] bankmachine6_consume = 4'd0;
wire          bankmachine6_do_read;
wire          bankmachine6_fifo_in_first;
wire          bankmachine6_fifo_in_last;
wire   [20:0] bankmachine6_fifo_in_payload_addr;
wire          bankmachine6_fifo_in_payload_we;
wire          bankmachine6_fifo_out_first;
wire          bankmachine6_fifo_out_last;
wire   [20:0] bankmachine6_fifo_out_payload_addr;
wire          bankmachine6_fifo_out_payload_we;
reg     [4:0] bankmachine6_level = 5'd0;
wire          bankmachine6_pipe_valid_sink_first;
wire          bankmachine6_pipe_valid_sink_last;
wire   [20:0] bankmachine6_pipe_valid_sink_payload_addr;
wire          bankmachine6_pipe_valid_sink_payload_we;
wire          bankmachine6_pipe_valid_sink_ready;
wire          bankmachine6_pipe_valid_sink_valid;
reg           bankmachine6_pipe_valid_source_first = 1'd0;
reg           bankmachine6_pipe_valid_source_last = 1'd0;
reg    [20:0] bankmachine6_pipe_valid_source_payload_addr = 21'd0;
reg           bankmachine6_pipe_valid_source_payload_we = 1'd0;
wire          bankmachine6_pipe_valid_source_ready;
reg           bankmachine6_pipe_valid_source_valid = 1'd0;
reg     [3:0] bankmachine6_produce = 4'd0;
wire    [3:0] bankmachine6_rdport_adr;
wire   [23:0] bankmachine6_rdport_dat_r;
reg           bankmachine6_refresh_gnt = 1'd0;
wire          bankmachine6_refresh_req;
reg           bankmachine6_replace = 1'd0;
wire   [20:0] bankmachine6_req_addr;
wire          bankmachine6_req_lock;
reg           bankmachine6_req_rdata_valid = 1'd0;
wire          bankmachine6_req_ready;
wire          bankmachine6_req_valid;
reg           bankmachine6_req_wdata_ready = 1'd0;
wire          bankmachine6_req_we;
reg    [13:0] bankmachine6_row = 14'd0;
reg           bankmachine6_row_close = 1'd0;
reg           bankmachine6_row_col_n_addr_sel = 1'd0;
wire          bankmachine6_row_hit;
reg           bankmachine6_row_open = 1'd0;
reg           bankmachine6_row_opened = 1'd0;
reg           bankmachine6_sink_first = 1'd0;
reg           bankmachine6_sink_last = 1'd0;
wire   [20:0] bankmachine6_sink_payload_addr;
wire          bankmachine6_sink_payload_we;
wire          bankmachine6_sink_ready;
wire          bankmachine6_sink_sink_first;
wire          bankmachine6_sink_sink_last;
wire   [20:0] bankmachine6_sink_sink_payload_addr;
wire          bankmachine6_sink_sink_payload_we;
wire          bankmachine6_sink_sink_ready;
wire          bankmachine6_sink_sink_valid;
wire          bankmachine6_sink_valid;
wire          bankmachine6_source_first;
wire          bankmachine6_source_last;
wire   [20:0] bankmachine6_source_payload_addr;
wire          bankmachine6_source_payload_we;
wire          bankmachine6_source_ready;
wire          bankmachine6_source_source_first;
wire          bankmachine6_source_source_last;
wire   [20:0] bankmachine6_source_source_payload_addr;
wire          bankmachine6_source_source_payload_we;
wire          bankmachine6_source_source_ready;
wire          bankmachine6_source_source_valid;
wire          bankmachine6_source_valid;
wire   [23:0] bankmachine6_syncfifo6_din;
wire   [23:0] bankmachine6_syncfifo6_dout;
wire          bankmachine6_syncfifo6_re;
wire          bankmachine6_syncfifo6_readable;
wire          bankmachine6_syncfifo6_we;
wire          bankmachine6_syncfifo6_writable;
reg     [1:0] bankmachine6_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine6_trascon_ready = 1'd0;
wire          bankmachine6_trascon_valid;
reg     [1:0] bankmachine6_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine6_trccon_ready = 1'd0;
wire          bankmachine6_trccon_valid;
reg     [2:0] bankmachine6_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           bankmachine6_twtpcon_ready = 1'd0;
wire          bankmachine6_twtpcon_valid;
reg     [3:0] bankmachine6_wrport_adr = 4'd0;
wire   [23:0] bankmachine6_wrport_dat_r;
wire   [23:0] bankmachine6_wrport_dat_w;
wire          bankmachine6_wrport_we;
reg           bankmachine7_auto_precharge = 1'd0;
reg    [13:0] bankmachine7_cmd_payload_a = 14'd0;
wire    [2:0] bankmachine7_cmd_payload_ba;
reg           bankmachine7_cmd_payload_cas = 1'd0;
reg           bankmachine7_cmd_payload_is_cmd = 1'd0;
reg           bankmachine7_cmd_payload_is_read = 1'd0;
reg           bankmachine7_cmd_payload_is_write = 1'd0;
reg           bankmachine7_cmd_payload_ras = 1'd0;
reg           bankmachine7_cmd_payload_we = 1'd0;
reg           bankmachine7_cmd_ready = 1'd0;
reg           bankmachine7_cmd_valid = 1'd0;
reg     [3:0] bankmachine7_consume = 4'd0;
wire          bankmachine7_do_read;
wire          bankmachine7_fifo_in_first;
wire          bankmachine7_fifo_in_last;
wire   [20:0] bankmachine7_fifo_in_payload_addr;
wire          bankmachine7_fifo_in_payload_we;
wire          bankmachine7_fifo_out_first;
wire          bankmachine7_fifo_out_last;
wire   [20:0] bankmachine7_fifo_out_payload_addr;
wire          bankmachine7_fifo_out_payload_we;
reg     [4:0] bankmachine7_level = 5'd0;
wire          bankmachine7_pipe_valid_sink_first;
wire          bankmachine7_pipe_valid_sink_last;
wire   [20:0] bankmachine7_pipe_valid_sink_payload_addr;
wire          bankmachine7_pipe_valid_sink_payload_we;
wire          bankmachine7_pipe_valid_sink_ready;
wire          bankmachine7_pipe_valid_sink_valid;
reg           bankmachine7_pipe_valid_source_first = 1'd0;
reg           bankmachine7_pipe_valid_source_last = 1'd0;
reg    [20:0] bankmachine7_pipe_valid_source_payload_addr = 21'd0;
reg           bankmachine7_pipe_valid_source_payload_we = 1'd0;
wire          bankmachine7_pipe_valid_source_ready;
reg           bankmachine7_pipe_valid_source_valid = 1'd0;
reg     [3:0] bankmachine7_produce = 4'd0;
wire    [3:0] bankmachine7_rdport_adr;
wire   [23:0] bankmachine7_rdport_dat_r;
reg           bankmachine7_refresh_gnt = 1'd0;
wire          bankmachine7_refresh_req;
reg           bankmachine7_replace = 1'd0;
wire   [20:0] bankmachine7_req_addr;
wire          bankmachine7_req_lock;
reg           bankmachine7_req_rdata_valid = 1'd0;
wire          bankmachine7_req_ready;
wire          bankmachine7_req_valid;
reg           bankmachine7_req_wdata_ready = 1'd0;
wire          bankmachine7_req_we;
reg    [13:0] bankmachine7_row = 14'd0;
reg           bankmachine7_row_close = 1'd0;
reg           bankmachine7_row_col_n_addr_sel = 1'd0;
wire          bankmachine7_row_hit;
reg           bankmachine7_row_open = 1'd0;
reg           bankmachine7_row_opened = 1'd0;
reg           bankmachine7_sink_first = 1'd0;
reg           bankmachine7_sink_last = 1'd0;
wire   [20:0] bankmachine7_sink_payload_addr;
wire          bankmachine7_sink_payload_we;
wire          bankmachine7_sink_ready;
wire          bankmachine7_sink_sink_first;
wire          bankmachine7_sink_sink_last;
wire   [20:0] bankmachine7_sink_sink_payload_addr;
wire          bankmachine7_sink_sink_payload_we;
wire          bankmachine7_sink_sink_ready;
wire          bankmachine7_sink_sink_valid;
wire          bankmachine7_sink_valid;
wire          bankmachine7_source_first;
wire          bankmachine7_source_last;
wire   [20:0] bankmachine7_source_payload_addr;
wire          bankmachine7_source_payload_we;
wire          bankmachine7_source_ready;
wire          bankmachine7_source_source_first;
wire          bankmachine7_source_source_last;
wire   [20:0] bankmachine7_source_source_payload_addr;
wire          bankmachine7_source_source_payload_we;
wire          bankmachine7_source_source_ready;
wire          bankmachine7_source_source_valid;
wire          bankmachine7_source_valid;
wire   [23:0] bankmachine7_syncfifo7_din;
wire   [23:0] bankmachine7_syncfifo7_dout;
wire          bankmachine7_syncfifo7_re;
wire          bankmachine7_syncfifo7_readable;
wire          bankmachine7_syncfifo7_we;
wire          bankmachine7_syncfifo7_writable;
reg     [1:0] bankmachine7_trascon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine7_trascon_ready = 1'd0;
wire          bankmachine7_trascon_valid;
reg     [1:0] bankmachine7_trccon_count = 2'd0;
(* dont_touch = "true" *)
reg           bankmachine7_trccon_ready = 1'd0;
wire          bankmachine7_trccon_valid;
reg     [2:0] bankmachine7_twtpcon_count = 3'd0;
(* dont_touch = "true" *)
reg           bankmachine7_twtpcon_ready = 1'd0;
wire          bankmachine7_twtpcon_valid;
reg     [3:0] bankmachine7_wrport_adr = 4'd0;
wire   [23:0] bankmachine7_wrport_dat_r;
wire   [23:0] bankmachine7_wrport_dat_w;
wire          bankmachine7_wrport_we;
wire          cas_allowed;
wire          choose_cmd_ce;
wire   [13:0] choose_cmd_cmd_payload_a;
wire    [2:0] choose_cmd_cmd_payload_ba;
reg           choose_cmd_cmd_payload_cas = 1'd0;
wire          choose_cmd_cmd_payload_is_cmd;
wire          choose_cmd_cmd_payload_is_read;
wire          choose_cmd_cmd_payload_is_write;
reg           choose_cmd_cmd_payload_ras = 1'd0;
reg           choose_cmd_cmd_payload_we = 1'd0;
reg           choose_cmd_cmd_ready = 1'd0;
wire          choose_cmd_cmd_valid;
reg     [2:0] choose_cmd_grant = 3'd0;
wire    [7:0] choose_cmd_request;
reg     [7:0] choose_cmd_valids = 8'd0;
reg           choose_cmd_want_activates = 1'd0;
reg           choose_cmd_want_cmds = 1'd0;
reg           choose_cmd_want_reads = 1'd0;
reg           choose_cmd_want_writes = 1'd0;
wire          choose_req_ce;
wire   [13:0] choose_req_cmd_payload_a;
wire    [2:0] choose_req_cmd_payload_ba;
reg           choose_req_cmd_payload_cas = 1'd0;
wire          choose_req_cmd_payload_is_cmd;
wire          choose_req_cmd_payload_is_read;
wire          choose_req_cmd_payload_is_write;
reg           choose_req_cmd_payload_ras = 1'd0;
reg           choose_req_cmd_payload_we = 1'd0;
reg           choose_req_cmd_ready = 1'd0;
wire          choose_req_cmd_valid;
reg     [2:0] choose_req_grant = 3'd0;
wire    [7:0] choose_req_request;
reg     [7:0] choose_req_valids = 8'd0;
reg           choose_req_want_activates = 1'd0;
reg           choose_req_want_cmds = 1'd0;
reg           choose_req_want_reads = 1'd0;
reg           choose_req_want_writes = 1'd0;
wire          cke;
wire          clkin;
wire          clkout0;
wire          clkout1;
wire          clkout2;
wire          clkout3;
wire          clkout4;
wire          clkout_buf0;
wire          clkout_buf1;
wire          clkout_buf2;
wire          clkout_buf3;
wire          clkout_buf4;
reg           cmd_last = 1'd0;
reg    [13:0] cmd_payload_a = 14'd0;
reg     [2:0] cmd_payload_ba = 3'd0;
reg           cmd_payload_cas = 1'd0;
reg           cmd_payload_is_read = 1'd0;
reg           cmd_payload_is_write = 1'd0;
reg           cmd_payload_ras = 1'd0;
reg           cmd_payload_we = 1'd0;
reg           cmd_ready = 1'd0;
reg           cmd_valid = 1'd0;
reg           csr_dfi_p0_act_n = 1'd1;
wire   [13:0] csr_dfi_p0_address;
wire    [2:0] csr_dfi_p0_bank;
reg           csr_dfi_p0_cas_n = 1'd1;
reg           csr_dfi_p0_cke = 1'd0;
reg           csr_dfi_p0_cs_n = 1'd1;
reg           csr_dfi_p0_odt = 1'd0;
reg           csr_dfi_p0_ras_n = 1'd1;
reg    [31:0] csr_dfi_p0_rddata = 32'd0;
wire          csr_dfi_p0_rddata_en;
reg           csr_dfi_p0_rddata_valid = 1'd0;
wire          csr_dfi_p0_reset_n;
reg           csr_dfi_p0_we_n = 1'd1;
wire   [31:0] csr_dfi_p0_wrdata;
wire          csr_dfi_p0_wrdata_en;
wire    [3:0] csr_dfi_p0_wrdata_mask;
reg           csr_dfi_p1_act_n = 1'd1;
wire   [13:0] csr_dfi_p1_address;
wire    [2:0] csr_dfi_p1_bank;
reg           csr_dfi_p1_cas_n = 1'd1;
reg           csr_dfi_p1_cke = 1'd0;
reg           csr_dfi_p1_cs_n = 1'd1;
reg           csr_dfi_p1_odt = 1'd0;
reg           csr_dfi_p1_ras_n = 1'd1;
reg    [31:0] csr_dfi_p1_rddata = 32'd0;
wire          csr_dfi_p1_rddata_en;
reg           csr_dfi_p1_rddata_valid = 1'd0;
wire          csr_dfi_p1_reset_n;
reg           csr_dfi_p1_we_n = 1'd1;
wire   [31:0] csr_dfi_p1_wrdata;
wire          csr_dfi_p1_wrdata_en;
wire    [3:0] csr_dfi_p1_wrdata_mask;
reg           csr_dfi_p2_act_n = 1'd1;
wire   [13:0] csr_dfi_p2_address;
wire    [2:0] csr_dfi_p2_bank;
reg           csr_dfi_p2_cas_n = 1'd1;
reg           csr_dfi_p2_cke = 1'd0;
reg           csr_dfi_p2_cs_n = 1'd1;
reg           csr_dfi_p2_odt = 1'd0;
reg           csr_dfi_p2_ras_n = 1'd1;
reg    [31:0] csr_dfi_p2_rddata = 32'd0;
wire          csr_dfi_p2_rddata_en;
reg           csr_dfi_p2_rddata_valid = 1'd0;
wire          csr_dfi_p2_reset_n;
reg           csr_dfi_p2_we_n = 1'd1;
wire   [31:0] csr_dfi_p2_wrdata;
wire          csr_dfi_p2_wrdata_en;
wire    [3:0] csr_dfi_p2_wrdata_mask;
reg           csr_dfi_p3_act_n = 1'd1;
wire   [13:0] csr_dfi_p3_address;
wire    [2:0] csr_dfi_p3_bank;
reg           csr_dfi_p3_cas_n = 1'd1;
reg           csr_dfi_p3_cke = 1'd0;
reg           csr_dfi_p3_cs_n = 1'd1;
reg           csr_dfi_p3_odt = 1'd0;
reg           csr_dfi_p3_ras_n = 1'd1;
reg    [31:0] csr_dfi_p3_rddata = 32'd0;
wire          csr_dfi_p3_rddata_en;
reg           csr_dfi_p3_rddata_valid = 1'd0;
wire          csr_dfi_p3_reset_n;
reg           csr_dfi_p3_we_n = 1'd1;
wire   [31:0] csr_dfi_p3_wrdata;
wire          csr_dfi_p3_wrdata_en;
wire    [3:0] csr_dfi_p3_wrdata_mask;
wire   [13:0] csr_interconnect_adr;
wire   [31:0] csr_interconnect_dat_r;
wire   [31:0] csr_interconnect_dat_w;
wire          csr_interconnect_we;
wire          csrbank0_init_done0_r;
reg           csrbank0_init_done0_re = 1'd0;
wire          csrbank0_init_done0_w;
reg           csrbank0_init_done0_we = 1'd0;
wire          csrbank0_init_error0_r;
reg           csrbank0_init_error0_re = 1'd0;
wire          csrbank0_init_error0_w;
reg           csrbank0_init_error0_we = 1'd0;
wire          csrbank0_sel;
wire    [1:0] csrbank1_dly_sel0_r;
reg           csrbank1_dly_sel0_re = 1'd0;
wire    [1:0] csrbank1_dly_sel0_w;
reg           csrbank1_dly_sel0_we = 1'd0;
wire    [4:0] csrbank1_half_sys8x_taps0_r;
reg           csrbank1_half_sys8x_taps0_re = 1'd0;
wire    [4:0] csrbank1_half_sys8x_taps0_w;
reg           csrbank1_half_sys8x_taps0_we = 1'd0;
wire    [1:0] csrbank1_rdphase0_r;
reg           csrbank1_rdphase0_re = 1'd0;
wire    [1:0] csrbank1_rdphase0_w;
reg           csrbank1_rdphase0_we = 1'd0;
wire          csrbank1_rst0_r;
reg           csrbank1_rst0_re = 1'd0;
wire          csrbank1_rst0_w;
reg           csrbank1_rst0_we = 1'd0;
wire          csrbank1_sel;
wire          csrbank1_wlevel_en0_r;
reg           csrbank1_wlevel_en0_re = 1'd0;
wire          csrbank1_wlevel_en0_w;
reg           csrbank1_wlevel_en0_we = 1'd0;
wire    [1:0] csrbank1_wrphase0_r;
reg           csrbank1_wrphase0_re = 1'd0;
wire    [1:0] csrbank1_wrphase0_w;
reg           csrbank1_wrphase0_we = 1'd0;
wire    [3:0] csrbank2_dfii_control0_r;
reg           csrbank2_dfii_control0_re = 1'd0;
wire    [3:0] csrbank2_dfii_control0_w;
reg           csrbank2_dfii_control0_we = 1'd0;
wire   [13:0] csrbank2_dfii_pi0_address0_r;
reg           csrbank2_dfii_pi0_address0_re = 1'd0;
wire   [13:0] csrbank2_dfii_pi0_address0_w;
reg           csrbank2_dfii_pi0_address0_we = 1'd0;
wire    [2:0] csrbank2_dfii_pi0_baddress0_r;
reg           csrbank2_dfii_pi0_baddress0_re = 1'd0;
wire    [2:0] csrbank2_dfii_pi0_baddress0_w;
reg           csrbank2_dfii_pi0_baddress0_we = 1'd0;
wire    [7:0] csrbank2_dfii_pi0_command0_r;
reg           csrbank2_dfii_pi0_command0_re = 1'd0;
wire    [7:0] csrbank2_dfii_pi0_command0_w;
reg           csrbank2_dfii_pi0_command0_we = 1'd0;
wire   [31:0] csrbank2_dfii_pi0_rddata_r;
reg           csrbank2_dfii_pi0_rddata_re = 1'd0;
wire   [31:0] csrbank2_dfii_pi0_rddata_w;
reg           csrbank2_dfii_pi0_rddata_we = 1'd0;
wire   [31:0] csrbank2_dfii_pi0_wrdata0_r;
reg           csrbank2_dfii_pi0_wrdata0_re = 1'd0;
wire   [31:0] csrbank2_dfii_pi0_wrdata0_w;
reg           csrbank2_dfii_pi0_wrdata0_we = 1'd0;
wire   [13:0] csrbank2_dfii_pi1_address0_r;
reg           csrbank2_dfii_pi1_address0_re = 1'd0;
wire   [13:0] csrbank2_dfii_pi1_address0_w;
reg           csrbank2_dfii_pi1_address0_we = 1'd0;
wire    [2:0] csrbank2_dfii_pi1_baddress0_r;
reg           csrbank2_dfii_pi1_baddress0_re = 1'd0;
wire    [2:0] csrbank2_dfii_pi1_baddress0_w;
reg           csrbank2_dfii_pi1_baddress0_we = 1'd0;
wire    [7:0] csrbank2_dfii_pi1_command0_r;
reg           csrbank2_dfii_pi1_command0_re = 1'd0;
wire    [7:0] csrbank2_dfii_pi1_command0_w;
reg           csrbank2_dfii_pi1_command0_we = 1'd0;
wire   [31:0] csrbank2_dfii_pi1_rddata_r;
reg           csrbank2_dfii_pi1_rddata_re = 1'd0;
wire   [31:0] csrbank2_dfii_pi1_rddata_w;
reg           csrbank2_dfii_pi1_rddata_we = 1'd0;
wire   [31:0] csrbank2_dfii_pi1_wrdata0_r;
reg           csrbank2_dfii_pi1_wrdata0_re = 1'd0;
wire   [31:0] csrbank2_dfii_pi1_wrdata0_w;
reg           csrbank2_dfii_pi1_wrdata0_we = 1'd0;
wire   [13:0] csrbank2_dfii_pi2_address0_r;
reg           csrbank2_dfii_pi2_address0_re = 1'd0;
wire   [13:0] csrbank2_dfii_pi2_address0_w;
reg           csrbank2_dfii_pi2_address0_we = 1'd0;
wire    [2:0] csrbank2_dfii_pi2_baddress0_r;
reg           csrbank2_dfii_pi2_baddress0_re = 1'd0;
wire    [2:0] csrbank2_dfii_pi2_baddress0_w;
reg           csrbank2_dfii_pi2_baddress0_we = 1'd0;
wire    [7:0] csrbank2_dfii_pi2_command0_r;
reg           csrbank2_dfii_pi2_command0_re = 1'd0;
wire    [7:0] csrbank2_dfii_pi2_command0_w;
reg           csrbank2_dfii_pi2_command0_we = 1'd0;
wire   [31:0] csrbank2_dfii_pi2_rddata_r;
reg           csrbank2_dfii_pi2_rddata_re = 1'd0;
wire   [31:0] csrbank2_dfii_pi2_rddata_w;
reg           csrbank2_dfii_pi2_rddata_we = 1'd0;
wire   [31:0] csrbank2_dfii_pi2_wrdata0_r;
reg           csrbank2_dfii_pi2_wrdata0_re = 1'd0;
wire   [31:0] csrbank2_dfii_pi2_wrdata0_w;
reg           csrbank2_dfii_pi2_wrdata0_we = 1'd0;
wire   [13:0] csrbank2_dfii_pi3_address0_r;
reg           csrbank2_dfii_pi3_address0_re = 1'd0;
wire   [13:0] csrbank2_dfii_pi3_address0_w;
reg           csrbank2_dfii_pi3_address0_we = 1'd0;
wire    [2:0] csrbank2_dfii_pi3_baddress0_r;
reg           csrbank2_dfii_pi3_baddress0_re = 1'd0;
wire    [2:0] csrbank2_dfii_pi3_baddress0_w;
reg           csrbank2_dfii_pi3_baddress0_we = 1'd0;
wire    [7:0] csrbank2_dfii_pi3_command0_r;
reg           csrbank2_dfii_pi3_command0_re = 1'd0;
wire    [7:0] csrbank2_dfii_pi3_command0_w;
reg           csrbank2_dfii_pi3_command0_we = 1'd0;
wire   [31:0] csrbank2_dfii_pi3_rddata_r;
reg           csrbank2_dfii_pi3_rddata_re = 1'd0;
wire   [31:0] csrbank2_dfii_pi3_rddata_w;
reg           csrbank2_dfii_pi3_rddata_we = 1'd0;
wire   [31:0] csrbank2_dfii_pi3_wrdata0_r;
reg           csrbank2_dfii_pi3_wrdata0_re = 1'd0;
wire   [31:0] csrbank2_dfii_pi3_wrdata0_w;
reg           csrbank2_dfii_pi3_wrdata0_we = 1'd0;
wire          csrbank2_sel;
reg           dfi_p0_act_n = 1'd1;
reg    [13:0] dfi_p0_address = 14'd0;
reg     [2:0] dfi_p0_bank = 3'd0;
reg           dfi_p0_cas_n = 1'd1;
wire          dfi_p0_cke;
reg           dfi_p0_cs_n = 1'd1;
wire          dfi_p0_odt;
reg           dfi_p0_ras_n = 1'd1;
wire   [31:0] dfi_p0_rddata;
reg           dfi_p0_rddata_en = 1'd0;
wire          dfi_p0_rddata_valid;
wire          dfi_p0_reset_n;
reg           dfi_p0_we_n = 1'd1;
wire   [31:0] dfi_p0_wrdata;
reg           dfi_p0_wrdata_en = 1'd0;
wire    [3:0] dfi_p0_wrdata_mask;
reg           dfi_p1_act_n = 1'd1;
reg    [13:0] dfi_p1_address = 14'd0;
reg     [2:0] dfi_p1_bank = 3'd0;
reg           dfi_p1_cas_n = 1'd1;
wire          dfi_p1_cke;
reg           dfi_p1_cs_n = 1'd1;
wire          dfi_p1_odt;
reg           dfi_p1_ras_n = 1'd1;
wire   [31:0] dfi_p1_rddata;
reg           dfi_p1_rddata_en = 1'd0;
wire          dfi_p1_rddata_valid;
wire          dfi_p1_reset_n;
reg           dfi_p1_we_n = 1'd1;
wire   [31:0] dfi_p1_wrdata;
reg           dfi_p1_wrdata_en = 1'd0;
wire    [3:0] dfi_p1_wrdata_mask;
reg           dfi_p2_act_n = 1'd1;
reg    [13:0] dfi_p2_address = 14'd0;
reg     [2:0] dfi_p2_bank = 3'd0;
reg           dfi_p2_cas_n = 1'd1;
wire          dfi_p2_cke;
reg           dfi_p2_cs_n = 1'd1;
wire          dfi_p2_odt;
reg           dfi_p2_ras_n = 1'd1;
wire   [31:0] dfi_p2_rddata;
reg           dfi_p2_rddata_en = 1'd0;
wire          dfi_p2_rddata_valid;
wire          dfi_p2_reset_n;
reg           dfi_p2_we_n = 1'd1;
wire   [31:0] dfi_p2_wrdata;
reg           dfi_p2_wrdata_en = 1'd0;
wire    [3:0] dfi_p2_wrdata_mask;
reg           dfi_p3_act_n = 1'd1;
reg    [13:0] dfi_p3_address = 14'd0;
reg     [2:0] dfi_p3_bank = 3'd0;
reg           dfi_p3_cas_n = 1'd1;
wire          dfi_p3_cke;
reg           dfi_p3_cs_n = 1'd1;
wire          dfi_p3_odt;
reg           dfi_p3_ras_n = 1'd1;
wire   [31:0] dfi_p3_rddata;
reg           dfi_p3_rddata_en = 1'd0;
wire          dfi_p3_rddata_valid;
wire          dfi_p3_reset_n;
reg           dfi_p3_we_n = 1'd1;
wire   [31:0] dfi_p3_wrdata;
reg           dfi_p3_wrdata_en = 1'd0;
wire    [3:0] dfi_p3_wrdata_mask;
reg           en0 = 1'd0;
reg           en1 = 1'd0;
reg           ext_dfi_p0_act_n = 1'd1;
reg    [13:0] ext_dfi_p0_address = 14'd0;
reg     [2:0] ext_dfi_p0_bank = 3'd0;
reg           ext_dfi_p0_cas_n = 1'd1;
reg           ext_dfi_p0_cke = 1'd0;
reg           ext_dfi_p0_cs_n = 1'd1;
reg           ext_dfi_p0_odt = 1'd0;
reg           ext_dfi_p0_ras_n = 1'd1;
reg    [31:0] ext_dfi_p0_rddata = 32'd0;
reg           ext_dfi_p0_rddata_en = 1'd0;
reg           ext_dfi_p0_rddata_valid = 1'd0;
reg           ext_dfi_p0_reset_n = 1'd0;
reg           ext_dfi_p0_we_n = 1'd1;
reg    [31:0] ext_dfi_p0_wrdata = 32'd0;
reg           ext_dfi_p0_wrdata_en = 1'd0;
reg     [3:0] ext_dfi_p0_wrdata_mask = 4'd0;
reg           ext_dfi_p1_act_n = 1'd1;
reg    [13:0] ext_dfi_p1_address = 14'd0;
reg     [2:0] ext_dfi_p1_bank = 3'd0;
reg           ext_dfi_p1_cas_n = 1'd1;
reg           ext_dfi_p1_cke = 1'd0;
reg           ext_dfi_p1_cs_n = 1'd1;
reg           ext_dfi_p1_odt = 1'd0;
reg           ext_dfi_p1_ras_n = 1'd1;
reg    [31:0] ext_dfi_p1_rddata = 32'd0;
reg           ext_dfi_p1_rddata_en = 1'd0;
reg           ext_dfi_p1_rddata_valid = 1'd0;
reg           ext_dfi_p1_reset_n = 1'd0;
reg           ext_dfi_p1_we_n = 1'd1;
reg    [31:0] ext_dfi_p1_wrdata = 32'd0;
reg           ext_dfi_p1_wrdata_en = 1'd0;
reg     [3:0] ext_dfi_p1_wrdata_mask = 4'd0;
reg           ext_dfi_p2_act_n = 1'd1;
reg    [13:0] ext_dfi_p2_address = 14'd0;
reg     [2:0] ext_dfi_p2_bank = 3'd0;
reg           ext_dfi_p2_cas_n = 1'd1;
reg           ext_dfi_p2_cke = 1'd0;
reg           ext_dfi_p2_cs_n = 1'd1;
reg           ext_dfi_p2_odt = 1'd0;
reg           ext_dfi_p2_ras_n = 1'd1;
reg    [31:0] ext_dfi_p2_rddata = 32'd0;
reg           ext_dfi_p2_rddata_en = 1'd0;
reg           ext_dfi_p2_rddata_valid = 1'd0;
reg           ext_dfi_p2_reset_n = 1'd0;
reg           ext_dfi_p2_we_n = 1'd1;
reg    [31:0] ext_dfi_p2_wrdata = 32'd0;
reg           ext_dfi_p2_wrdata_en = 1'd0;
reg     [3:0] ext_dfi_p2_wrdata_mask = 4'd0;
reg           ext_dfi_p3_act_n = 1'd1;
reg    [13:0] ext_dfi_p3_address = 14'd0;
reg     [2:0] ext_dfi_p3_bank = 3'd0;
reg           ext_dfi_p3_cas_n = 1'd1;
reg           ext_dfi_p3_cke = 1'd0;
reg           ext_dfi_p3_cs_n = 1'd1;
reg           ext_dfi_p3_odt = 1'd0;
reg           ext_dfi_p3_ras_n = 1'd1;
reg    [31:0] ext_dfi_p3_rddata = 32'd0;
reg           ext_dfi_p3_rddata_en = 1'd0;
reg           ext_dfi_p3_rddata_valid = 1'd0;
reg           ext_dfi_p3_reset_n = 1'd0;
reg           ext_dfi_p3_we_n = 1'd1;
reg    [31:0] ext_dfi_p3_wrdata = 32'd0;
reg           ext_dfi_p3_wrdata_en = 1'd0;
reg     [3:0] ext_dfi_p3_wrdata_mask = 4'd0;
reg           ext_dfi_sel = 1'd0;
wire          go_to_refresh;
reg           ic_reset = 1'd1;
reg           init_done_re = 1'd0;
reg           init_done_storage = 1'd0;
reg           init_error_re = 1'd0;
reg           init_error_storage = 1'd0;
wire   [13:0] interface0_bank_bus_adr;
reg    [31:0] interface0_bank_bus_dat_r = 32'd0;
wire   [31:0] interface0_bank_bus_dat_w;
wire          interface0_bank_bus_we;
wire   [13:0] interface1_bank_bus_adr;
reg    [31:0] interface1_bank_bus_dat_r = 32'd0;
wire   [31:0] interface1_bank_bus_dat_w;
wire          interface1_bank_bus_we;
wire   [13:0] interface2_bank_bus_adr;
reg    [31:0] interface2_bank_bus_dat_r = 32'd0;
wire   [31:0] interface2_bank_bus_dat_w;
wire          interface2_bank_bus_we;
wire   [20:0] interface_bank0_addr;
wire          interface_bank0_lock;
wire          interface_bank0_rdata_valid;
wire          interface_bank0_ready;
wire          interface_bank0_valid;
wire          interface_bank0_wdata_ready;
wire          interface_bank0_we;
wire   [20:0] interface_bank1_addr;
wire          interface_bank1_lock;
wire          interface_bank1_rdata_valid;
wire          interface_bank1_ready;
wire          interface_bank1_valid;
wire          interface_bank1_wdata_ready;
wire          interface_bank1_we;
wire   [20:0] interface_bank2_addr;
wire          interface_bank2_lock;
wire          interface_bank2_rdata_valid;
wire          interface_bank2_ready;
wire          interface_bank2_valid;
wire          interface_bank2_wdata_ready;
wire          interface_bank2_we;
wire   [20:0] interface_bank3_addr;
wire          interface_bank3_lock;
wire          interface_bank3_rdata_valid;
wire          interface_bank3_ready;
wire          interface_bank3_valid;
wire          interface_bank3_wdata_ready;
wire          interface_bank3_we;
wire   [20:0] interface_bank4_addr;
wire          interface_bank4_lock;
wire          interface_bank4_rdata_valid;
wire          interface_bank4_ready;
wire          interface_bank4_valid;
wire          interface_bank4_wdata_ready;
wire          interface_bank4_we;
wire   [20:0] interface_bank5_addr;
wire          interface_bank5_lock;
wire          interface_bank5_rdata_valid;
wire          interface_bank5_ready;
wire          interface_bank5_valid;
wire          interface_bank5_wdata_ready;
wire          interface_bank5_we;
wire   [20:0] interface_bank6_addr;
wire          interface_bank6_lock;
wire          interface_bank6_rdata_valid;
wire          interface_bank6_ready;
wire          interface_bank6_valid;
wire          interface_bank6_wdata_ready;
wire          interface_bank6_we;
wire   [20:0] interface_bank7_addr;
wire          interface_bank7_lock;
wire          interface_bank7_rdata_valid;
wire          interface_bank7_ready;
wire          interface_bank7_valid;
wire          interface_bank7_wdata_ready;
wire          interface_bank7_we;
wire  [127:0] interface_rdata;
reg   [127:0] interface_wdata = 128'd0;
reg    [15:0] interface_wdata_we = 16'd0;
wire          iodelay_clk;
wire          iodelay_rst;
reg           is_ongoing = 1'd0;
reg    [13:0] litedramcore_adr = 14'd0;
reg    [13:0] litedramcore_adr_wishbone2csr_next_value1 = 14'd0;
reg           litedramcore_adr_wishbone2csr_next_value_ce1 = 1'd0;
wire   [31:0] litedramcore_dat_r;
reg    [31:0] litedramcore_dat_w = 32'd0;
reg    [31:0] litedramcore_dat_w_wishbone2csr_next_value0 = 32'd0;
reg           litedramcore_dat_w_wishbone2csr_next_value_ce0 = 1'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine0_next_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine0_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine1_next_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine1_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine2_next_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine2_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine3_next_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine3_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine4_next_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine4_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine5_next_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine5_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine6_next_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine6_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine7_next_state = 3'd0;
reg     [2:0] litedramcore_litedramcore_bankmachine7_state = 3'd0;
reg           litedramcore_litedramcore_locked0 = 1'd0;
reg           litedramcore_litedramcore_locked1 = 1'd0;
reg           litedramcore_litedramcore_locked2 = 1'd0;
reg           litedramcore_litedramcore_locked3 = 1'd0;
reg           litedramcore_litedramcore_locked4 = 1'd0;
reg           litedramcore_litedramcore_locked5 = 1'd0;
reg           litedramcore_litedramcore_locked6 = 1'd0;
reg           litedramcore_litedramcore_locked7 = 1'd0;
reg     [3:0] litedramcore_litedramcore_multiplexer_next_state = 4'd0;
reg     [3:0] litedramcore_litedramcore_multiplexer_state = 4'd0;
reg           litedramcore_litedramcore_new_master_rdata_valid0 = 1'd0;
reg           litedramcore_litedramcore_new_master_rdata_valid1 = 1'd0;
reg           litedramcore_litedramcore_new_master_rdata_valid2 = 1'd0;
reg           litedramcore_litedramcore_new_master_rdata_valid3 = 1'd0;
reg           litedramcore_litedramcore_new_master_rdata_valid4 = 1'd0;
reg           litedramcore_litedramcore_new_master_rdata_valid5 = 1'd0;
reg           litedramcore_litedramcore_new_master_rdata_valid6 = 1'd0;
reg           litedramcore_litedramcore_new_master_rdata_valid7 = 1'd0;
reg           litedramcore_litedramcore_new_master_rdata_valid8 = 1'd0;
reg           litedramcore_litedramcore_new_master_wdata_ready0 = 1'd0;
reg           litedramcore_litedramcore_new_master_wdata_ready1 = 1'd0;
reg     [1:0] litedramcore_litedramcore_next_state = 2'd0;
reg     [1:0] litedramcore_litedramcore_refresher_next_state = 2'd0;
reg     [1:0] litedramcore_litedramcore_refresher_state = 2'd0;
wire          litedramcore_litedramcore_roundrobin0_ce;
wire          litedramcore_litedramcore_roundrobin0_grant;
wire          litedramcore_litedramcore_roundrobin0_request;
wire          litedramcore_litedramcore_roundrobin1_ce;
wire          litedramcore_litedramcore_roundrobin1_grant;
wire          litedramcore_litedramcore_roundrobin1_request;
wire          litedramcore_litedramcore_roundrobin2_ce;
wire          litedramcore_litedramcore_roundrobin2_grant;
wire          litedramcore_litedramcore_roundrobin2_request;
wire          litedramcore_litedramcore_roundrobin3_ce;
wire          litedramcore_litedramcore_roundrobin3_grant;
wire          litedramcore_litedramcore_roundrobin3_request;
wire          litedramcore_litedramcore_roundrobin4_ce;
wire          litedramcore_litedramcore_roundrobin4_grant;
wire          litedramcore_litedramcore_roundrobin4_request;
wire          litedramcore_litedramcore_roundrobin5_ce;
wire          litedramcore_litedramcore_roundrobin5_grant;
wire          litedramcore_litedramcore_roundrobin5_request;
wire          litedramcore_litedramcore_roundrobin6_ce;
wire          litedramcore_litedramcore_roundrobin6_grant;
wire          litedramcore_litedramcore_roundrobin6_request;
wire          litedramcore_litedramcore_roundrobin7_ce;
wire          litedramcore_litedramcore_roundrobin7_grant;
wire          litedramcore_litedramcore_roundrobin7_request;
reg     [1:0] litedramcore_litedramcore_state = 2'd0;
reg     [1:0] litedramcore_litedramwishbone2native_next_state = 2'd0;
reg     [1:0] litedramcore_litedramwishbone2native_state = 2'd0;
wire          litedramcore_pll_fb;
wire          litedramcore_reset0;
wire          litedramcore_reset1;
wire          litedramcore_reset2;
wire          litedramcore_reset3;
wire          litedramcore_reset4;
wire          litedramcore_reset5;
wire          litedramcore_reset6;
wire          litedramcore_reset7;
reg           litedramcore_we = 1'd0;
reg           litedramcore_we_wishbone2csr_next_value2 = 1'd0;
reg           litedramcore_we_wishbone2csr_next_value_ce2 = 1'd0;
reg     [1:0] litedramcore_wishbone2csr_next_state = 2'd0;
reg     [1:0] litedramcore_wishbone2csr_state = 2'd0;
reg           litedramcore_wishbone_ack = 1'd0;
wire   [29:0] litedramcore_wishbone_adr;
wire    [1:0] litedramcore_wishbone_bte;
wire    [2:0] litedramcore_wishbone_cti;
wire          litedramcore_wishbone_cyc;
reg    [31:0] litedramcore_wishbone_dat_r = 32'd0;
wire   [31:0] litedramcore_wishbone_dat_w;
reg           litedramcore_wishbone_err = 1'd0;
wire    [3:0] litedramcore_wishbone_sel;
wire          litedramcore_wishbone_stb;
wire          litedramcore_wishbone_we;
wire          litedramnativeportconverter_addr_changed;
reg    [25:0] litedramnativeportconverter_cmd_addr = 26'd0;
reg    [25:0] litedramnativeportconverter_cmd_addr_litedramcore_next_value0 = 26'd0;
reg           litedramnativeportconverter_cmd_addr_litedramcore_next_value_ce0 = 1'd0;
reg           litedramnativeportconverter_cmd_buffer_sink_first = 1'd0;
reg           litedramnativeportconverter_cmd_buffer_sink_last = 1'd0;
reg     [3:0] litedramnativeportconverter_cmd_buffer_sink_payload_sel = 4'd0;
reg           litedramnativeportconverter_cmd_buffer_sink_payload_we = 1'd0;
wire          litedramnativeportconverter_cmd_buffer_sink_ready;
reg           litedramnativeportconverter_cmd_buffer_sink_valid = 1'd0;
wire          litedramnativeportconverter_cmd_buffer_source_first;
wire          litedramnativeportconverter_cmd_buffer_source_last;
wire    [3:0] litedramnativeportconverter_cmd_buffer_source_payload_sel;
wire          litedramnativeportconverter_cmd_buffer_source_payload_we;
wire          litedramnativeportconverter_cmd_buffer_source_ready;
wire          litedramnativeportconverter_cmd_buffer_source_valid;
reg           litedramnativeportconverter_cmd_last = 1'd0;
reg           litedramnativeportconverter_cmd_last_litedramcore_next_value2 = 1'd0;
reg           litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2 = 1'd0;
reg           litedramnativeportconverter_cmd_we = 1'd0;
reg           litedramnativeportconverter_cmd_we_litedramcore_next_value1 = 1'd0;
reg           litedramnativeportconverter_cmd_we_litedramcore_next_value_ce1 = 1'd0;
wire          litedramnativeportconverter_next_cmd;
reg     [3:0] litedramnativeportconverter_rdata_chunk = 4'd1;
wire          litedramnativeportconverter_rdata_chunk_valid;
wire          litedramnativeportconverter_rdata_converter_converter_first;
wire          litedramnativeportconverter_rdata_converter_converter_last;
reg     [1:0] litedramnativeportconverter_rdata_converter_converter_mux = 2'd0;
wire          litedramnativeportconverter_rdata_converter_converter_sink_first;
wire          litedramnativeportconverter_rdata_converter_converter_sink_last;
reg   [127:0] litedramnativeportconverter_rdata_converter_converter_sink_payload_data = 128'd0;
wire          litedramnativeportconverter_rdata_converter_converter_sink_ready;
wire          litedramnativeportconverter_rdata_converter_converter_sink_valid;
wire          litedramnativeportconverter_rdata_converter_converter_source_first;
wire          litedramnativeportconverter_rdata_converter_converter_source_last;
reg    [31:0] litedramnativeportconverter_rdata_converter_converter_source_payload_data = 32'd0;
wire          litedramnativeportconverter_rdata_converter_converter_source_payload_valid_token_count;
wire          litedramnativeportconverter_rdata_converter_converter_source_ready;
wire          litedramnativeportconverter_rdata_converter_converter_source_valid;
wire          litedramnativeportconverter_rdata_converter_sink_first;
wire          litedramnativeportconverter_rdata_converter_sink_last;
wire  [127:0] litedramnativeportconverter_rdata_converter_sink_payload_data;
wire          litedramnativeportconverter_rdata_converter_sink_ready;
wire          litedramnativeportconverter_rdata_converter_sink_valid;
wire          litedramnativeportconverter_rdata_converter_source_first;
wire          litedramnativeportconverter_rdata_converter_source_last;
wire   [31:0] litedramnativeportconverter_rdata_converter_source_payload_data;
reg           litedramnativeportconverter_rdata_converter_source_ready = 1'd0;
wire          litedramnativeportconverter_rdata_converter_source_source_first;
wire          litedramnativeportconverter_rdata_converter_source_source_last;
wire   [31:0] litedramnativeportconverter_rdata_converter_source_source_payload_data;
wire          litedramnativeportconverter_rdata_converter_source_source_ready;
wire          litedramnativeportconverter_rdata_converter_source_source_valid;
wire          litedramnativeportconverter_rdata_converter_source_valid;
reg     [1:0] litedramnativeportconverter_rdata_fifo_consume = 2'd0;
wire          litedramnativeportconverter_rdata_fifo_do_read;
wire          litedramnativeportconverter_rdata_fifo_fifo_in_first;
wire          litedramnativeportconverter_rdata_fifo_fifo_in_last;
wire  [127:0] litedramnativeportconverter_rdata_fifo_fifo_in_payload_data;
wire          litedramnativeportconverter_rdata_fifo_fifo_out_first;
wire          litedramnativeportconverter_rdata_fifo_fifo_out_last;
wire  [127:0] litedramnativeportconverter_rdata_fifo_fifo_out_payload_data;
reg     [1:0] litedramnativeportconverter_rdata_fifo_level = 2'd0;
reg     [1:0] litedramnativeportconverter_rdata_fifo_produce = 2'd0;
wire    [1:0] litedramnativeportconverter_rdata_fifo_rdport_adr;
wire  [129:0] litedramnativeportconverter_rdata_fifo_rdport_dat_r;
reg           litedramnativeportconverter_rdata_fifo_replace = 1'd0;
wire          litedramnativeportconverter_rdata_fifo_sink_first;
wire          litedramnativeportconverter_rdata_fifo_sink_last;
wire  [127:0] litedramnativeportconverter_rdata_fifo_sink_payload_data;
wire          litedramnativeportconverter_rdata_fifo_sink_ready;
wire          litedramnativeportconverter_rdata_fifo_sink_valid;
wire          litedramnativeportconverter_rdata_fifo_source_first;
wire          litedramnativeportconverter_rdata_fifo_source_last;
wire  [127:0] litedramnativeportconverter_rdata_fifo_source_payload_data;
wire          litedramnativeportconverter_rdata_fifo_source_ready;
wire          litedramnativeportconverter_rdata_fifo_source_valid;
wire  [129:0] litedramnativeportconverter_rdata_fifo_syncfifo_din;
wire  [129:0] litedramnativeportconverter_rdata_fifo_syncfifo_dout;
wire          litedramnativeportconverter_rdata_fifo_syncfifo_re;
wire          litedramnativeportconverter_rdata_fifo_syncfifo_readable;
wire          litedramnativeportconverter_rdata_fifo_syncfifo_we;
wire          litedramnativeportconverter_rdata_fifo_syncfifo_writable;
reg     [1:0] litedramnativeportconverter_rdata_fifo_wrport_adr = 2'd0;
wire  [129:0] litedramnativeportconverter_rdata_fifo_wrport_dat_r;
wire  [129:0] litedramnativeportconverter_rdata_fifo_wrport_dat_w;
wire          litedramnativeportconverter_rdata_fifo_wrport_we;
reg           litedramnativeportconverter_rdata_finished = 1'd0;
reg           litedramnativeportconverter_read_lock = 1'd0;
reg           litedramnativeportconverter_read_unlocked = 1'd0;
wire          litedramnativeportconverter_rw_collision;
reg     [3:0] litedramnativeportconverter_sel = 4'd0;
reg     [3:0] litedramnativeportconverter_sel_litedramcore_next_value3 = 4'd0;
reg           litedramnativeportconverter_sel_litedramcore_next_value_ce3 = 1'd0;
wire          litedramnativeportconverter_wdata_buffer_pipe_valid_sink_first;
wire          litedramnativeportconverter_wdata_buffer_pipe_valid_sink_last;
wire  [127:0] litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_data;
wire   [15:0] litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_we;
wire          litedramnativeportconverter_wdata_buffer_pipe_valid_sink_ready;
wire          litedramnativeportconverter_wdata_buffer_pipe_valid_sink_valid;
reg           litedramnativeportconverter_wdata_buffer_pipe_valid_source_first = 1'd0;
reg           litedramnativeportconverter_wdata_buffer_pipe_valid_source_last = 1'd0;
reg   [127:0] litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data = 128'd0;
reg    [15:0] litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we = 16'd0;
wire          litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready;
reg           litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid = 1'd0;
reg           litedramnativeportconverter_wdata_buffer_sink_sink_first = 1'd0;
reg           litedramnativeportconverter_wdata_buffer_sink_sink_last = 1'd0;
wire  [127:0] litedramnativeportconverter_wdata_buffer_sink_sink_payload_data;
wire   [15:0] litedramnativeportconverter_wdata_buffer_sink_sink_payload_we;
wire          litedramnativeportconverter_wdata_buffer_sink_sink_ready;
wire          litedramnativeportconverter_wdata_buffer_sink_sink_valid;
wire          litedramnativeportconverter_wdata_buffer_source_source_first;
wire          litedramnativeportconverter_wdata_buffer_source_source_last;
wire  [127:0] litedramnativeportconverter_wdata_buffer_source_source_payload_data;
wire   [15:0] litedramnativeportconverter_wdata_buffer_source_source_payload_we;
wire          litedramnativeportconverter_wdata_buffer_source_source_ready;
wire          litedramnativeportconverter_wdata_buffer_source_source_valid;
reg     [3:0] litedramnativeportconverter_wdata_chunk = 4'd1;
wire          litedramnativeportconverter_wdata_chunk_valid;
reg     [1:0] litedramnativeportconverter_wdata_converter_converter_demux = 2'd0;
wire          litedramnativeportconverter_wdata_converter_converter_load_part;
wire          litedramnativeportconverter_wdata_converter_converter_sink_first;
wire          litedramnativeportconverter_wdata_converter_converter_sink_last;
wire   [35:0] litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
wire          litedramnativeportconverter_wdata_converter_converter_sink_ready;
wire          litedramnativeportconverter_wdata_converter_converter_sink_valid;
reg           litedramnativeportconverter_wdata_converter_converter_source_first = 1'd0;
reg           litedramnativeportconverter_wdata_converter_converter_source_last = 1'd0;
reg   [143:0] litedramnativeportconverter_wdata_converter_converter_source_payload_data = 144'd0;
reg     [2:0] litedramnativeportconverter_wdata_converter_converter_source_payload_valid_token_count = 3'd0;
wire          litedramnativeportconverter_wdata_converter_converter_source_ready;
wire          litedramnativeportconverter_wdata_converter_converter_source_valid;
reg           litedramnativeportconverter_wdata_converter_converter_strobe_all = 1'd0;
reg           litedramnativeportconverter_wdata_converter_sink_first = 1'd0;
reg           litedramnativeportconverter_wdata_converter_sink_last = 1'd0;
reg    [31:0] litedramnativeportconverter_wdata_converter_sink_payload_data = 32'd0;
reg     [3:0] litedramnativeportconverter_wdata_converter_sink_payload_we = 4'd0;
wire          litedramnativeportconverter_wdata_converter_sink_ready;
reg           litedramnativeportconverter_wdata_converter_sink_valid = 1'd0;
wire          litedramnativeportconverter_wdata_converter_source_first;
wire          litedramnativeportconverter_wdata_converter_source_last;
reg   [127:0] litedramnativeportconverter_wdata_converter_source_payload_data = 128'd0;
reg    [15:0] litedramnativeportconverter_wdata_converter_source_payload_we = 16'd0;
wire          litedramnativeportconverter_wdata_converter_source_ready;
wire          litedramnativeportconverter_wdata_converter_source_source_first;
wire          litedramnativeportconverter_wdata_converter_source_source_last;
wire  [143:0] litedramnativeportconverter_wdata_converter_source_source_payload_data;
wire          litedramnativeportconverter_wdata_converter_source_source_ready;
wire          litedramnativeportconverter_wdata_converter_source_source_valid;
wire          litedramnativeportconverter_wdata_converter_source_valid;
reg     [1:0] litedramnativeportconverter_wdata_fifo_consume = 2'd0;
wire          litedramnativeportconverter_wdata_fifo_do_read;
wire          litedramnativeportconverter_wdata_fifo_fifo_in_first;
wire          litedramnativeportconverter_wdata_fifo_fifo_in_last;
wire   [31:0] litedramnativeportconverter_wdata_fifo_fifo_in_payload_data;
wire    [3:0] litedramnativeportconverter_wdata_fifo_fifo_in_payload_we;
wire          litedramnativeportconverter_wdata_fifo_fifo_out_first;
wire          litedramnativeportconverter_wdata_fifo_fifo_out_last;
wire   [31:0] litedramnativeportconverter_wdata_fifo_fifo_out_payload_data;
wire    [3:0] litedramnativeportconverter_wdata_fifo_fifo_out_payload_we;
reg     [1:0] litedramnativeportconverter_wdata_fifo_level = 2'd0;
reg     [1:0] litedramnativeportconverter_wdata_fifo_produce = 2'd0;
wire    [1:0] litedramnativeportconverter_wdata_fifo_rdport_adr;
wire   [37:0] litedramnativeportconverter_wdata_fifo_rdport_dat_r;
reg           litedramnativeportconverter_wdata_fifo_replace = 1'd0;
wire          litedramnativeportconverter_wdata_fifo_sink_first;
wire          litedramnativeportconverter_wdata_fifo_sink_last;
wire   [31:0] litedramnativeportconverter_wdata_fifo_sink_payload_data;
wire    [3:0] litedramnativeportconverter_wdata_fifo_sink_payload_we;
wire          litedramnativeportconverter_wdata_fifo_sink_ready;
wire          litedramnativeportconverter_wdata_fifo_sink_valid;
wire          litedramnativeportconverter_wdata_fifo_source_first;
wire          litedramnativeportconverter_wdata_fifo_source_last;
wire   [31:0] litedramnativeportconverter_wdata_fifo_source_payload_data;
wire    [3:0] litedramnativeportconverter_wdata_fifo_source_payload_we;
reg           litedramnativeportconverter_wdata_fifo_source_ready = 1'd0;
wire          litedramnativeportconverter_wdata_fifo_source_valid;
wire   [37:0] litedramnativeportconverter_wdata_fifo_syncfifo_din;
wire   [37:0] litedramnativeportconverter_wdata_fifo_syncfifo_dout;
wire          litedramnativeportconverter_wdata_fifo_syncfifo_re;
wire          litedramnativeportconverter_wdata_fifo_syncfifo_readable;
wire          litedramnativeportconverter_wdata_fifo_syncfifo_we;
wire          litedramnativeportconverter_wdata_fifo_syncfifo_writable;
reg     [1:0] litedramnativeportconverter_wdata_fifo_wrport_adr = 2'd0;
wire   [37:0] litedramnativeportconverter_wdata_fifo_wrport_dat_r;
wire   [37:0] litedramnativeportconverter_wdata_fifo_wrport_dat_w;
wire          litedramnativeportconverter_wdata_fifo_wrport_we;
wire          litedramnativeportconverter_wdata_finished;
reg    [15:0] litedramnativeportconverter_wdata_sel = 16'd0;
wire          locked;
reg           master_p0_act_n = 1'd1;
reg    [13:0] master_p0_address = 14'd0;
reg     [2:0] master_p0_bank = 3'd0;
reg           master_p0_cas_n = 1'd1;
reg           master_p0_cke = 1'd0;
reg           master_p0_cs_n = 1'd1;
reg           master_p0_odt = 1'd0;
reg           master_p0_ras_n = 1'd1;
wire   [31:0] master_p0_rddata;
reg           master_p0_rddata_en = 1'd0;
wire          master_p0_rddata_valid;
reg           master_p0_reset_n = 1'd0;
reg           master_p0_we_n = 1'd1;
reg    [31:0] master_p0_wrdata = 32'd0;
reg           master_p0_wrdata_en = 1'd0;
reg     [3:0] master_p0_wrdata_mask = 4'd0;
reg           master_p1_act_n = 1'd1;
reg    [13:0] master_p1_address = 14'd0;
reg     [2:0] master_p1_bank = 3'd0;
reg           master_p1_cas_n = 1'd1;
reg           master_p1_cke = 1'd0;
reg           master_p1_cs_n = 1'd1;
reg           master_p1_odt = 1'd0;
reg           master_p1_ras_n = 1'd1;
wire   [31:0] master_p1_rddata;
reg           master_p1_rddata_en = 1'd0;
wire          master_p1_rddata_valid;
reg           master_p1_reset_n = 1'd0;
reg           master_p1_we_n = 1'd1;
reg    [31:0] master_p1_wrdata = 32'd0;
reg           master_p1_wrdata_en = 1'd0;
reg     [3:0] master_p1_wrdata_mask = 4'd0;
reg           master_p2_act_n = 1'd1;
reg    [13:0] master_p2_address = 14'd0;
reg     [2:0] master_p2_bank = 3'd0;
reg           master_p2_cas_n = 1'd1;
reg           master_p2_cke = 1'd0;
reg           master_p2_cs_n = 1'd1;
reg           master_p2_odt = 1'd0;
reg           master_p2_ras_n = 1'd1;
wire   [31:0] master_p2_rddata;
reg           master_p2_rddata_en = 1'd0;
wire          master_p2_rddata_valid;
reg           master_p2_reset_n = 1'd0;
reg           master_p2_we_n = 1'd1;
reg    [31:0] master_p2_wrdata = 32'd0;
reg           master_p2_wrdata_en = 1'd0;
reg     [3:0] master_p2_wrdata_mask = 4'd0;
reg           master_p3_act_n = 1'd1;
reg    [13:0] master_p3_address = 14'd0;
reg     [2:0] master_p3_bank = 3'd0;
reg           master_p3_cas_n = 1'd1;
reg           master_p3_cke = 1'd0;
reg           master_p3_cs_n = 1'd1;
reg           master_p3_odt = 1'd0;
reg           master_p3_ras_n = 1'd1;
wire   [31:0] master_p3_rddata;
reg           master_p3_rddata_en = 1'd0;
wire          master_p3_rddata_valid;
reg           master_p3_reset_n = 1'd0;
reg           master_p3_we_n = 1'd1;
reg    [31:0] master_p3_wrdata = 32'd0;
reg           master_p3_wrdata_en = 1'd0;
reg     [3:0] master_p3_wrdata_mask = 4'd0;
wire          max_time0;
wire          max_time1;
wire          new_port_cmd_last;
wire   [25:0] new_port_cmd_payload_addr;
wire          new_port_cmd_payload_we;
reg           new_port_cmd_ready = 1'd0;
reg           new_port_cmd_valid = 1'd0;
wire          new_port_flush;
reg    [31:0] new_port_rdata_payload_data = 32'd0;
wire          new_port_rdata_ready;
reg           new_port_rdata_valid = 1'd0;
reg           new_port_wdata_first = 1'd0;
reg           new_port_wdata_last = 1'd0;
wire   [31:0] new_port_wdata_payload_data;
wire    [3:0] new_port_wdata_payload_we;
wire          new_port_wdata_ready;
reg           new_port_wdata_valid = 1'd0;
reg    [13:0] nop_a = 14'd0;
reg     [2:0] nop_ba = 3'd0;
wire          odt;
reg           phaseinjector0_address_re = 1'd0;
reg    [13:0] phaseinjector0_address_storage = 14'd0;
reg           phaseinjector0_baddress_re = 1'd0;
reg     [2:0] phaseinjector0_baddress_storage = 3'd0;
wire          phaseinjector0_command_issue_r;
reg           phaseinjector0_command_issue_re = 1'd0;
reg           phaseinjector0_command_issue_w = 1'd0;
reg           phaseinjector0_command_issue_we = 1'd0;
reg           phaseinjector0_command_re = 1'd0;
reg     [7:0] phaseinjector0_command_storage = 8'd0;
wire          phaseinjector0_csrfield_cas;
wire          phaseinjector0_csrfield_cs;
wire          phaseinjector0_csrfield_cs_bottom;
wire          phaseinjector0_csrfield_cs_top;
wire          phaseinjector0_csrfield_ras;
wire          phaseinjector0_csrfield_rden;
wire          phaseinjector0_csrfield_we;
wire          phaseinjector0_csrfield_wren;
reg           phaseinjector0_rddata_re = 1'd0;
reg    [31:0] phaseinjector0_rddata_status = 32'd0;
wire          phaseinjector0_rddata_we;
reg           phaseinjector0_wrdata_re = 1'd0;
reg    [31:0] phaseinjector0_wrdata_storage = 32'd0;
reg           phaseinjector1_address_re = 1'd0;
reg    [13:0] phaseinjector1_address_storage = 14'd0;
reg           phaseinjector1_baddress_re = 1'd0;
reg     [2:0] phaseinjector1_baddress_storage = 3'd0;
wire          phaseinjector1_command_issue_r;
reg           phaseinjector1_command_issue_re = 1'd0;
reg           phaseinjector1_command_issue_w = 1'd0;
reg           phaseinjector1_command_issue_we = 1'd0;
reg           phaseinjector1_command_re = 1'd0;
reg     [7:0] phaseinjector1_command_storage = 8'd0;
wire          phaseinjector1_csrfield_cas;
wire          phaseinjector1_csrfield_cs;
wire          phaseinjector1_csrfield_cs_bottom;
wire          phaseinjector1_csrfield_cs_top;
wire          phaseinjector1_csrfield_ras;
wire          phaseinjector1_csrfield_rden;
wire          phaseinjector1_csrfield_we;
wire          phaseinjector1_csrfield_wren;
reg           phaseinjector1_rddata_re = 1'd0;
reg    [31:0] phaseinjector1_rddata_status = 32'd0;
wire          phaseinjector1_rddata_we;
reg           phaseinjector1_wrdata_re = 1'd0;
reg    [31:0] phaseinjector1_wrdata_storage = 32'd0;
reg           phaseinjector2_address_re = 1'd0;
reg    [13:0] phaseinjector2_address_storage = 14'd0;
reg           phaseinjector2_baddress_re = 1'd0;
reg     [2:0] phaseinjector2_baddress_storage = 3'd0;
wire          phaseinjector2_command_issue_r;
reg           phaseinjector2_command_issue_re = 1'd0;
reg           phaseinjector2_command_issue_w = 1'd0;
reg           phaseinjector2_command_issue_we = 1'd0;
reg           phaseinjector2_command_re = 1'd0;
reg     [7:0] phaseinjector2_command_storage = 8'd0;
wire          phaseinjector2_csrfield_cas;
wire          phaseinjector2_csrfield_cs;
wire          phaseinjector2_csrfield_cs_bottom;
wire          phaseinjector2_csrfield_cs_top;
wire          phaseinjector2_csrfield_ras;
wire          phaseinjector2_csrfield_rden;
wire          phaseinjector2_csrfield_we;
wire          phaseinjector2_csrfield_wren;
reg           phaseinjector2_rddata_re = 1'd0;
reg    [31:0] phaseinjector2_rddata_status = 32'd0;
wire          phaseinjector2_rddata_we;
reg           phaseinjector2_wrdata_re = 1'd0;
reg    [31:0] phaseinjector2_wrdata_storage = 32'd0;
reg           phaseinjector3_address_re = 1'd0;
reg    [13:0] phaseinjector3_address_storage = 14'd0;
reg           phaseinjector3_baddress_re = 1'd0;
reg     [2:0] phaseinjector3_baddress_storage = 3'd0;
wire          phaseinjector3_command_issue_r;
reg           phaseinjector3_command_issue_re = 1'd0;
reg           phaseinjector3_command_issue_w = 1'd0;
reg           phaseinjector3_command_issue_we = 1'd0;
reg           phaseinjector3_command_re = 1'd0;
reg     [7:0] phaseinjector3_command_storage = 8'd0;
wire          phaseinjector3_csrfield_cas;
wire          phaseinjector3_csrfield_cs;
wire          phaseinjector3_csrfield_cs_bottom;
wire          phaseinjector3_csrfield_cs_top;
wire          phaseinjector3_csrfield_ras;
wire          phaseinjector3_csrfield_rden;
wire          phaseinjector3_csrfield_we;
wire          phaseinjector3_csrfield_wren;
reg           phaseinjector3_rddata_re = 1'd0;
reg    [31:0] phaseinjector3_rddata_status = 32'd0;
wire          phaseinjector3_rddata_we;
reg           phaseinjector3_wrdata_re = 1'd0;
reg    [31:0] phaseinjector3_wrdata_storage = 32'd0;
reg    [23:0] port_cmd_payload_addr = 24'd0;
reg           port_cmd_payload_we = 1'd0;
wire          port_cmd_ready;
reg           port_cmd_valid = 1'd0;
reg           port_rdata_first = 1'd0;
reg           port_rdata_last = 1'd0;
wire  [127:0] port_rdata_payload_data;
wire          port_rdata_ready;
wire          port_rdata_valid;
wire          port_wdata_first;
wire          port_wdata_last;
wire  [127:0] port_wdata_payload_data;
wire   [15:0] port_wdata_payload_we;
wire          port_wdata_ready;
wire          port_wdata_valid;
reg           postponer_count = 1'd0;
wire          postponer_req_i;
reg           postponer_req_o = 1'd0;
reg           power_down = 1'd0;
wire          ras_allowed;
wire    [1:0] rdcmdphase;
reg           re = 1'd0;
wire          read_available;
wire          reset;
reg     [3:0] reset_counter = 4'd15;
wire          reset_n;
reg           rhs_array_muxed0 = 1'd0;
reg    [13:0] rhs_array_muxed1 = 14'd0;
reg           rhs_array_muxed10 = 1'd0;
reg           rhs_array_muxed11 = 1'd0;
reg    [20:0] rhs_array_muxed12 = 21'd0;
reg           rhs_array_muxed13 = 1'd0;
reg           rhs_array_muxed14 = 1'd0;
reg    [20:0] rhs_array_muxed15 = 21'd0;
reg           rhs_array_muxed16 = 1'd0;
reg           rhs_array_muxed17 = 1'd0;
reg    [20:0] rhs_array_muxed18 = 21'd0;
reg           rhs_array_muxed19 = 1'd0;
reg     [2:0] rhs_array_muxed2 = 3'd0;
reg           rhs_array_muxed20 = 1'd0;
reg    [20:0] rhs_array_muxed21 = 21'd0;
reg           rhs_array_muxed22 = 1'd0;
reg           rhs_array_muxed23 = 1'd0;
reg    [20:0] rhs_array_muxed24 = 21'd0;
reg           rhs_array_muxed25 = 1'd0;
reg           rhs_array_muxed26 = 1'd0;
reg    [20:0] rhs_array_muxed27 = 21'd0;
reg           rhs_array_muxed28 = 1'd0;
reg           rhs_array_muxed29 = 1'd0;
reg           rhs_array_muxed3 = 1'd0;
reg    [20:0] rhs_array_muxed30 = 21'd0;
reg           rhs_array_muxed31 = 1'd0;
reg           rhs_array_muxed32 = 1'd0;
reg    [20:0] rhs_array_muxed33 = 21'd0;
reg           rhs_array_muxed34 = 1'd0;
reg           rhs_array_muxed35 = 1'd0;
reg           rhs_array_muxed4 = 1'd0;
reg           rhs_array_muxed5 = 1'd0;
reg           rhs_array_muxed6 = 1'd0;
reg    [13:0] rhs_array_muxed7 = 14'd0;
reg     [2:0] rhs_array_muxed8 = 3'd0;
reg           rhs_array_muxed9 = 1'd0;
reg           rst_1 = 1'd0;
wire          sel;
reg           sequencer_count = 1'd0;
reg     [5:0] sequencer_counter = 6'd0;
wire          sequencer_done0;
reg           sequencer_done1 = 1'd0;
reg           sequencer_start0 = 1'd0;
wire          sequencer_start1;
wire          slave_p0_act_n;
wire   [13:0] slave_p0_address;
wire    [2:0] slave_p0_bank;
wire          slave_p0_cas_n;
wire          slave_p0_cke;
wire          slave_p0_cs_n;
wire          slave_p0_odt;
wire          slave_p0_ras_n;
reg    [31:0] slave_p0_rddata = 32'd0;
wire          slave_p0_rddata_en;
reg           slave_p0_rddata_valid = 1'd0;
wire          slave_p0_reset_n;
wire          slave_p0_we_n;
wire   [31:0] slave_p0_wrdata;
wire          slave_p0_wrdata_en;
wire    [3:0] slave_p0_wrdata_mask;
wire          slave_p1_act_n;
wire   [13:0] slave_p1_address;
wire    [2:0] slave_p1_bank;
wire          slave_p1_cas_n;
wire          slave_p1_cke;
wire          slave_p1_cs_n;
wire          slave_p1_odt;
wire          slave_p1_ras_n;
reg    [31:0] slave_p1_rddata = 32'd0;
wire          slave_p1_rddata_en;
reg           slave_p1_rddata_valid = 1'd0;
wire          slave_p1_reset_n;
wire          slave_p1_we_n;
wire   [31:0] slave_p1_wrdata;
wire          slave_p1_wrdata_en;
wire    [3:0] slave_p1_wrdata_mask;
wire          slave_p2_act_n;
wire   [13:0] slave_p2_address;
wire    [2:0] slave_p2_bank;
wire          slave_p2_cas_n;
wire          slave_p2_cke;
wire          slave_p2_cs_n;
wire          slave_p2_odt;
wire          slave_p2_ras_n;
reg    [31:0] slave_p2_rddata = 32'd0;
wire          slave_p2_rddata_en;
reg           slave_p2_rddata_valid = 1'd0;
wire          slave_p2_reset_n;
wire          slave_p2_we_n;
wire   [31:0] slave_p2_wrdata;
wire          slave_p2_wrdata_en;
wire    [3:0] slave_p2_wrdata_mask;
wire          slave_p3_act_n;
wire   [13:0] slave_p3_address;
wire    [2:0] slave_p3_bank;
wire          slave_p3_cas_n;
wire          slave_p3_cke;
wire          slave_p3_cs_n;
wire          slave_p3_odt;
wire          slave_p3_ras_n;
reg    [31:0] slave_p3_rddata = 32'd0;
wire          slave_p3_rddata_en;
reg           slave_p3_rddata_valid = 1'd0;
wire          slave_p3_reset_n;
wire          slave_p3_we_n;
wire   [31:0] slave_p3_wrdata;
wire          slave_p3_wrdata_en;
wire    [3:0] slave_p3_wrdata_mask;
reg           steerer0 = 1'd1;
reg           steerer1 = 1'd1;
reg           steerer2 = 1'd1;
reg           steerer3 = 1'd1;
reg           steerer4 = 1'd1;
reg           steerer5 = 1'd1;
reg           steerer6 = 1'd1;
reg           steerer7 = 1'd1;
reg     [1:0] steerer_sel0 = 2'd0;
reg     [1:0] steerer_sel1 = 2'd0;
reg     [1:0] steerer_sel2 = 2'd0;
reg     [1:0] steerer_sel3 = 2'd0;
reg     [3:0] storage = 4'd1;
wire          sys2x_clk;
wire          sys4x_clk;
wire          sys4x_dqs_clk;
wire          sys_clk;
wire          sys_rst;
reg           t_array_muxed0 = 1'd0;
reg           t_array_muxed1 = 1'd0;
reg           t_array_muxed2 = 1'd0;
reg           t_array_muxed3 = 1'd0;
reg           t_array_muxed4 = 1'd0;
reg           t_array_muxed5 = 1'd0;
reg           tccdcon_count = 1'd0;
(* dont_touch = "true" *)
reg           tccdcon_ready = 1'd0;
wire          tccdcon_valid;
wire    [1:0] tfawcon_count;
(* dont_touch = "true" *)
reg           tfawcon_ready = 1'd1;
wire          tfawcon_valid;
reg     [2:0] tfawcon_window = 3'd0;
reg     [4:0] time0 = 5'd0;
reg     [3:0] time1 = 4'd0;
wire    [8:0] timer_count0;
reg     [8:0] timer_count1 = 9'd390;
wire          timer_done0;
wire          timer_done1;
wire          timer_wait;
reg           trrdcon_count = 1'd0;
(* dont_touch = "true" *)
reg           trrdcon_ready = 1'd0;
wire          trrdcon_valid;
reg     [2:0] twtrcon_count = 3'd0;
(* dont_touch = "true" *)
reg           twtrcon_ready = 1'd0;
wire          twtrcon_valid;
reg           user_enable = 1'd0;
wire          wants_refresh;
wire          wants_zqcs;
wire          wb_bus_ack;
wire   [29:0] wb_bus_adr;
wire    [1:0] wb_bus_bte;
wire    [2:0] wb_bus_cti;
wire          wb_bus_cyc;
wire   [31:0] wb_bus_dat_r;
wire   [31:0] wb_bus_dat_w;
wire          wb_bus_err;
wire    [3:0] wb_bus_sel;
wire          wb_bus_stb;
wire          wb_bus_we;
reg           wb_port_ack = 1'd0;
wire   [25:0] wb_port_adr;
wire          wb_port_cyc;
reg    [31:0] wb_port_dat_r = 32'd0;
wire   [31:0] wb_port_dat_w;
reg           wb_port_err = 1'd0;
wire    [3:0] wb_port_sel;
wire          wb_port_stb;
wire          wb_port_we;
wire    [1:0] wrcmdphase;
wire          write_available;
wire          xilinxasyncresetsynchronizerimpl0;
wire          xilinxasyncresetsynchronizerimpl0_rst_meta;
wire          xilinxasyncresetsynchronizerimpl1;
wire          xilinxasyncresetsynchronizerimpl1_rst_meta;
wire          xilinxasyncresetsynchronizerimpl2;
wire          xilinxasyncresetsynchronizerimpl2_expr;
wire          xilinxasyncresetsynchronizerimpl2_rst_meta;
wire          xilinxasyncresetsynchronizerimpl3;
wire          xilinxasyncresetsynchronizerimpl3_expr;
wire          xilinxasyncresetsynchronizerimpl3_rst_meta;
wire          xilinxasyncresetsynchronizerimpl4;
wire          xilinxasyncresetsynchronizerimpl4_expr;
wire          xilinxasyncresetsynchronizerimpl4_rst_meta;
reg     [4:0] zqcs_executer_counter = 5'd0;
reg           zqcs_executer_done = 1'd0;
reg           zqcs_executer_start = 1'd0;
wire   [25:0] zqcs_timer_count0;
reg    [25:0] zqcs_timer_count1 = 26'd49999999;
wire          zqcs_timer_done0;
wire          zqcs_timer_done1;
wire          zqcs_timer_wait;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign init_done = init_done_storage;
assign init_error = init_error_storage;
assign wb_bus_adr = wb_ctrl_adr;
assign wb_bus_dat_w = wb_ctrl_dat_w;
assign wb_ctrl_dat_r = wb_bus_dat_r;
assign wb_bus_sel = wb_ctrl_sel;
assign wb_bus_cyc = wb_ctrl_cyc;
assign wb_bus_stb = wb_ctrl_stb;
assign wb_ctrl_ack = wb_bus_ack;
assign wb_bus_we = wb_ctrl_we;
assign wb_bus_cti = wb_ctrl_cti;
assign wb_bus_bte = wb_ctrl_bte;
assign wb_ctrl_err = wb_bus_err;
assign user_clk = sys_clk;
assign user_clkx2 = sys2x_clk;
assign user_rst = sys_rst;
assign wb_port_adr = user_port_wishbone_0_adr;
assign wb_port_dat_w = user_port_wishbone_0_dat_w;
assign user_port_wishbone_0_dat_r = wb_port_dat_r;
assign wb_port_sel = user_port_wishbone_0_sel;
assign wb_port_cyc = (user_port_wishbone_0_cyc & user_enable);
assign wb_port_stb = (user_port_wishbone_0_stb & user_enable);
assign user_port_wishbone_0_ack = (wb_port_ack & user_enable);
assign wb_port_we = user_port_wishbone_0_we;
assign user_port_wishbone_0_err = wb_port_err;
assign litedramcore_wishbone_adr = wb_bus_adr;
assign litedramcore_wishbone_dat_w = wb_bus_dat_w;
assign wb_bus_dat_r = litedramcore_wishbone_dat_r;
assign litedramcore_wishbone_sel = wb_bus_sel;
assign litedramcore_wishbone_cyc = wb_bus_cyc;
assign litedramcore_wishbone_stb = wb_bus_stb;
assign wb_bus_ack = litedramcore_wishbone_ack;
assign litedramcore_wishbone_we = wb_bus_we;
assign litedramcore_wishbone_cti = wb_bus_cti;
assign litedramcore_wishbone_bte = wb_bus_bte;
assign wb_bus_err = litedramcore_wishbone_err;
assign reset = (rst | rst_1);
assign pll_locked = locked;
assign clkin = clk;
assign iodelay_clk = clkout_buf0;
assign sys_clk = clkout_buf1;
assign sys2x_clk = clkout_buf2;
assign sys4x_clk = clkout_buf3;
assign sys4x_dqs_clk = clkout_buf4;
assign ddram_ba = a7ddrphy_pads_ba;
assign a7ddrphy_dqs_oe_delay_tappeddelayline = ((a7ddrphy_dqs_preamble | a7ddrphy_dqs_oe) | a7ddrphy_dqs_postamble);
assign a7ddrphy_dq_oe_delay_tappeddelayline = ((a7ddrphy_dqs_preamble | a7ddrphy_dq_oe) | a7ddrphy_dqs_postamble);
always @(*) begin
    a7ddrphy_dfi_p0_rddata <= 32'd0;
    a7ddrphy_dfi_p0_rddata[0] <= a7ddrphy_bitslip04[0];
    a7ddrphy_dfi_p0_rddata[16] <= a7ddrphy_bitslip04[1];
    a7ddrphy_dfi_p0_rddata[1] <= a7ddrphy_bitslip14[0];
    a7ddrphy_dfi_p0_rddata[17] <= a7ddrphy_bitslip14[1];
    a7ddrphy_dfi_p0_rddata[2] <= a7ddrphy_bitslip22[0];
    a7ddrphy_dfi_p0_rddata[18] <= a7ddrphy_bitslip22[1];
    a7ddrphy_dfi_p0_rddata[3] <= a7ddrphy_bitslip32[0];
    a7ddrphy_dfi_p0_rddata[19] <= a7ddrphy_bitslip32[1];
    a7ddrphy_dfi_p0_rddata[4] <= a7ddrphy_bitslip42[0];
    a7ddrphy_dfi_p0_rddata[20] <= a7ddrphy_bitslip42[1];
    a7ddrphy_dfi_p0_rddata[5] <= a7ddrphy_bitslip52[0];
    a7ddrphy_dfi_p0_rddata[21] <= a7ddrphy_bitslip52[1];
    a7ddrphy_dfi_p0_rddata[6] <= a7ddrphy_bitslip62[0];
    a7ddrphy_dfi_p0_rddata[22] <= a7ddrphy_bitslip62[1];
    a7ddrphy_dfi_p0_rddata[7] <= a7ddrphy_bitslip72[0];
    a7ddrphy_dfi_p0_rddata[23] <= a7ddrphy_bitslip72[1];
    a7ddrphy_dfi_p0_rddata[8] <= a7ddrphy_bitslip82[0];
    a7ddrphy_dfi_p0_rddata[24] <= a7ddrphy_bitslip82[1];
    a7ddrphy_dfi_p0_rddata[9] <= a7ddrphy_bitslip92[0];
    a7ddrphy_dfi_p0_rddata[25] <= a7ddrphy_bitslip92[1];
    a7ddrphy_dfi_p0_rddata[10] <= a7ddrphy_bitslip102[0];
    a7ddrphy_dfi_p0_rddata[26] <= a7ddrphy_bitslip102[1];
    a7ddrphy_dfi_p0_rddata[11] <= a7ddrphy_bitslip112[0];
    a7ddrphy_dfi_p0_rddata[27] <= a7ddrphy_bitslip112[1];
    a7ddrphy_dfi_p0_rddata[12] <= a7ddrphy_bitslip122[0];
    a7ddrphy_dfi_p0_rddata[28] <= a7ddrphy_bitslip122[1];
    a7ddrphy_dfi_p0_rddata[13] <= a7ddrphy_bitslip132[0];
    a7ddrphy_dfi_p0_rddata[29] <= a7ddrphy_bitslip132[1];
    a7ddrphy_dfi_p0_rddata[14] <= a7ddrphy_bitslip142[0];
    a7ddrphy_dfi_p0_rddata[30] <= a7ddrphy_bitslip142[1];
    a7ddrphy_dfi_p0_rddata[15] <= a7ddrphy_bitslip152[0];
    a7ddrphy_dfi_p0_rddata[31] <= a7ddrphy_bitslip152[1];
end
always @(*) begin
    a7ddrphy_dfi_p1_rddata <= 32'd0;
    a7ddrphy_dfi_p1_rddata[0] <= a7ddrphy_bitslip04[2];
    a7ddrphy_dfi_p1_rddata[16] <= a7ddrphy_bitslip04[3];
    a7ddrphy_dfi_p1_rddata[1] <= a7ddrphy_bitslip14[2];
    a7ddrphy_dfi_p1_rddata[17] <= a7ddrphy_bitslip14[3];
    a7ddrphy_dfi_p1_rddata[2] <= a7ddrphy_bitslip22[2];
    a7ddrphy_dfi_p1_rddata[18] <= a7ddrphy_bitslip22[3];
    a7ddrphy_dfi_p1_rddata[3] <= a7ddrphy_bitslip32[2];
    a7ddrphy_dfi_p1_rddata[19] <= a7ddrphy_bitslip32[3];
    a7ddrphy_dfi_p1_rddata[4] <= a7ddrphy_bitslip42[2];
    a7ddrphy_dfi_p1_rddata[20] <= a7ddrphy_bitslip42[3];
    a7ddrphy_dfi_p1_rddata[5] <= a7ddrphy_bitslip52[2];
    a7ddrphy_dfi_p1_rddata[21] <= a7ddrphy_bitslip52[3];
    a7ddrphy_dfi_p1_rddata[6] <= a7ddrphy_bitslip62[2];
    a7ddrphy_dfi_p1_rddata[22] <= a7ddrphy_bitslip62[3];
    a7ddrphy_dfi_p1_rddata[7] <= a7ddrphy_bitslip72[2];
    a7ddrphy_dfi_p1_rddata[23] <= a7ddrphy_bitslip72[3];
    a7ddrphy_dfi_p1_rddata[8] <= a7ddrphy_bitslip82[2];
    a7ddrphy_dfi_p1_rddata[24] <= a7ddrphy_bitslip82[3];
    a7ddrphy_dfi_p1_rddata[9] <= a7ddrphy_bitslip92[2];
    a7ddrphy_dfi_p1_rddata[25] <= a7ddrphy_bitslip92[3];
    a7ddrphy_dfi_p1_rddata[10] <= a7ddrphy_bitslip102[2];
    a7ddrphy_dfi_p1_rddata[26] <= a7ddrphy_bitslip102[3];
    a7ddrphy_dfi_p1_rddata[11] <= a7ddrphy_bitslip112[2];
    a7ddrphy_dfi_p1_rddata[27] <= a7ddrphy_bitslip112[3];
    a7ddrphy_dfi_p1_rddata[12] <= a7ddrphy_bitslip122[2];
    a7ddrphy_dfi_p1_rddata[28] <= a7ddrphy_bitslip122[3];
    a7ddrphy_dfi_p1_rddata[13] <= a7ddrphy_bitslip132[2];
    a7ddrphy_dfi_p1_rddata[29] <= a7ddrphy_bitslip132[3];
    a7ddrphy_dfi_p1_rddata[14] <= a7ddrphy_bitslip142[2];
    a7ddrphy_dfi_p1_rddata[30] <= a7ddrphy_bitslip142[3];
    a7ddrphy_dfi_p1_rddata[15] <= a7ddrphy_bitslip152[2];
    a7ddrphy_dfi_p1_rddata[31] <= a7ddrphy_bitslip152[3];
end
always @(*) begin
    a7ddrphy_dfi_p2_rddata <= 32'd0;
    a7ddrphy_dfi_p2_rddata[0] <= a7ddrphy_bitslip04[4];
    a7ddrphy_dfi_p2_rddata[16] <= a7ddrphy_bitslip04[5];
    a7ddrphy_dfi_p2_rddata[1] <= a7ddrphy_bitslip14[4];
    a7ddrphy_dfi_p2_rddata[17] <= a7ddrphy_bitslip14[5];
    a7ddrphy_dfi_p2_rddata[2] <= a7ddrphy_bitslip22[4];
    a7ddrphy_dfi_p2_rddata[18] <= a7ddrphy_bitslip22[5];
    a7ddrphy_dfi_p2_rddata[3] <= a7ddrphy_bitslip32[4];
    a7ddrphy_dfi_p2_rddata[19] <= a7ddrphy_bitslip32[5];
    a7ddrphy_dfi_p2_rddata[4] <= a7ddrphy_bitslip42[4];
    a7ddrphy_dfi_p2_rddata[20] <= a7ddrphy_bitslip42[5];
    a7ddrphy_dfi_p2_rddata[5] <= a7ddrphy_bitslip52[4];
    a7ddrphy_dfi_p2_rddata[21] <= a7ddrphy_bitslip52[5];
    a7ddrphy_dfi_p2_rddata[6] <= a7ddrphy_bitslip62[4];
    a7ddrphy_dfi_p2_rddata[22] <= a7ddrphy_bitslip62[5];
    a7ddrphy_dfi_p2_rddata[7] <= a7ddrphy_bitslip72[4];
    a7ddrphy_dfi_p2_rddata[23] <= a7ddrphy_bitslip72[5];
    a7ddrphy_dfi_p2_rddata[8] <= a7ddrphy_bitslip82[4];
    a7ddrphy_dfi_p2_rddata[24] <= a7ddrphy_bitslip82[5];
    a7ddrphy_dfi_p2_rddata[9] <= a7ddrphy_bitslip92[4];
    a7ddrphy_dfi_p2_rddata[25] <= a7ddrphy_bitslip92[5];
    a7ddrphy_dfi_p2_rddata[10] <= a7ddrphy_bitslip102[4];
    a7ddrphy_dfi_p2_rddata[26] <= a7ddrphy_bitslip102[5];
    a7ddrphy_dfi_p2_rddata[11] <= a7ddrphy_bitslip112[4];
    a7ddrphy_dfi_p2_rddata[27] <= a7ddrphy_bitslip112[5];
    a7ddrphy_dfi_p2_rddata[12] <= a7ddrphy_bitslip122[4];
    a7ddrphy_dfi_p2_rddata[28] <= a7ddrphy_bitslip122[5];
    a7ddrphy_dfi_p2_rddata[13] <= a7ddrphy_bitslip132[4];
    a7ddrphy_dfi_p2_rddata[29] <= a7ddrphy_bitslip132[5];
    a7ddrphy_dfi_p2_rddata[14] <= a7ddrphy_bitslip142[4];
    a7ddrphy_dfi_p2_rddata[30] <= a7ddrphy_bitslip142[5];
    a7ddrphy_dfi_p2_rddata[15] <= a7ddrphy_bitslip152[4];
    a7ddrphy_dfi_p2_rddata[31] <= a7ddrphy_bitslip152[5];
end
always @(*) begin
    a7ddrphy_dfi_p3_rddata <= 32'd0;
    a7ddrphy_dfi_p3_rddata[0] <= a7ddrphy_bitslip04[6];
    a7ddrphy_dfi_p3_rddata[16] <= a7ddrphy_bitslip04[7];
    a7ddrphy_dfi_p3_rddata[1] <= a7ddrphy_bitslip14[6];
    a7ddrphy_dfi_p3_rddata[17] <= a7ddrphy_bitslip14[7];
    a7ddrphy_dfi_p3_rddata[2] <= a7ddrphy_bitslip22[6];
    a7ddrphy_dfi_p3_rddata[18] <= a7ddrphy_bitslip22[7];
    a7ddrphy_dfi_p3_rddata[3] <= a7ddrphy_bitslip32[6];
    a7ddrphy_dfi_p3_rddata[19] <= a7ddrphy_bitslip32[7];
    a7ddrphy_dfi_p3_rddata[4] <= a7ddrphy_bitslip42[6];
    a7ddrphy_dfi_p3_rddata[20] <= a7ddrphy_bitslip42[7];
    a7ddrphy_dfi_p3_rddata[5] <= a7ddrphy_bitslip52[6];
    a7ddrphy_dfi_p3_rddata[21] <= a7ddrphy_bitslip52[7];
    a7ddrphy_dfi_p3_rddata[6] <= a7ddrphy_bitslip62[6];
    a7ddrphy_dfi_p3_rddata[22] <= a7ddrphy_bitslip62[7];
    a7ddrphy_dfi_p3_rddata[7] <= a7ddrphy_bitslip72[6];
    a7ddrphy_dfi_p3_rddata[23] <= a7ddrphy_bitslip72[7];
    a7ddrphy_dfi_p3_rddata[8] <= a7ddrphy_bitslip82[6];
    a7ddrphy_dfi_p3_rddata[24] <= a7ddrphy_bitslip82[7];
    a7ddrphy_dfi_p3_rddata[9] <= a7ddrphy_bitslip92[6];
    a7ddrphy_dfi_p3_rddata[25] <= a7ddrphy_bitslip92[7];
    a7ddrphy_dfi_p3_rddata[10] <= a7ddrphy_bitslip102[6];
    a7ddrphy_dfi_p3_rddata[26] <= a7ddrphy_bitslip102[7];
    a7ddrphy_dfi_p3_rddata[11] <= a7ddrphy_bitslip112[6];
    a7ddrphy_dfi_p3_rddata[27] <= a7ddrphy_bitslip112[7];
    a7ddrphy_dfi_p3_rddata[12] <= a7ddrphy_bitslip122[6];
    a7ddrphy_dfi_p3_rddata[28] <= a7ddrphy_bitslip122[7];
    a7ddrphy_dfi_p3_rddata[13] <= a7ddrphy_bitslip132[6];
    a7ddrphy_dfi_p3_rddata[29] <= a7ddrphy_bitslip132[7];
    a7ddrphy_dfi_p3_rddata[14] <= a7ddrphy_bitslip142[6];
    a7ddrphy_dfi_p3_rddata[30] <= a7ddrphy_bitslip142[7];
    a7ddrphy_dfi_p3_rddata[15] <= a7ddrphy_bitslip152[6];
    a7ddrphy_dfi_p3_rddata[31] <= a7ddrphy_bitslip152[7];
end
assign a7ddrphy_dfi_p0_rddata_valid = (a7ddrphy_rddata_en_tappeddelayline7 | a7ddrphy_wlevel_en_storage);
assign a7ddrphy_dfi_p1_rddata_valid = (a7ddrphy_rddata_en_tappeddelayline7 | a7ddrphy_wlevel_en_storage);
assign a7ddrphy_dfi_p2_rddata_valid = (a7ddrphy_rddata_en_tappeddelayline7 | a7ddrphy_wlevel_en_storage);
assign a7ddrphy_dfi_p3_rddata_valid = (a7ddrphy_rddata_en_tappeddelayline7 | a7ddrphy_wlevel_en_storage);
assign a7ddrphy_dq_oe = a7ddrphy_wrdata_en_tappeddelayline1;
always @(*) begin
    a7ddrphy_dqs_oe <= 1'd0;
    if (a7ddrphy_wlevel_en_storage) begin
        a7ddrphy_dqs_oe <= 1'd1;
    end else begin
        a7ddrphy_dqs_oe <= a7ddrphy_dq_oe;
    end
end
assign a7ddrphy_dqs_preamble = (a7ddrphy_wrdata_en_tappeddelayline0 & (~a7ddrphy_wrdata_en_tappeddelayline1));
assign a7ddrphy_dqs_postamble = (a7ddrphy_wrdata_en_tappeddelayline2 & (~a7ddrphy_wrdata_en_tappeddelayline1));
always @(*) begin
    a7ddrphy_dqspattern_o0 <= 8'd0;
    a7ddrphy_dqspattern_o0 <= 7'd85;
    if (a7ddrphy_dqspattern0) begin
        a7ddrphy_dqspattern_o0 <= 5'd21;
    end
    if (a7ddrphy_dqspattern1) begin
        a7ddrphy_dqspattern_o0 <= 7'd84;
    end
    if (a7ddrphy_wlevel_en_storage) begin
        a7ddrphy_dqspattern_o0 <= 1'd0;
        if (a7ddrphy_wlevel_strobe_re) begin
            a7ddrphy_dqspattern_o0 <= 1'd1;
        end
    end
end
always @(*) begin
    a7ddrphy_bitslip00 <= 8'd0;
    case (a7ddrphy_bitslip0_value0)
        1'd0: begin
            a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip00 <= a7ddrphy_bitslip0_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip10 <= 8'd0;
    case (a7ddrphy_bitslip1_value0)
        1'd0: begin
            a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip10 <= a7ddrphy_bitslip1_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip01 <= 8'd0;
    case (a7ddrphy_bitslip0_value1)
        1'd0: begin
            a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip01 <= a7ddrphy_bitslip0_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip11 <= 8'd0;
    case (a7ddrphy_bitslip1_value1)
        1'd0: begin
            a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip11 <= a7ddrphy_bitslip1_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip02 <= 8'd0;
    case (a7ddrphy_bitslip0_value2)
        1'd0: begin
            a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip02 <= a7ddrphy_bitslip0_r2[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip04 <= 8'd0;
    case (a7ddrphy_bitslip0_value3)
        1'd0: begin
            a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip04 <= a7ddrphy_bitslip0_r3[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip12 <= 8'd0;
    case (a7ddrphy_bitslip1_value2)
        1'd0: begin
            a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip12 <= a7ddrphy_bitslip1_r2[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip14 <= 8'd0;
    case (a7ddrphy_bitslip1_value3)
        1'd0: begin
            a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip14 <= a7ddrphy_bitslip1_r3[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip20 <= 8'd0;
    case (a7ddrphy_bitslip2_value0)
        1'd0: begin
            a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip20 <= a7ddrphy_bitslip2_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip22 <= 8'd0;
    case (a7ddrphy_bitslip2_value1)
        1'd0: begin
            a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip22 <= a7ddrphy_bitslip2_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip30 <= 8'd0;
    case (a7ddrphy_bitslip3_value0)
        1'd0: begin
            a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip30 <= a7ddrphy_bitslip3_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip32 <= 8'd0;
    case (a7ddrphy_bitslip3_value1)
        1'd0: begin
            a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip32 <= a7ddrphy_bitslip3_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip40 <= 8'd0;
    case (a7ddrphy_bitslip4_value0)
        1'd0: begin
            a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip40 <= a7ddrphy_bitslip4_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip42 <= 8'd0;
    case (a7ddrphy_bitslip4_value1)
        1'd0: begin
            a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip42 <= a7ddrphy_bitslip4_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip50 <= 8'd0;
    case (a7ddrphy_bitslip5_value0)
        1'd0: begin
            a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip50 <= a7ddrphy_bitslip5_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip52 <= 8'd0;
    case (a7ddrphy_bitslip5_value1)
        1'd0: begin
            a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip52 <= a7ddrphy_bitslip5_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip60 <= 8'd0;
    case (a7ddrphy_bitslip6_value0)
        1'd0: begin
            a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip60 <= a7ddrphy_bitslip6_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip62 <= 8'd0;
    case (a7ddrphy_bitslip6_value1)
        1'd0: begin
            a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip62 <= a7ddrphy_bitslip6_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip70 <= 8'd0;
    case (a7ddrphy_bitslip7_value0)
        1'd0: begin
            a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip70 <= a7ddrphy_bitslip7_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip72 <= 8'd0;
    case (a7ddrphy_bitslip7_value1)
        1'd0: begin
            a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip72 <= a7ddrphy_bitslip7_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip80 <= 8'd0;
    case (a7ddrphy_bitslip8_value0)
        1'd0: begin
            a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip80 <= a7ddrphy_bitslip8_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip82 <= 8'd0;
    case (a7ddrphy_bitslip8_value1)
        1'd0: begin
            a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip82 <= a7ddrphy_bitslip8_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip90 <= 8'd0;
    case (a7ddrphy_bitslip9_value0)
        1'd0: begin
            a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip90 <= a7ddrphy_bitslip9_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip92 <= 8'd0;
    case (a7ddrphy_bitslip9_value1)
        1'd0: begin
            a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip92 <= a7ddrphy_bitslip9_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip100 <= 8'd0;
    case (a7ddrphy_bitslip10_value0)
        1'd0: begin
            a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip100 <= a7ddrphy_bitslip10_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip102 <= 8'd0;
    case (a7ddrphy_bitslip10_value1)
        1'd0: begin
            a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip102 <= a7ddrphy_bitslip10_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip110 <= 8'd0;
    case (a7ddrphy_bitslip11_value0)
        1'd0: begin
            a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip110 <= a7ddrphy_bitslip11_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip112 <= 8'd0;
    case (a7ddrphy_bitslip11_value1)
        1'd0: begin
            a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip112 <= a7ddrphy_bitslip11_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip120 <= 8'd0;
    case (a7ddrphy_bitslip12_value0)
        1'd0: begin
            a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip120 <= a7ddrphy_bitslip12_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip122 <= 8'd0;
    case (a7ddrphy_bitslip12_value1)
        1'd0: begin
            a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip122 <= a7ddrphy_bitslip12_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip130 <= 8'd0;
    case (a7ddrphy_bitslip13_value0)
        1'd0: begin
            a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip130 <= a7ddrphy_bitslip13_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip132 <= 8'd0;
    case (a7ddrphy_bitslip13_value1)
        1'd0: begin
            a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip132 <= a7ddrphy_bitslip13_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip140 <= 8'd0;
    case (a7ddrphy_bitslip14_value0)
        1'd0: begin
            a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip140 <= a7ddrphy_bitslip14_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip142 <= 8'd0;
    case (a7ddrphy_bitslip14_value1)
        1'd0: begin
            a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip142 <= a7ddrphy_bitslip14_r1[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip150 <= 8'd0;
    case (a7ddrphy_bitslip15_value0)
        1'd0: begin
            a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip150 <= a7ddrphy_bitslip15_r0[15:8];
        end
    endcase
end
always @(*) begin
    a7ddrphy_bitslip152 <= 8'd0;
    case (a7ddrphy_bitslip15_value1)
        1'd0: begin
            a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[8:1];
        end
        1'd1: begin
            a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[9:2];
        end
        2'd2: begin
            a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[10:3];
        end
        2'd3: begin
            a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[11:4];
        end
        3'd4: begin
            a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[12:5];
        end
        3'd5: begin
            a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[13:6];
        end
        3'd6: begin
            a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[14:7];
        end
        3'd7: begin
            a7ddrphy_bitslip152 <= a7ddrphy_bitslip15_r1[15:8];
        end
    endcase
end
assign a7ddrphy_dfi_p0_address = master_p0_address;
assign a7ddrphy_dfi_p0_bank = master_p0_bank;
assign a7ddrphy_dfi_p0_cas_n = master_p0_cas_n;
assign a7ddrphy_dfi_p0_cs_n = master_p0_cs_n;
assign a7ddrphy_dfi_p0_ras_n = master_p0_ras_n;
assign a7ddrphy_dfi_p0_we_n = master_p0_we_n;
assign a7ddrphy_dfi_p0_cke = master_p0_cke;
assign a7ddrphy_dfi_p0_odt = master_p0_odt;
assign a7ddrphy_dfi_p0_reset_n = master_p0_reset_n;
assign a7ddrphy_dfi_p0_act_n = master_p0_act_n;
assign a7ddrphy_dfi_p0_wrdata = master_p0_wrdata;
assign a7ddrphy_dfi_p0_wrdata_en = master_p0_wrdata_en;
assign a7ddrphy_dfi_p0_wrdata_mask = master_p0_wrdata_mask;
assign a7ddrphy_dfi_p0_rddata_en = master_p0_rddata_en;
assign master_p0_rddata = a7ddrphy_dfi_p0_rddata;
assign master_p0_rddata_valid = a7ddrphy_dfi_p0_rddata_valid;
assign a7ddrphy_dfi_p1_address = master_p1_address;
assign a7ddrphy_dfi_p1_bank = master_p1_bank;
assign a7ddrphy_dfi_p1_cas_n = master_p1_cas_n;
assign a7ddrphy_dfi_p1_cs_n = master_p1_cs_n;
assign a7ddrphy_dfi_p1_ras_n = master_p1_ras_n;
assign a7ddrphy_dfi_p1_we_n = master_p1_we_n;
assign a7ddrphy_dfi_p1_cke = master_p1_cke;
assign a7ddrphy_dfi_p1_odt = master_p1_odt;
assign a7ddrphy_dfi_p1_reset_n = master_p1_reset_n;
assign a7ddrphy_dfi_p1_act_n = master_p1_act_n;
assign a7ddrphy_dfi_p1_wrdata = master_p1_wrdata;
assign a7ddrphy_dfi_p1_wrdata_en = master_p1_wrdata_en;
assign a7ddrphy_dfi_p1_wrdata_mask = master_p1_wrdata_mask;
assign a7ddrphy_dfi_p1_rddata_en = master_p1_rddata_en;
assign master_p1_rddata = a7ddrphy_dfi_p1_rddata;
assign master_p1_rddata_valid = a7ddrphy_dfi_p1_rddata_valid;
assign a7ddrphy_dfi_p2_address = master_p2_address;
assign a7ddrphy_dfi_p2_bank = master_p2_bank;
assign a7ddrphy_dfi_p2_cas_n = master_p2_cas_n;
assign a7ddrphy_dfi_p2_cs_n = master_p2_cs_n;
assign a7ddrphy_dfi_p2_ras_n = master_p2_ras_n;
assign a7ddrphy_dfi_p2_we_n = master_p2_we_n;
assign a7ddrphy_dfi_p2_cke = master_p2_cke;
assign a7ddrphy_dfi_p2_odt = master_p2_odt;
assign a7ddrphy_dfi_p2_reset_n = master_p2_reset_n;
assign a7ddrphy_dfi_p2_act_n = master_p2_act_n;
assign a7ddrphy_dfi_p2_wrdata = master_p2_wrdata;
assign a7ddrphy_dfi_p2_wrdata_en = master_p2_wrdata_en;
assign a7ddrphy_dfi_p2_wrdata_mask = master_p2_wrdata_mask;
assign a7ddrphy_dfi_p2_rddata_en = master_p2_rddata_en;
assign master_p2_rddata = a7ddrphy_dfi_p2_rddata;
assign master_p2_rddata_valid = a7ddrphy_dfi_p2_rddata_valid;
assign a7ddrphy_dfi_p3_address = master_p3_address;
assign a7ddrphy_dfi_p3_bank = master_p3_bank;
assign a7ddrphy_dfi_p3_cas_n = master_p3_cas_n;
assign a7ddrphy_dfi_p3_cs_n = master_p3_cs_n;
assign a7ddrphy_dfi_p3_ras_n = master_p3_ras_n;
assign a7ddrphy_dfi_p3_we_n = master_p3_we_n;
assign a7ddrphy_dfi_p3_cke = master_p3_cke;
assign a7ddrphy_dfi_p3_odt = master_p3_odt;
assign a7ddrphy_dfi_p3_reset_n = master_p3_reset_n;
assign a7ddrphy_dfi_p3_act_n = master_p3_act_n;
assign a7ddrphy_dfi_p3_wrdata = master_p3_wrdata;
assign a7ddrphy_dfi_p3_wrdata_en = master_p3_wrdata_en;
assign a7ddrphy_dfi_p3_wrdata_mask = master_p3_wrdata_mask;
assign a7ddrphy_dfi_p3_rddata_en = master_p3_rddata_en;
assign master_p3_rddata = a7ddrphy_dfi_p3_rddata;
assign master_p3_rddata_valid = a7ddrphy_dfi_p3_rddata_valid;
assign slave_p0_address = dfi_p0_address;
assign slave_p0_bank = dfi_p0_bank;
assign slave_p0_cas_n = dfi_p0_cas_n;
assign slave_p0_cs_n = dfi_p0_cs_n;
assign slave_p0_ras_n = dfi_p0_ras_n;
assign slave_p0_we_n = dfi_p0_we_n;
assign slave_p0_cke = dfi_p0_cke;
assign slave_p0_odt = dfi_p0_odt;
assign slave_p0_reset_n = dfi_p0_reset_n;
assign slave_p0_act_n = dfi_p0_act_n;
assign slave_p0_wrdata = dfi_p0_wrdata;
assign slave_p0_wrdata_en = dfi_p0_wrdata_en;
assign slave_p0_wrdata_mask = dfi_p0_wrdata_mask;
assign slave_p0_rddata_en = dfi_p0_rddata_en;
assign dfi_p0_rddata = slave_p0_rddata;
assign dfi_p0_rddata_valid = slave_p0_rddata_valid;
assign slave_p1_address = dfi_p1_address;
assign slave_p1_bank = dfi_p1_bank;
assign slave_p1_cas_n = dfi_p1_cas_n;
assign slave_p1_cs_n = dfi_p1_cs_n;
assign slave_p1_ras_n = dfi_p1_ras_n;
assign slave_p1_we_n = dfi_p1_we_n;
assign slave_p1_cke = dfi_p1_cke;
assign slave_p1_odt = dfi_p1_odt;
assign slave_p1_reset_n = dfi_p1_reset_n;
assign slave_p1_act_n = dfi_p1_act_n;
assign slave_p1_wrdata = dfi_p1_wrdata;
assign slave_p1_wrdata_en = dfi_p1_wrdata_en;
assign slave_p1_wrdata_mask = dfi_p1_wrdata_mask;
assign slave_p1_rddata_en = dfi_p1_rddata_en;
assign dfi_p1_rddata = slave_p1_rddata;
assign dfi_p1_rddata_valid = slave_p1_rddata_valid;
assign slave_p2_address = dfi_p2_address;
assign slave_p2_bank = dfi_p2_bank;
assign slave_p2_cas_n = dfi_p2_cas_n;
assign slave_p2_cs_n = dfi_p2_cs_n;
assign slave_p2_ras_n = dfi_p2_ras_n;
assign slave_p2_we_n = dfi_p2_we_n;
assign slave_p2_cke = dfi_p2_cke;
assign slave_p2_odt = dfi_p2_odt;
assign slave_p2_reset_n = dfi_p2_reset_n;
assign slave_p2_act_n = dfi_p2_act_n;
assign slave_p2_wrdata = dfi_p2_wrdata;
assign slave_p2_wrdata_en = dfi_p2_wrdata_en;
assign slave_p2_wrdata_mask = dfi_p2_wrdata_mask;
assign slave_p2_rddata_en = dfi_p2_rddata_en;
assign dfi_p2_rddata = slave_p2_rddata;
assign dfi_p2_rddata_valid = slave_p2_rddata_valid;
assign slave_p3_address = dfi_p3_address;
assign slave_p3_bank = dfi_p3_bank;
assign slave_p3_cas_n = dfi_p3_cas_n;
assign slave_p3_cs_n = dfi_p3_cs_n;
assign slave_p3_ras_n = dfi_p3_ras_n;
assign slave_p3_we_n = dfi_p3_we_n;
assign slave_p3_cke = dfi_p3_cke;
assign slave_p3_odt = dfi_p3_odt;
assign slave_p3_reset_n = dfi_p3_reset_n;
assign slave_p3_act_n = dfi_p3_act_n;
assign slave_p3_wrdata = dfi_p3_wrdata;
assign slave_p3_wrdata_en = dfi_p3_wrdata_en;
assign slave_p3_wrdata_mask = dfi_p3_wrdata_mask;
assign slave_p3_rddata_en = dfi_p3_rddata_en;
assign dfi_p3_rddata = slave_p3_rddata;
assign dfi_p3_rddata_valid = slave_p3_rddata_valid;
always @(*) begin
    csr_dfi_p0_rddata <= 32'd0;
    if (sel) begin
    end else begin
        csr_dfi_p0_rddata <= master_p0_rddata;
    end
end
always @(*) begin
    csr_dfi_p0_rddata_valid <= 1'd0;
    if (sel) begin
    end else begin
        csr_dfi_p0_rddata_valid <= master_p0_rddata_valid;
    end
end
always @(*) begin
    csr_dfi_p1_rddata <= 32'd0;
    if (sel) begin
    end else begin
        csr_dfi_p1_rddata <= master_p1_rddata;
    end
end
always @(*) begin
    csr_dfi_p1_rddata_valid <= 1'd0;
    if (sel) begin
    end else begin
        csr_dfi_p1_rddata_valid <= master_p1_rddata_valid;
    end
end
always @(*) begin
    csr_dfi_p2_rddata <= 32'd0;
    if (sel) begin
    end else begin
        csr_dfi_p2_rddata <= master_p2_rddata;
    end
end
always @(*) begin
    csr_dfi_p2_rddata_valid <= 1'd0;
    if (sel) begin
    end else begin
        csr_dfi_p2_rddata_valid <= master_p2_rddata_valid;
    end
end
always @(*) begin
    csr_dfi_p3_rddata <= 32'd0;
    if (sel) begin
    end else begin
        csr_dfi_p3_rddata <= master_p3_rddata;
    end
end
always @(*) begin
    csr_dfi_p3_rddata_valid <= 1'd0;
    if (sel) begin
    end else begin
        csr_dfi_p3_rddata_valid <= master_p3_rddata_valid;
    end
end
always @(*) begin
    ext_dfi_p0_rddata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            ext_dfi_p0_rddata <= master_p0_rddata;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    ext_dfi_p0_rddata_valid <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            ext_dfi_p0_rddata_valid <= master_p0_rddata_valid;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    ext_dfi_p1_rddata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            ext_dfi_p1_rddata <= master_p1_rddata;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    ext_dfi_p1_rddata_valid <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            ext_dfi_p1_rddata_valid <= master_p1_rddata_valid;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    ext_dfi_p2_rddata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            ext_dfi_p2_rddata <= master_p2_rddata;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    ext_dfi_p2_rddata_valid <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            ext_dfi_p2_rddata_valid <= master_p2_rddata_valid;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    slave_p0_rddata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
        end else begin
            slave_p0_rddata <= master_p0_rddata;
        end
    end else begin
    end
end
always @(*) begin
    slave_p0_rddata_valid <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
        end else begin
            slave_p0_rddata_valid <= master_p0_rddata_valid;
        end
    end else begin
    end
end
always @(*) begin
    ext_dfi_p3_rddata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            ext_dfi_p3_rddata <= master_p3_rddata;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    ext_dfi_p3_rddata_valid <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            ext_dfi_p3_rddata_valid <= master_p3_rddata_valid;
        end else begin
        end
    end else begin
    end
end
always @(*) begin
    slave_p1_rddata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
        end else begin
            slave_p1_rddata <= master_p1_rddata;
        end
    end else begin
    end
end
always @(*) begin
    slave_p1_rddata_valid <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
        end else begin
            slave_p1_rddata_valid <= master_p1_rddata_valid;
        end
    end else begin
    end
end
always @(*) begin
    slave_p2_rddata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
        end else begin
            slave_p2_rddata <= master_p2_rddata;
        end
    end else begin
    end
end
always @(*) begin
    slave_p2_rddata_valid <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
        end else begin
            slave_p2_rddata_valid <= master_p2_rddata_valid;
        end
    end else begin
    end
end
always @(*) begin
    slave_p3_rddata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
        end else begin
            slave_p3_rddata <= master_p3_rddata;
        end
    end else begin
    end
end
always @(*) begin
    slave_p3_rddata_valid <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
        end else begin
            slave_p3_rddata_valid <= master_p3_rddata_valid;
        end
    end else begin
    end
end
always @(*) begin
    master_p0_address <= 14'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_address <= ext_dfi_p0_address;
        end else begin
            master_p0_address <= slave_p0_address;
        end
    end else begin
        master_p0_address <= csr_dfi_p0_address;
    end
end
always @(*) begin
    master_p0_bank <= 3'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_bank <= ext_dfi_p0_bank;
        end else begin
            master_p0_bank <= slave_p0_bank;
        end
    end else begin
        master_p0_bank <= csr_dfi_p0_bank;
    end
end
always @(*) begin
    master_p0_cas_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_cas_n <= ext_dfi_p0_cas_n;
        end else begin
            master_p0_cas_n <= slave_p0_cas_n;
        end
    end else begin
        master_p0_cas_n <= csr_dfi_p0_cas_n;
    end
end
always @(*) begin
    master_p0_cs_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_cs_n <= ext_dfi_p0_cs_n;
        end else begin
            master_p0_cs_n <= slave_p0_cs_n;
            if (1'd0) begin
                master_p0_cs_n <= {2{slave_p0_cs_n}};
            end
        end
    end else begin
        master_p0_cs_n <= csr_dfi_p0_cs_n;
    end
end
always @(*) begin
    master_p0_ras_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_ras_n <= ext_dfi_p0_ras_n;
        end else begin
            master_p0_ras_n <= slave_p0_ras_n;
        end
    end else begin
        master_p0_ras_n <= csr_dfi_p0_ras_n;
    end
end
always @(*) begin
    master_p0_we_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_we_n <= ext_dfi_p0_we_n;
        end else begin
            master_p0_we_n <= slave_p0_we_n;
        end
    end else begin
        master_p0_we_n <= csr_dfi_p0_we_n;
    end
end
always @(*) begin
    master_p0_cke <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_cke <= ext_dfi_p0_cke;
        end else begin
            master_p0_cke <= slave_p0_cke;
        end
    end else begin
        master_p0_cke <= csr_dfi_p0_cke;
    end
end
always @(*) begin
    master_p0_odt <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_odt <= ext_dfi_p0_odt;
        end else begin
            master_p0_odt <= slave_p0_odt;
        end
    end else begin
        master_p0_odt <= csr_dfi_p0_odt;
    end
end
always @(*) begin
    master_p0_reset_n <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_reset_n <= ext_dfi_p0_reset_n;
        end else begin
            master_p0_reset_n <= slave_p0_reset_n;
        end
    end else begin
        master_p0_reset_n <= csr_dfi_p0_reset_n;
    end
end
always @(*) begin
    master_p0_act_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_act_n <= ext_dfi_p0_act_n;
        end else begin
            master_p0_act_n <= slave_p0_act_n;
        end
    end else begin
        master_p0_act_n <= csr_dfi_p0_act_n;
    end
end
always @(*) begin
    master_p0_wrdata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_wrdata <= ext_dfi_p0_wrdata;
        end else begin
            master_p0_wrdata <= slave_p0_wrdata;
        end
    end else begin
        master_p0_wrdata <= csr_dfi_p0_wrdata;
    end
end
always @(*) begin
    master_p0_wrdata_en <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_wrdata_en <= ext_dfi_p0_wrdata_en;
        end else begin
            master_p0_wrdata_en <= slave_p0_wrdata_en;
        end
    end else begin
        master_p0_wrdata_en <= csr_dfi_p0_wrdata_en;
    end
end
always @(*) begin
    master_p0_wrdata_mask <= 4'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_wrdata_mask <= ext_dfi_p0_wrdata_mask;
        end else begin
            master_p0_wrdata_mask <= slave_p0_wrdata_mask;
        end
    end else begin
        master_p0_wrdata_mask <= csr_dfi_p0_wrdata_mask;
    end
end
always @(*) begin
    master_p0_rddata_en <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p0_rddata_en <= ext_dfi_p0_rddata_en;
        end else begin
            master_p0_rddata_en <= slave_p0_rddata_en;
        end
    end else begin
        master_p0_rddata_en <= csr_dfi_p0_rddata_en;
    end
end
always @(*) begin
    master_p1_address <= 14'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_address <= ext_dfi_p1_address;
        end else begin
            master_p1_address <= slave_p1_address;
        end
    end else begin
        master_p1_address <= csr_dfi_p1_address;
    end
end
always @(*) begin
    master_p1_bank <= 3'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_bank <= ext_dfi_p1_bank;
        end else begin
            master_p1_bank <= slave_p1_bank;
        end
    end else begin
        master_p1_bank <= csr_dfi_p1_bank;
    end
end
always @(*) begin
    master_p1_cas_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_cas_n <= ext_dfi_p1_cas_n;
        end else begin
            master_p1_cas_n <= slave_p1_cas_n;
        end
    end else begin
        master_p1_cas_n <= csr_dfi_p1_cas_n;
    end
end
always @(*) begin
    master_p1_cs_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_cs_n <= ext_dfi_p1_cs_n;
        end else begin
            master_p1_cs_n <= slave_p1_cs_n;
            if (1'd0) begin
                master_p1_cs_n <= {2{slave_p1_cs_n}};
            end
        end
    end else begin
        master_p1_cs_n <= csr_dfi_p1_cs_n;
    end
end
always @(*) begin
    master_p1_ras_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_ras_n <= ext_dfi_p1_ras_n;
        end else begin
            master_p1_ras_n <= slave_p1_ras_n;
        end
    end else begin
        master_p1_ras_n <= csr_dfi_p1_ras_n;
    end
end
always @(*) begin
    master_p1_we_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_we_n <= ext_dfi_p1_we_n;
        end else begin
            master_p1_we_n <= slave_p1_we_n;
        end
    end else begin
        master_p1_we_n <= csr_dfi_p1_we_n;
    end
end
always @(*) begin
    master_p1_cke <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_cke <= ext_dfi_p1_cke;
        end else begin
            master_p1_cke <= slave_p1_cke;
        end
    end else begin
        master_p1_cke <= csr_dfi_p1_cke;
    end
end
always @(*) begin
    master_p1_odt <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_odt <= ext_dfi_p1_odt;
        end else begin
            master_p1_odt <= slave_p1_odt;
        end
    end else begin
        master_p1_odt <= csr_dfi_p1_odt;
    end
end
always @(*) begin
    master_p1_reset_n <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_reset_n <= ext_dfi_p1_reset_n;
        end else begin
            master_p1_reset_n <= slave_p1_reset_n;
        end
    end else begin
        master_p1_reset_n <= csr_dfi_p1_reset_n;
    end
end
always @(*) begin
    master_p1_act_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_act_n <= ext_dfi_p1_act_n;
        end else begin
            master_p1_act_n <= slave_p1_act_n;
        end
    end else begin
        master_p1_act_n <= csr_dfi_p1_act_n;
    end
end
always @(*) begin
    master_p1_wrdata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_wrdata <= ext_dfi_p1_wrdata;
        end else begin
            master_p1_wrdata <= slave_p1_wrdata;
        end
    end else begin
        master_p1_wrdata <= csr_dfi_p1_wrdata;
    end
end
always @(*) begin
    master_p1_wrdata_en <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_wrdata_en <= ext_dfi_p1_wrdata_en;
        end else begin
            master_p1_wrdata_en <= slave_p1_wrdata_en;
        end
    end else begin
        master_p1_wrdata_en <= csr_dfi_p1_wrdata_en;
    end
end
always @(*) begin
    master_p1_wrdata_mask <= 4'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_wrdata_mask <= ext_dfi_p1_wrdata_mask;
        end else begin
            master_p1_wrdata_mask <= slave_p1_wrdata_mask;
        end
    end else begin
        master_p1_wrdata_mask <= csr_dfi_p1_wrdata_mask;
    end
end
always @(*) begin
    master_p1_rddata_en <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p1_rddata_en <= ext_dfi_p1_rddata_en;
        end else begin
            master_p1_rddata_en <= slave_p1_rddata_en;
        end
    end else begin
        master_p1_rddata_en <= csr_dfi_p1_rddata_en;
    end
end
always @(*) begin
    master_p2_address <= 14'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_address <= ext_dfi_p2_address;
        end else begin
            master_p2_address <= slave_p2_address;
        end
    end else begin
        master_p2_address <= csr_dfi_p2_address;
    end
end
always @(*) begin
    master_p2_bank <= 3'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_bank <= ext_dfi_p2_bank;
        end else begin
            master_p2_bank <= slave_p2_bank;
        end
    end else begin
        master_p2_bank <= csr_dfi_p2_bank;
    end
end
always @(*) begin
    master_p2_cas_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_cas_n <= ext_dfi_p2_cas_n;
        end else begin
            master_p2_cas_n <= slave_p2_cas_n;
        end
    end else begin
        master_p2_cas_n <= csr_dfi_p2_cas_n;
    end
end
always @(*) begin
    master_p2_cs_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_cs_n <= ext_dfi_p2_cs_n;
        end else begin
            master_p2_cs_n <= slave_p2_cs_n;
            if (1'd0) begin
                master_p2_cs_n <= {2{slave_p2_cs_n}};
            end
        end
    end else begin
        master_p2_cs_n <= csr_dfi_p2_cs_n;
    end
end
always @(*) begin
    master_p2_ras_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_ras_n <= ext_dfi_p2_ras_n;
        end else begin
            master_p2_ras_n <= slave_p2_ras_n;
        end
    end else begin
        master_p2_ras_n <= csr_dfi_p2_ras_n;
    end
end
always @(*) begin
    master_p2_we_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_we_n <= ext_dfi_p2_we_n;
        end else begin
            master_p2_we_n <= slave_p2_we_n;
        end
    end else begin
        master_p2_we_n <= csr_dfi_p2_we_n;
    end
end
always @(*) begin
    master_p2_cke <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_cke <= ext_dfi_p2_cke;
        end else begin
            master_p2_cke <= slave_p2_cke;
        end
    end else begin
        master_p2_cke <= csr_dfi_p2_cke;
    end
end
always @(*) begin
    master_p2_odt <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_odt <= ext_dfi_p2_odt;
        end else begin
            master_p2_odt <= slave_p2_odt;
        end
    end else begin
        master_p2_odt <= csr_dfi_p2_odt;
    end
end
always @(*) begin
    master_p2_reset_n <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_reset_n <= ext_dfi_p2_reset_n;
        end else begin
            master_p2_reset_n <= slave_p2_reset_n;
        end
    end else begin
        master_p2_reset_n <= csr_dfi_p2_reset_n;
    end
end
always @(*) begin
    master_p2_act_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_act_n <= ext_dfi_p2_act_n;
        end else begin
            master_p2_act_n <= slave_p2_act_n;
        end
    end else begin
        master_p2_act_n <= csr_dfi_p2_act_n;
    end
end
always @(*) begin
    master_p2_wrdata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_wrdata <= ext_dfi_p2_wrdata;
        end else begin
            master_p2_wrdata <= slave_p2_wrdata;
        end
    end else begin
        master_p2_wrdata <= csr_dfi_p2_wrdata;
    end
end
always @(*) begin
    master_p2_wrdata_en <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_wrdata_en <= ext_dfi_p2_wrdata_en;
        end else begin
            master_p2_wrdata_en <= slave_p2_wrdata_en;
        end
    end else begin
        master_p2_wrdata_en <= csr_dfi_p2_wrdata_en;
    end
end
always @(*) begin
    master_p2_wrdata_mask <= 4'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_wrdata_mask <= ext_dfi_p2_wrdata_mask;
        end else begin
            master_p2_wrdata_mask <= slave_p2_wrdata_mask;
        end
    end else begin
        master_p2_wrdata_mask <= csr_dfi_p2_wrdata_mask;
    end
end
always @(*) begin
    master_p2_rddata_en <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p2_rddata_en <= ext_dfi_p2_rddata_en;
        end else begin
            master_p2_rddata_en <= slave_p2_rddata_en;
        end
    end else begin
        master_p2_rddata_en <= csr_dfi_p2_rddata_en;
    end
end
always @(*) begin
    master_p3_address <= 14'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_address <= ext_dfi_p3_address;
        end else begin
            master_p3_address <= slave_p3_address;
        end
    end else begin
        master_p3_address <= csr_dfi_p3_address;
    end
end
always @(*) begin
    master_p3_bank <= 3'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_bank <= ext_dfi_p3_bank;
        end else begin
            master_p3_bank <= slave_p3_bank;
        end
    end else begin
        master_p3_bank <= csr_dfi_p3_bank;
    end
end
always @(*) begin
    master_p3_cas_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_cas_n <= ext_dfi_p3_cas_n;
        end else begin
            master_p3_cas_n <= slave_p3_cas_n;
        end
    end else begin
        master_p3_cas_n <= csr_dfi_p3_cas_n;
    end
end
always @(*) begin
    master_p3_cs_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_cs_n <= ext_dfi_p3_cs_n;
        end else begin
            master_p3_cs_n <= slave_p3_cs_n;
            if (1'd0) begin
                master_p3_cs_n <= {2{slave_p3_cs_n}};
            end
        end
    end else begin
        master_p3_cs_n <= csr_dfi_p3_cs_n;
    end
end
always @(*) begin
    master_p3_ras_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_ras_n <= ext_dfi_p3_ras_n;
        end else begin
            master_p3_ras_n <= slave_p3_ras_n;
        end
    end else begin
        master_p3_ras_n <= csr_dfi_p3_ras_n;
    end
end
always @(*) begin
    master_p3_we_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_we_n <= ext_dfi_p3_we_n;
        end else begin
            master_p3_we_n <= slave_p3_we_n;
        end
    end else begin
        master_p3_we_n <= csr_dfi_p3_we_n;
    end
end
always @(*) begin
    master_p3_cke <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_cke <= ext_dfi_p3_cke;
        end else begin
            master_p3_cke <= slave_p3_cke;
        end
    end else begin
        master_p3_cke <= csr_dfi_p3_cke;
    end
end
always @(*) begin
    master_p3_odt <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_odt <= ext_dfi_p3_odt;
        end else begin
            master_p3_odt <= slave_p3_odt;
        end
    end else begin
        master_p3_odt <= csr_dfi_p3_odt;
    end
end
always @(*) begin
    master_p3_reset_n <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_reset_n <= ext_dfi_p3_reset_n;
        end else begin
            master_p3_reset_n <= slave_p3_reset_n;
        end
    end else begin
        master_p3_reset_n <= csr_dfi_p3_reset_n;
    end
end
always @(*) begin
    master_p3_act_n <= 1'd1;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_act_n <= ext_dfi_p3_act_n;
        end else begin
            master_p3_act_n <= slave_p3_act_n;
        end
    end else begin
        master_p3_act_n <= csr_dfi_p3_act_n;
    end
end
always @(*) begin
    master_p3_wrdata <= 32'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_wrdata <= ext_dfi_p3_wrdata;
        end else begin
            master_p3_wrdata <= slave_p3_wrdata;
        end
    end else begin
        master_p3_wrdata <= csr_dfi_p3_wrdata;
    end
end
always @(*) begin
    master_p3_wrdata_en <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_wrdata_en <= ext_dfi_p3_wrdata_en;
        end else begin
            master_p3_wrdata_en <= slave_p3_wrdata_en;
        end
    end else begin
        master_p3_wrdata_en <= csr_dfi_p3_wrdata_en;
    end
end
always @(*) begin
    master_p3_wrdata_mask <= 4'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_wrdata_mask <= ext_dfi_p3_wrdata_mask;
        end else begin
            master_p3_wrdata_mask <= slave_p3_wrdata_mask;
        end
    end else begin
        master_p3_wrdata_mask <= csr_dfi_p3_wrdata_mask;
    end
end
always @(*) begin
    master_p3_rddata_en <= 1'd0;
    if (sel) begin
        if (ext_dfi_sel) begin
            master_p3_rddata_en <= ext_dfi_p3_rddata_en;
        end else begin
            master_p3_rddata_en <= slave_p3_rddata_en;
        end
    end else begin
        master_p3_rddata_en <= csr_dfi_p3_rddata_en;
    end
end
always @(*) begin
    csr_dfi_p0_cke <= 1'd0;
    csr_dfi_p0_cke <= cke;
end
always @(*) begin
    csr_dfi_p1_cke <= 1'd0;
    csr_dfi_p1_cke <= cke;
end
always @(*) begin
    csr_dfi_p2_cke <= 1'd0;
    csr_dfi_p2_cke <= cke;
end
always @(*) begin
    csr_dfi_p3_cke <= 1'd0;
    csr_dfi_p3_cke <= cke;
end
always @(*) begin
    csr_dfi_p0_odt <= 1'd0;
    csr_dfi_p0_odt <= odt;
end
always @(*) begin
    csr_dfi_p1_odt <= 1'd0;
    csr_dfi_p1_odt <= odt;
end
always @(*) begin
    csr_dfi_p2_odt <= 1'd0;
    csr_dfi_p2_odt <= odt;
end
always @(*) begin
    csr_dfi_p3_odt <= 1'd0;
    csr_dfi_p3_odt <= odt;
end
assign csr_dfi_p0_reset_n = reset_n;
assign csr_dfi_p1_reset_n = reset_n;
assign csr_dfi_p2_reset_n = reset_n;
assign csr_dfi_p3_reset_n = reset_n;
always @(*) begin
    csr_dfi_p0_we_n <= 1'd1;
    if (phaseinjector0_command_issue_re) begin
        csr_dfi_p0_we_n <= (~phaseinjector0_csrfield_we);
    end else begin
        csr_dfi_p0_we_n <= 1'd1;
    end
end
always @(*) begin
    csr_dfi_p0_cas_n <= 1'd1;
    if (phaseinjector0_command_issue_re) begin
        csr_dfi_p0_cas_n <= (~phaseinjector0_csrfield_cas);
    end else begin
        csr_dfi_p0_cas_n <= 1'd1;
    end
end
always @(*) begin
    csr_dfi_p0_cs_n <= 1'd1;
    if (phaseinjector0_command_issue_re) begin
        if (phaseinjector0_csrfield_cs_top) begin
            csr_dfi_p0_cs_n <= 2'd2;
        end else begin
            if (phaseinjector0_csrfield_cs_bottom) begin
                csr_dfi_p0_cs_n <= 1'd1;
            end else begin
                csr_dfi_p0_cs_n <= {1{(~phaseinjector0_csrfield_cs)}};
            end
        end
    end else begin
        csr_dfi_p0_cs_n <= {1{1'd1}};
    end
end
always @(*) begin
    csr_dfi_p0_ras_n <= 1'd1;
    if (phaseinjector0_command_issue_re) begin
        csr_dfi_p0_ras_n <= (~phaseinjector0_csrfield_ras);
    end else begin
        csr_dfi_p0_ras_n <= 1'd1;
    end
end
assign csr_dfi_p0_address = phaseinjector0_address_storage;
assign csr_dfi_p0_bank = phaseinjector0_baddress_storage;
assign csr_dfi_p0_wrdata_en = (phaseinjector0_command_issue_re & phaseinjector0_csrfield_wren);
assign csr_dfi_p0_rddata_en = (phaseinjector0_command_issue_re & phaseinjector0_csrfield_rden);
assign csr_dfi_p0_wrdata = phaseinjector0_wrdata_storage;
assign csr_dfi_p0_wrdata_mask = 1'd0;
always @(*) begin
    csr_dfi_p1_we_n <= 1'd1;
    if (phaseinjector1_command_issue_re) begin
        csr_dfi_p1_we_n <= (~phaseinjector1_csrfield_we);
    end else begin
        csr_dfi_p1_we_n <= 1'd1;
    end
end
always @(*) begin
    csr_dfi_p1_cas_n <= 1'd1;
    if (phaseinjector1_command_issue_re) begin
        csr_dfi_p1_cas_n <= (~phaseinjector1_csrfield_cas);
    end else begin
        csr_dfi_p1_cas_n <= 1'd1;
    end
end
always @(*) begin
    csr_dfi_p1_cs_n <= 1'd1;
    if (phaseinjector1_command_issue_re) begin
        if (phaseinjector1_csrfield_cs_top) begin
            csr_dfi_p1_cs_n <= 2'd2;
        end else begin
            if (phaseinjector1_csrfield_cs_bottom) begin
                csr_dfi_p1_cs_n <= 1'd1;
            end else begin
                csr_dfi_p1_cs_n <= {1{(~phaseinjector1_csrfield_cs)}};
            end
        end
    end else begin
        csr_dfi_p1_cs_n <= {1{1'd1}};
    end
end
always @(*) begin
    csr_dfi_p1_ras_n <= 1'd1;
    if (phaseinjector1_command_issue_re) begin
        csr_dfi_p1_ras_n <= (~phaseinjector1_csrfield_ras);
    end else begin
        csr_dfi_p1_ras_n <= 1'd1;
    end
end
assign csr_dfi_p1_address = phaseinjector1_address_storage;
assign csr_dfi_p1_bank = phaseinjector1_baddress_storage;
assign csr_dfi_p1_wrdata_en = (phaseinjector1_command_issue_re & phaseinjector1_csrfield_wren);
assign csr_dfi_p1_rddata_en = (phaseinjector1_command_issue_re & phaseinjector1_csrfield_rden);
assign csr_dfi_p1_wrdata = phaseinjector1_wrdata_storage;
assign csr_dfi_p1_wrdata_mask = 1'd0;
always @(*) begin
    csr_dfi_p2_we_n <= 1'd1;
    if (phaseinjector2_command_issue_re) begin
        csr_dfi_p2_we_n <= (~phaseinjector2_csrfield_we);
    end else begin
        csr_dfi_p2_we_n <= 1'd1;
    end
end
always @(*) begin
    csr_dfi_p2_cas_n <= 1'd1;
    if (phaseinjector2_command_issue_re) begin
        csr_dfi_p2_cas_n <= (~phaseinjector2_csrfield_cas);
    end else begin
        csr_dfi_p2_cas_n <= 1'd1;
    end
end
always @(*) begin
    csr_dfi_p2_cs_n <= 1'd1;
    if (phaseinjector2_command_issue_re) begin
        if (phaseinjector2_csrfield_cs_top) begin
            csr_dfi_p2_cs_n <= 2'd2;
        end else begin
            if (phaseinjector2_csrfield_cs_bottom) begin
                csr_dfi_p2_cs_n <= 1'd1;
            end else begin
                csr_dfi_p2_cs_n <= {1{(~phaseinjector2_csrfield_cs)}};
            end
        end
    end else begin
        csr_dfi_p2_cs_n <= {1{1'd1}};
    end
end
always @(*) begin
    csr_dfi_p2_ras_n <= 1'd1;
    if (phaseinjector2_command_issue_re) begin
        csr_dfi_p2_ras_n <= (~phaseinjector2_csrfield_ras);
    end else begin
        csr_dfi_p2_ras_n <= 1'd1;
    end
end
assign csr_dfi_p2_address = phaseinjector2_address_storage;
assign csr_dfi_p2_bank = phaseinjector2_baddress_storage;
assign csr_dfi_p2_wrdata_en = (phaseinjector2_command_issue_re & phaseinjector2_csrfield_wren);
assign csr_dfi_p2_rddata_en = (phaseinjector2_command_issue_re & phaseinjector2_csrfield_rden);
assign csr_dfi_p2_wrdata = phaseinjector2_wrdata_storage;
assign csr_dfi_p2_wrdata_mask = 1'd0;
always @(*) begin
    csr_dfi_p3_we_n <= 1'd1;
    if (phaseinjector3_command_issue_re) begin
        csr_dfi_p3_we_n <= (~phaseinjector3_csrfield_we);
    end else begin
        csr_dfi_p3_we_n <= 1'd1;
    end
end
always @(*) begin
    csr_dfi_p3_cas_n <= 1'd1;
    if (phaseinjector3_command_issue_re) begin
        csr_dfi_p3_cas_n <= (~phaseinjector3_csrfield_cas);
    end else begin
        csr_dfi_p3_cas_n <= 1'd1;
    end
end
always @(*) begin
    csr_dfi_p3_cs_n <= 1'd1;
    if (phaseinjector3_command_issue_re) begin
        if (phaseinjector3_csrfield_cs_top) begin
            csr_dfi_p3_cs_n <= 2'd2;
        end else begin
            if (phaseinjector3_csrfield_cs_bottom) begin
                csr_dfi_p3_cs_n <= 1'd1;
            end else begin
                csr_dfi_p3_cs_n <= {1{(~phaseinjector3_csrfield_cs)}};
            end
        end
    end else begin
        csr_dfi_p3_cs_n <= {1{1'd1}};
    end
end
always @(*) begin
    csr_dfi_p3_ras_n <= 1'd1;
    if (phaseinjector3_command_issue_re) begin
        csr_dfi_p3_ras_n <= (~phaseinjector3_csrfield_ras);
    end else begin
        csr_dfi_p3_ras_n <= 1'd1;
    end
end
assign csr_dfi_p3_address = phaseinjector3_address_storage;
assign csr_dfi_p3_bank = phaseinjector3_baddress_storage;
assign csr_dfi_p3_wrdata_en = (phaseinjector3_command_issue_re & phaseinjector3_csrfield_wren);
assign csr_dfi_p3_rddata_en = (phaseinjector3_command_issue_re & phaseinjector3_csrfield_rden);
assign csr_dfi_p3_wrdata = phaseinjector3_wrdata_storage;
assign csr_dfi_p3_wrdata_mask = 1'd0;
assign bankmachine0_req_valid = interface_bank0_valid;
assign interface_bank0_ready = bankmachine0_req_ready;
assign bankmachine0_req_we = interface_bank0_we;
assign bankmachine0_req_addr = interface_bank0_addr;
assign interface_bank0_lock = bankmachine0_req_lock;
assign interface_bank0_wdata_ready = bankmachine0_req_wdata_ready;
assign interface_bank0_rdata_valid = bankmachine0_req_rdata_valid;
assign bankmachine1_req_valid = interface_bank1_valid;
assign interface_bank1_ready = bankmachine1_req_ready;
assign bankmachine1_req_we = interface_bank1_we;
assign bankmachine1_req_addr = interface_bank1_addr;
assign interface_bank1_lock = bankmachine1_req_lock;
assign interface_bank1_wdata_ready = bankmachine1_req_wdata_ready;
assign interface_bank1_rdata_valid = bankmachine1_req_rdata_valid;
assign bankmachine2_req_valid = interface_bank2_valid;
assign interface_bank2_ready = bankmachine2_req_ready;
assign bankmachine2_req_we = interface_bank2_we;
assign bankmachine2_req_addr = interface_bank2_addr;
assign interface_bank2_lock = bankmachine2_req_lock;
assign interface_bank2_wdata_ready = bankmachine2_req_wdata_ready;
assign interface_bank2_rdata_valid = bankmachine2_req_rdata_valid;
assign bankmachine3_req_valid = interface_bank3_valid;
assign interface_bank3_ready = bankmachine3_req_ready;
assign bankmachine3_req_we = interface_bank3_we;
assign bankmachine3_req_addr = interface_bank3_addr;
assign interface_bank3_lock = bankmachine3_req_lock;
assign interface_bank3_wdata_ready = bankmachine3_req_wdata_ready;
assign interface_bank3_rdata_valid = bankmachine3_req_rdata_valid;
assign bankmachine4_req_valid = interface_bank4_valid;
assign interface_bank4_ready = bankmachine4_req_ready;
assign bankmachine4_req_we = interface_bank4_we;
assign bankmachine4_req_addr = interface_bank4_addr;
assign interface_bank4_lock = bankmachine4_req_lock;
assign interface_bank4_wdata_ready = bankmachine4_req_wdata_ready;
assign interface_bank4_rdata_valid = bankmachine4_req_rdata_valid;
assign bankmachine5_req_valid = interface_bank5_valid;
assign interface_bank5_ready = bankmachine5_req_ready;
assign bankmachine5_req_we = interface_bank5_we;
assign bankmachine5_req_addr = interface_bank5_addr;
assign interface_bank5_lock = bankmachine5_req_lock;
assign interface_bank5_wdata_ready = bankmachine5_req_wdata_ready;
assign interface_bank5_rdata_valid = bankmachine5_req_rdata_valid;
assign bankmachine6_req_valid = interface_bank6_valid;
assign interface_bank6_ready = bankmachine6_req_ready;
assign bankmachine6_req_we = interface_bank6_we;
assign bankmachine6_req_addr = interface_bank6_addr;
assign interface_bank6_lock = bankmachine6_req_lock;
assign interface_bank6_wdata_ready = bankmachine6_req_wdata_ready;
assign interface_bank6_rdata_valid = bankmachine6_req_rdata_valid;
assign bankmachine7_req_valid = interface_bank7_valid;
assign interface_bank7_ready = bankmachine7_req_ready;
assign bankmachine7_req_we = interface_bank7_we;
assign bankmachine7_req_addr = interface_bank7_addr;
assign interface_bank7_lock = bankmachine7_req_lock;
assign interface_bank7_wdata_ready = bankmachine7_req_wdata_ready;
assign interface_bank7_rdata_valid = bankmachine7_req_rdata_valid;
assign timer_wait = (~timer_done0);
assign postponer_req_i = timer_done0;
assign wants_refresh = postponer_req_o;
assign wants_zqcs = zqcs_timer_done0;
assign zqcs_timer_wait = (~zqcs_executer_done);
assign timer_done1 = (timer_count1 == 1'd0);
assign timer_done0 = timer_done1;
assign timer_count0 = timer_count1;
assign sequencer_start1 = (sequencer_start0 | (sequencer_count != 1'd0));
assign sequencer_done0 = (sequencer_done1 & (sequencer_count == 1'd0));
assign zqcs_timer_done1 = (zqcs_timer_count1 == 1'd0);
assign zqcs_timer_done0 = zqcs_timer_done1;
assign zqcs_timer_count0 = zqcs_timer_count1;
always @(*) begin
    litedramcore_litedramcore_refresher_next_state <= 2'd0;
    litedramcore_litedramcore_refresher_next_state <= litedramcore_litedramcore_refresher_state;
    case (litedramcore_litedramcore_refresher_state)
        1'd1: begin
            if (cmd_ready) begin
                litedramcore_litedramcore_refresher_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (sequencer_done0) begin
                if (wants_zqcs) begin
                    litedramcore_litedramcore_refresher_next_state <= 2'd3;
                end else begin
                    litedramcore_litedramcore_refresher_next_state <= 1'd0;
                end
            end
        end
        2'd3: begin
            if (zqcs_executer_done) begin
                litedramcore_litedramcore_refresher_next_state <= 1'd0;
            end
        end
        default: begin
            if (1'd1) begin
                if (wants_refresh) begin
                    litedramcore_litedramcore_refresher_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    sequencer_start0 <= 1'd0;
    case (litedramcore_litedramcore_refresher_state)
        1'd1: begin
            if (cmd_ready) begin
                sequencer_start0 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_refresher_state)
        1'd1: begin
            cmd_valid <= 1'd1;
        end
        2'd2: begin
            cmd_valid <= 1'd1;
            if (sequencer_done0) begin
                if (wants_zqcs) begin
                end else begin
                    cmd_valid <= 1'd0;
                end
            end
        end
        2'd3: begin
            cmd_valid <= 1'd1;
            if (zqcs_executer_done) begin
                cmd_valid <= 1'd0;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    zqcs_executer_start <= 1'd0;
    case (litedramcore_litedramcore_refresher_state)
        1'd1: begin
        end
        2'd2: begin
            if (sequencer_done0) begin
                if (wants_zqcs) begin
                    zqcs_executer_start <= 1'd1;
                end else begin
                end
            end
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    cmd_last <= 1'd0;
    case (litedramcore_litedramcore_refresher_state)
        1'd1: begin
        end
        2'd2: begin
            if (sequencer_done0) begin
                if (wants_zqcs) begin
                end else begin
                    cmd_last <= 1'd1;
                end
            end
        end
        2'd3: begin
            if (zqcs_executer_done) begin
                cmd_last <= 1'd1;
            end
        end
        default: begin
        end
    endcase
end
assign bankmachine0_sink_valid = bankmachine0_req_valid;
assign bankmachine0_req_ready = bankmachine0_sink_ready;
assign bankmachine0_sink_payload_we = bankmachine0_req_we;
assign bankmachine0_sink_payload_addr = bankmachine0_req_addr;
assign bankmachine0_sink_sink_valid = bankmachine0_source_valid;
assign bankmachine0_source_ready = bankmachine0_sink_sink_ready;
assign bankmachine0_sink_sink_first = bankmachine0_source_first;
assign bankmachine0_sink_sink_last = bankmachine0_source_last;
assign bankmachine0_sink_sink_payload_we = bankmachine0_source_payload_we;
assign bankmachine0_sink_sink_payload_addr = bankmachine0_source_payload_addr;
assign bankmachine0_source_source_ready = (bankmachine0_req_wdata_ready | bankmachine0_req_rdata_valid);
assign bankmachine0_req_lock = (bankmachine0_source_valid | bankmachine0_source_source_valid);
assign bankmachine0_row_hit = (bankmachine0_row == bankmachine0_source_source_payload_addr[20:7]);
assign bankmachine0_cmd_payload_ba = 1'd0;
always @(*) begin
    bankmachine0_cmd_payload_a <= 14'd0;
    if (bankmachine0_row_col_n_addr_sel) begin
        bankmachine0_cmd_payload_a <= bankmachine0_source_source_payload_addr[20:7];
    end else begin
        bankmachine0_cmd_payload_a <= ((bankmachine0_auto_precharge <<< 4'd10) | {bankmachine0_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign bankmachine0_twtpcon_valid = ((bankmachine0_cmd_valid & bankmachine0_cmd_ready) & bankmachine0_cmd_payload_is_write);
assign bankmachine0_trccon_valid = ((bankmachine0_cmd_valid & bankmachine0_cmd_ready) & bankmachine0_row_open);
assign bankmachine0_trascon_valid = ((bankmachine0_cmd_valid & bankmachine0_cmd_ready) & bankmachine0_row_open);
always @(*) begin
    bankmachine0_auto_precharge <= 1'd0;
    if ((bankmachine0_source_valid & bankmachine0_source_source_valid)) begin
        if ((bankmachine0_source_payload_addr[20:7] != bankmachine0_source_source_payload_addr[20:7])) begin
            bankmachine0_auto_precharge <= (bankmachine0_row_close == 1'd0);
        end
    end
end
assign bankmachine0_syncfifo0_din = {bankmachine0_fifo_in_last, bankmachine0_fifo_in_first, bankmachine0_fifo_in_payload_addr, bankmachine0_fifo_in_payload_we};
assign {bankmachine0_fifo_out_last, bankmachine0_fifo_out_first, bankmachine0_fifo_out_payload_addr, bankmachine0_fifo_out_payload_we} = bankmachine0_syncfifo0_dout;
assign {bankmachine0_fifo_out_last, bankmachine0_fifo_out_first, bankmachine0_fifo_out_payload_addr, bankmachine0_fifo_out_payload_we} = bankmachine0_syncfifo0_dout;
assign {bankmachine0_fifo_out_last, bankmachine0_fifo_out_first, bankmachine0_fifo_out_payload_addr, bankmachine0_fifo_out_payload_we} = bankmachine0_syncfifo0_dout;
assign {bankmachine0_fifo_out_last, bankmachine0_fifo_out_first, bankmachine0_fifo_out_payload_addr, bankmachine0_fifo_out_payload_we} = bankmachine0_syncfifo0_dout;
assign bankmachine0_sink_ready = bankmachine0_syncfifo0_writable;
assign bankmachine0_syncfifo0_we = bankmachine0_sink_valid;
assign bankmachine0_fifo_in_first = bankmachine0_sink_first;
assign bankmachine0_fifo_in_last = bankmachine0_sink_last;
assign bankmachine0_fifo_in_payload_we = bankmachine0_sink_payload_we;
assign bankmachine0_fifo_in_payload_addr = bankmachine0_sink_payload_addr;
assign bankmachine0_source_valid = bankmachine0_syncfifo0_readable;
assign bankmachine0_source_first = bankmachine0_fifo_out_first;
assign bankmachine0_source_last = bankmachine0_fifo_out_last;
assign bankmachine0_source_payload_we = bankmachine0_fifo_out_payload_we;
assign bankmachine0_source_payload_addr = bankmachine0_fifo_out_payload_addr;
assign bankmachine0_syncfifo0_re = bankmachine0_source_ready;
always @(*) begin
    bankmachine0_wrport_adr <= 4'd0;
    if (bankmachine0_replace) begin
        bankmachine0_wrport_adr <= (bankmachine0_produce - 1'd1);
    end else begin
        bankmachine0_wrport_adr <= bankmachine0_produce;
    end
end
assign bankmachine0_wrport_dat_w = bankmachine0_syncfifo0_din;
assign bankmachine0_wrport_we = (bankmachine0_syncfifo0_we & (bankmachine0_syncfifo0_writable | bankmachine0_replace));
assign bankmachine0_do_read = (bankmachine0_syncfifo0_readable & bankmachine0_syncfifo0_re);
assign bankmachine0_rdport_adr = bankmachine0_consume;
assign bankmachine0_syncfifo0_dout = bankmachine0_rdport_dat_r;
assign bankmachine0_syncfifo0_writable = (bankmachine0_level != 5'd16);
assign bankmachine0_syncfifo0_readable = (bankmachine0_level != 1'd0);
assign bankmachine0_pipe_valid_sink_ready = ((~bankmachine0_pipe_valid_source_valid) | bankmachine0_pipe_valid_source_ready);
assign bankmachine0_pipe_valid_sink_valid = bankmachine0_sink_sink_valid;
assign bankmachine0_sink_sink_ready = bankmachine0_pipe_valid_sink_ready;
assign bankmachine0_pipe_valid_sink_first = bankmachine0_sink_sink_first;
assign bankmachine0_pipe_valid_sink_last = bankmachine0_sink_sink_last;
assign bankmachine0_pipe_valid_sink_payload_we = bankmachine0_sink_sink_payload_we;
assign bankmachine0_pipe_valid_sink_payload_addr = bankmachine0_sink_sink_payload_addr;
assign bankmachine0_source_source_valid = bankmachine0_pipe_valid_source_valid;
assign bankmachine0_pipe_valid_source_ready = bankmachine0_source_source_ready;
assign bankmachine0_source_source_first = bankmachine0_pipe_valid_source_first;
assign bankmachine0_source_source_last = bankmachine0_pipe_valid_source_last;
assign bankmachine0_source_source_payload_we = bankmachine0_pipe_valid_source_payload_we;
assign bankmachine0_source_source_payload_addr = bankmachine0_pipe_valid_source_payload_addr;
always @(*) begin
    litedramcore_litedramcore_bankmachine0_next_state <= 3'd0;
    litedramcore_litedramcore_bankmachine0_next_state <= litedramcore_litedramcore_bankmachine0_state;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((bankmachine0_twtpcon_ready & bankmachine0_trascon_ready)) begin
                if (bankmachine0_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine0_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((bankmachine0_twtpcon_ready & bankmachine0_trascon_ready)) begin
                litedramcore_litedramcore_bankmachine0_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (bankmachine0_trccon_ready) begin
                if (bankmachine0_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine0_next_state <= 3'd6;
                end
            end
        end
        3'd4: begin
            if ((~bankmachine0_refresh_req)) begin
                litedramcore_litedramcore_bankmachine0_next_state <= 1'd0;
            end
        end
        3'd5: begin
            litedramcore_litedramcore_bankmachine0_next_state <= 2'd3;
        end
        3'd6: begin
            litedramcore_litedramcore_bankmachine0_next_state <= 1'd0;
        end
        default: begin
            if (bankmachine0_refresh_req) begin
                litedramcore_litedramcore_bankmachine0_next_state <= 3'd4;
            end else begin
                if (bankmachine0_source_source_valid) begin
                    if (bankmachine0_row_opened) begin
                        if (bankmachine0_row_hit) begin
                            if ((bankmachine0_cmd_ready & bankmachine0_auto_precharge)) begin
                                litedramcore_litedramcore_bankmachine0_next_state <= 2'd2;
                            end
                        end else begin
                            litedramcore_litedramcore_bankmachine0_next_state <= 1'd1;
                        end
                    end else begin
                        litedramcore_litedramcore_bankmachine0_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine0_cmd_payload_cas <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine0_refresh_req) begin
            end else begin
                if (bankmachine0_source_source_valid) begin
                    if (bankmachine0_row_opened) begin
                        if (bankmachine0_row_hit) begin
                            bankmachine0_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine0_cmd_payload_ras <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((bankmachine0_twtpcon_ready & bankmachine0_trascon_ready)) begin
                bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine0_trccon_ready) begin
                bankmachine0_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine0_cmd_payload_we <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((bankmachine0_twtpcon_ready & bankmachine0_trascon_ready)) begin
                bankmachine0_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine0_refresh_req) begin
            end else begin
                if (bankmachine0_source_source_valid) begin
                    if (bankmachine0_row_opened) begin
                        if (bankmachine0_row_hit) begin
                            if (bankmachine0_source_source_payload_we) begin
                                bankmachine0_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine0_cmd_payload_is_cmd <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((bankmachine0_twtpcon_ready & bankmachine0_trascon_ready)) begin
                bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine0_trccon_ready) begin
                bankmachine0_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            bankmachine0_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine0_cmd_payload_is_read <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine0_refresh_req) begin
            end else begin
                if (bankmachine0_source_source_valid) begin
                    if (bankmachine0_row_opened) begin
                        if (bankmachine0_row_hit) begin
                            if (bankmachine0_source_source_payload_we) begin
                            end else begin
                                bankmachine0_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine0_cmd_payload_is_write <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine0_refresh_req) begin
            end else begin
                if (bankmachine0_source_source_valid) begin
                    if (bankmachine0_row_opened) begin
                        if (bankmachine0_row_hit) begin
                            if (bankmachine0_source_source_payload_we) begin
                                bankmachine0_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine0_req_wdata_ready <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine0_refresh_req) begin
            end else begin
                if (bankmachine0_source_source_valid) begin
                    if (bankmachine0_row_opened) begin
                        if (bankmachine0_row_hit) begin
                            if (bankmachine0_source_source_payload_we) begin
                                bankmachine0_req_wdata_ready <= bankmachine0_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine0_req_rdata_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine0_refresh_req) begin
            end else begin
                if (bankmachine0_source_source_valid) begin
                    if (bankmachine0_row_opened) begin
                        if (bankmachine0_row_hit) begin
                            if (bankmachine0_source_source_payload_we) begin
                            end else begin
                                bankmachine0_req_rdata_valid <= bankmachine0_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine0_refresh_gnt <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (bankmachine0_twtpcon_ready) begin
                bankmachine0_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine0_row_open <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine0_trccon_ready) begin
                bankmachine0_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine0_cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            if ((bankmachine0_twtpcon_ready & bankmachine0_trascon_ready)) begin
                bankmachine0_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine0_trccon_ready) begin
                bankmachine0_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine0_refresh_req) begin
            end else begin
                if (bankmachine0_source_source_valid) begin
                    if (bankmachine0_row_opened) begin
                        if (bankmachine0_row_hit) begin
                            bankmachine0_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine0_row_close <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
            bankmachine0_row_close <= 1'd1;
        end
        2'd2: begin
            bankmachine0_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            bankmachine0_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine0_row_col_n_addr_sel <= 1'd0;
    case (litedramcore_litedramcore_bankmachine0_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine0_trccon_ready) begin
                bankmachine0_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign bankmachine1_sink_valid = bankmachine1_req_valid;
assign bankmachine1_req_ready = bankmachine1_sink_ready;
assign bankmachine1_sink_payload_we = bankmachine1_req_we;
assign bankmachine1_sink_payload_addr = bankmachine1_req_addr;
assign bankmachine1_sink_sink_valid = bankmachine1_source_valid;
assign bankmachine1_source_ready = bankmachine1_sink_sink_ready;
assign bankmachine1_sink_sink_first = bankmachine1_source_first;
assign bankmachine1_sink_sink_last = bankmachine1_source_last;
assign bankmachine1_sink_sink_payload_we = bankmachine1_source_payload_we;
assign bankmachine1_sink_sink_payload_addr = bankmachine1_source_payload_addr;
assign bankmachine1_source_source_ready = (bankmachine1_req_wdata_ready | bankmachine1_req_rdata_valid);
assign bankmachine1_req_lock = (bankmachine1_source_valid | bankmachine1_source_source_valid);
assign bankmachine1_row_hit = (bankmachine1_row == bankmachine1_source_source_payload_addr[20:7]);
assign bankmachine1_cmd_payload_ba = 1'd1;
always @(*) begin
    bankmachine1_cmd_payload_a <= 14'd0;
    if (bankmachine1_row_col_n_addr_sel) begin
        bankmachine1_cmd_payload_a <= bankmachine1_source_source_payload_addr[20:7];
    end else begin
        bankmachine1_cmd_payload_a <= ((bankmachine1_auto_precharge <<< 4'd10) | {bankmachine1_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign bankmachine1_twtpcon_valid = ((bankmachine1_cmd_valid & bankmachine1_cmd_ready) & bankmachine1_cmd_payload_is_write);
assign bankmachine1_trccon_valid = ((bankmachine1_cmd_valid & bankmachine1_cmd_ready) & bankmachine1_row_open);
assign bankmachine1_trascon_valid = ((bankmachine1_cmd_valid & bankmachine1_cmd_ready) & bankmachine1_row_open);
always @(*) begin
    bankmachine1_auto_precharge <= 1'd0;
    if ((bankmachine1_source_valid & bankmachine1_source_source_valid)) begin
        if ((bankmachine1_source_payload_addr[20:7] != bankmachine1_source_source_payload_addr[20:7])) begin
            bankmachine1_auto_precharge <= (bankmachine1_row_close == 1'd0);
        end
    end
end
assign bankmachine1_syncfifo1_din = {bankmachine1_fifo_in_last, bankmachine1_fifo_in_first, bankmachine1_fifo_in_payload_addr, bankmachine1_fifo_in_payload_we};
assign {bankmachine1_fifo_out_last, bankmachine1_fifo_out_first, bankmachine1_fifo_out_payload_addr, bankmachine1_fifo_out_payload_we} = bankmachine1_syncfifo1_dout;
assign {bankmachine1_fifo_out_last, bankmachine1_fifo_out_first, bankmachine1_fifo_out_payload_addr, bankmachine1_fifo_out_payload_we} = bankmachine1_syncfifo1_dout;
assign {bankmachine1_fifo_out_last, bankmachine1_fifo_out_first, bankmachine1_fifo_out_payload_addr, bankmachine1_fifo_out_payload_we} = bankmachine1_syncfifo1_dout;
assign {bankmachine1_fifo_out_last, bankmachine1_fifo_out_first, bankmachine1_fifo_out_payload_addr, bankmachine1_fifo_out_payload_we} = bankmachine1_syncfifo1_dout;
assign bankmachine1_sink_ready = bankmachine1_syncfifo1_writable;
assign bankmachine1_syncfifo1_we = bankmachine1_sink_valid;
assign bankmachine1_fifo_in_first = bankmachine1_sink_first;
assign bankmachine1_fifo_in_last = bankmachine1_sink_last;
assign bankmachine1_fifo_in_payload_we = bankmachine1_sink_payload_we;
assign bankmachine1_fifo_in_payload_addr = bankmachine1_sink_payload_addr;
assign bankmachine1_source_valid = bankmachine1_syncfifo1_readable;
assign bankmachine1_source_first = bankmachine1_fifo_out_first;
assign bankmachine1_source_last = bankmachine1_fifo_out_last;
assign bankmachine1_source_payload_we = bankmachine1_fifo_out_payload_we;
assign bankmachine1_source_payload_addr = bankmachine1_fifo_out_payload_addr;
assign bankmachine1_syncfifo1_re = bankmachine1_source_ready;
always @(*) begin
    bankmachine1_wrport_adr <= 4'd0;
    if (bankmachine1_replace) begin
        bankmachine1_wrport_adr <= (bankmachine1_produce - 1'd1);
    end else begin
        bankmachine1_wrport_adr <= bankmachine1_produce;
    end
end
assign bankmachine1_wrport_dat_w = bankmachine1_syncfifo1_din;
assign bankmachine1_wrport_we = (bankmachine1_syncfifo1_we & (bankmachine1_syncfifo1_writable | bankmachine1_replace));
assign bankmachine1_do_read = (bankmachine1_syncfifo1_readable & bankmachine1_syncfifo1_re);
assign bankmachine1_rdport_adr = bankmachine1_consume;
assign bankmachine1_syncfifo1_dout = bankmachine1_rdport_dat_r;
assign bankmachine1_syncfifo1_writable = (bankmachine1_level != 5'd16);
assign bankmachine1_syncfifo1_readable = (bankmachine1_level != 1'd0);
assign bankmachine1_pipe_valid_sink_ready = ((~bankmachine1_pipe_valid_source_valid) | bankmachine1_pipe_valid_source_ready);
assign bankmachine1_pipe_valid_sink_valid = bankmachine1_sink_sink_valid;
assign bankmachine1_sink_sink_ready = bankmachine1_pipe_valid_sink_ready;
assign bankmachine1_pipe_valid_sink_first = bankmachine1_sink_sink_first;
assign bankmachine1_pipe_valid_sink_last = bankmachine1_sink_sink_last;
assign bankmachine1_pipe_valid_sink_payload_we = bankmachine1_sink_sink_payload_we;
assign bankmachine1_pipe_valid_sink_payload_addr = bankmachine1_sink_sink_payload_addr;
assign bankmachine1_source_source_valid = bankmachine1_pipe_valid_source_valid;
assign bankmachine1_pipe_valid_source_ready = bankmachine1_source_source_ready;
assign bankmachine1_source_source_first = bankmachine1_pipe_valid_source_first;
assign bankmachine1_source_source_last = bankmachine1_pipe_valid_source_last;
assign bankmachine1_source_source_payload_we = bankmachine1_pipe_valid_source_payload_we;
assign bankmachine1_source_source_payload_addr = bankmachine1_pipe_valid_source_payload_addr;
always @(*) begin
    litedramcore_litedramcore_bankmachine1_next_state <= 3'd0;
    litedramcore_litedramcore_bankmachine1_next_state <= litedramcore_litedramcore_bankmachine1_state;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((bankmachine1_twtpcon_ready & bankmachine1_trascon_ready)) begin
                if (bankmachine1_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine1_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((bankmachine1_twtpcon_ready & bankmachine1_trascon_ready)) begin
                litedramcore_litedramcore_bankmachine1_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (bankmachine1_trccon_ready) begin
                if (bankmachine1_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine1_next_state <= 3'd6;
                end
            end
        end
        3'd4: begin
            if ((~bankmachine1_refresh_req)) begin
                litedramcore_litedramcore_bankmachine1_next_state <= 1'd0;
            end
        end
        3'd5: begin
            litedramcore_litedramcore_bankmachine1_next_state <= 2'd3;
        end
        3'd6: begin
            litedramcore_litedramcore_bankmachine1_next_state <= 1'd0;
        end
        default: begin
            if (bankmachine1_refresh_req) begin
                litedramcore_litedramcore_bankmachine1_next_state <= 3'd4;
            end else begin
                if (bankmachine1_source_source_valid) begin
                    if (bankmachine1_row_opened) begin
                        if (bankmachine1_row_hit) begin
                            if ((bankmachine1_cmd_ready & bankmachine1_auto_precharge)) begin
                                litedramcore_litedramcore_bankmachine1_next_state <= 2'd2;
                            end
                        end else begin
                            litedramcore_litedramcore_bankmachine1_next_state <= 1'd1;
                        end
                    end else begin
                        litedramcore_litedramcore_bankmachine1_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine1_cmd_payload_is_read <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine1_refresh_req) begin
            end else begin
                if (bankmachine1_source_source_valid) begin
                    if (bankmachine1_row_opened) begin
                        if (bankmachine1_row_hit) begin
                            if (bankmachine1_source_source_payload_we) begin
                            end else begin
                                bankmachine1_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine1_cmd_payload_is_write <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine1_refresh_req) begin
            end else begin
                if (bankmachine1_source_source_valid) begin
                    if (bankmachine1_row_opened) begin
                        if (bankmachine1_row_hit) begin
                            if (bankmachine1_source_source_payload_we) begin
                                bankmachine1_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine1_req_wdata_ready <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine1_refresh_req) begin
            end else begin
                if (bankmachine1_source_source_valid) begin
                    if (bankmachine1_row_opened) begin
                        if (bankmachine1_row_hit) begin
                            if (bankmachine1_source_source_payload_we) begin
                                bankmachine1_req_wdata_ready <= bankmachine1_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine1_req_rdata_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine1_refresh_req) begin
            end else begin
                if (bankmachine1_source_source_valid) begin
                    if (bankmachine1_row_opened) begin
                        if (bankmachine1_row_hit) begin
                            if (bankmachine1_source_source_payload_we) begin
                            end else begin
                                bankmachine1_req_rdata_valid <= bankmachine1_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine1_refresh_gnt <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (bankmachine1_twtpcon_ready) begin
                bankmachine1_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine1_row_open <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine1_trccon_ready) begin
                bankmachine1_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine1_cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((bankmachine1_twtpcon_ready & bankmachine1_trascon_ready)) begin
                bankmachine1_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine1_trccon_ready) begin
                bankmachine1_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine1_refresh_req) begin
            end else begin
                if (bankmachine1_source_source_valid) begin
                    if (bankmachine1_row_opened) begin
                        if (bankmachine1_row_hit) begin
                            bankmachine1_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine1_row_close <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            bankmachine1_row_close <= 1'd1;
        end
        2'd2: begin
            bankmachine1_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            bankmachine1_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine1_cmd_payload_ras <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((bankmachine1_twtpcon_ready & bankmachine1_trascon_ready)) begin
                bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine1_trccon_ready) begin
                bankmachine1_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine1_row_col_n_addr_sel <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine1_trccon_ready) begin
                bankmachine1_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine1_cmd_payload_cas <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine1_refresh_req) begin
            end else begin
                if (bankmachine1_source_source_valid) begin
                    if (bankmachine1_row_opened) begin
                        if (bankmachine1_row_hit) begin
                            bankmachine1_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine1_cmd_payload_we <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((bankmachine1_twtpcon_ready & bankmachine1_trascon_ready)) begin
                bankmachine1_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine1_refresh_req) begin
            end else begin
                if (bankmachine1_source_source_valid) begin
                    if (bankmachine1_row_opened) begin
                        if (bankmachine1_row_hit) begin
                            if (bankmachine1_source_source_payload_we) begin
                                bankmachine1_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine1_cmd_payload_is_cmd <= 1'd0;
    case (litedramcore_litedramcore_bankmachine1_state)
        1'd1: begin
            if ((bankmachine1_twtpcon_ready & bankmachine1_trascon_ready)) begin
                bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine1_trccon_ready) begin
                bankmachine1_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            bankmachine1_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign bankmachine2_sink_valid = bankmachine2_req_valid;
assign bankmachine2_req_ready = bankmachine2_sink_ready;
assign bankmachine2_sink_payload_we = bankmachine2_req_we;
assign bankmachine2_sink_payload_addr = bankmachine2_req_addr;
assign bankmachine2_sink_sink_valid = bankmachine2_source_valid;
assign bankmachine2_source_ready = bankmachine2_sink_sink_ready;
assign bankmachine2_sink_sink_first = bankmachine2_source_first;
assign bankmachine2_sink_sink_last = bankmachine2_source_last;
assign bankmachine2_sink_sink_payload_we = bankmachine2_source_payload_we;
assign bankmachine2_sink_sink_payload_addr = bankmachine2_source_payload_addr;
assign bankmachine2_source_source_ready = (bankmachine2_req_wdata_ready | bankmachine2_req_rdata_valid);
assign bankmachine2_req_lock = (bankmachine2_source_valid | bankmachine2_source_source_valid);
assign bankmachine2_row_hit = (bankmachine2_row == bankmachine2_source_source_payload_addr[20:7]);
assign bankmachine2_cmd_payload_ba = 2'd2;
always @(*) begin
    bankmachine2_cmd_payload_a <= 14'd0;
    if (bankmachine2_row_col_n_addr_sel) begin
        bankmachine2_cmd_payload_a <= bankmachine2_source_source_payload_addr[20:7];
    end else begin
        bankmachine2_cmd_payload_a <= ((bankmachine2_auto_precharge <<< 4'd10) | {bankmachine2_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign bankmachine2_twtpcon_valid = ((bankmachine2_cmd_valid & bankmachine2_cmd_ready) & bankmachine2_cmd_payload_is_write);
assign bankmachine2_trccon_valid = ((bankmachine2_cmd_valid & bankmachine2_cmd_ready) & bankmachine2_row_open);
assign bankmachine2_trascon_valid = ((bankmachine2_cmd_valid & bankmachine2_cmd_ready) & bankmachine2_row_open);
always @(*) begin
    bankmachine2_auto_precharge <= 1'd0;
    if ((bankmachine2_source_valid & bankmachine2_source_source_valid)) begin
        if ((bankmachine2_source_payload_addr[20:7] != bankmachine2_source_source_payload_addr[20:7])) begin
            bankmachine2_auto_precharge <= (bankmachine2_row_close == 1'd0);
        end
    end
end
assign bankmachine2_syncfifo2_din = {bankmachine2_fifo_in_last, bankmachine2_fifo_in_first, bankmachine2_fifo_in_payload_addr, bankmachine2_fifo_in_payload_we};
assign {bankmachine2_fifo_out_last, bankmachine2_fifo_out_first, bankmachine2_fifo_out_payload_addr, bankmachine2_fifo_out_payload_we} = bankmachine2_syncfifo2_dout;
assign {bankmachine2_fifo_out_last, bankmachine2_fifo_out_first, bankmachine2_fifo_out_payload_addr, bankmachine2_fifo_out_payload_we} = bankmachine2_syncfifo2_dout;
assign {bankmachine2_fifo_out_last, bankmachine2_fifo_out_first, bankmachine2_fifo_out_payload_addr, bankmachine2_fifo_out_payload_we} = bankmachine2_syncfifo2_dout;
assign {bankmachine2_fifo_out_last, bankmachine2_fifo_out_first, bankmachine2_fifo_out_payload_addr, bankmachine2_fifo_out_payload_we} = bankmachine2_syncfifo2_dout;
assign bankmachine2_sink_ready = bankmachine2_syncfifo2_writable;
assign bankmachine2_syncfifo2_we = bankmachine2_sink_valid;
assign bankmachine2_fifo_in_first = bankmachine2_sink_first;
assign bankmachine2_fifo_in_last = bankmachine2_sink_last;
assign bankmachine2_fifo_in_payload_we = bankmachine2_sink_payload_we;
assign bankmachine2_fifo_in_payload_addr = bankmachine2_sink_payload_addr;
assign bankmachine2_source_valid = bankmachine2_syncfifo2_readable;
assign bankmachine2_source_first = bankmachine2_fifo_out_first;
assign bankmachine2_source_last = bankmachine2_fifo_out_last;
assign bankmachine2_source_payload_we = bankmachine2_fifo_out_payload_we;
assign bankmachine2_source_payload_addr = bankmachine2_fifo_out_payload_addr;
assign bankmachine2_syncfifo2_re = bankmachine2_source_ready;
always @(*) begin
    bankmachine2_wrport_adr <= 4'd0;
    if (bankmachine2_replace) begin
        bankmachine2_wrport_adr <= (bankmachine2_produce - 1'd1);
    end else begin
        bankmachine2_wrport_adr <= bankmachine2_produce;
    end
end
assign bankmachine2_wrport_dat_w = bankmachine2_syncfifo2_din;
assign bankmachine2_wrport_we = (bankmachine2_syncfifo2_we & (bankmachine2_syncfifo2_writable | bankmachine2_replace));
assign bankmachine2_do_read = (bankmachine2_syncfifo2_readable & bankmachine2_syncfifo2_re);
assign bankmachine2_rdport_adr = bankmachine2_consume;
assign bankmachine2_syncfifo2_dout = bankmachine2_rdport_dat_r;
assign bankmachine2_syncfifo2_writable = (bankmachine2_level != 5'd16);
assign bankmachine2_syncfifo2_readable = (bankmachine2_level != 1'd0);
assign bankmachine2_pipe_valid_sink_ready = ((~bankmachine2_pipe_valid_source_valid) | bankmachine2_pipe_valid_source_ready);
assign bankmachine2_pipe_valid_sink_valid = bankmachine2_sink_sink_valid;
assign bankmachine2_sink_sink_ready = bankmachine2_pipe_valid_sink_ready;
assign bankmachine2_pipe_valid_sink_first = bankmachine2_sink_sink_first;
assign bankmachine2_pipe_valid_sink_last = bankmachine2_sink_sink_last;
assign bankmachine2_pipe_valid_sink_payload_we = bankmachine2_sink_sink_payload_we;
assign bankmachine2_pipe_valid_sink_payload_addr = bankmachine2_sink_sink_payload_addr;
assign bankmachine2_source_source_valid = bankmachine2_pipe_valid_source_valid;
assign bankmachine2_pipe_valid_source_ready = bankmachine2_source_source_ready;
assign bankmachine2_source_source_first = bankmachine2_pipe_valid_source_first;
assign bankmachine2_source_source_last = bankmachine2_pipe_valid_source_last;
assign bankmachine2_source_source_payload_we = bankmachine2_pipe_valid_source_payload_we;
assign bankmachine2_source_source_payload_addr = bankmachine2_pipe_valid_source_payload_addr;
always @(*) begin
    litedramcore_litedramcore_bankmachine2_next_state <= 3'd0;
    litedramcore_litedramcore_bankmachine2_next_state <= litedramcore_litedramcore_bankmachine2_state;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((bankmachine2_twtpcon_ready & bankmachine2_trascon_ready)) begin
                if (bankmachine2_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine2_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((bankmachine2_twtpcon_ready & bankmachine2_trascon_ready)) begin
                litedramcore_litedramcore_bankmachine2_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (bankmachine2_trccon_ready) begin
                if (bankmachine2_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine2_next_state <= 3'd6;
                end
            end
        end
        3'd4: begin
            if ((~bankmachine2_refresh_req)) begin
                litedramcore_litedramcore_bankmachine2_next_state <= 1'd0;
            end
        end
        3'd5: begin
            litedramcore_litedramcore_bankmachine2_next_state <= 2'd3;
        end
        3'd6: begin
            litedramcore_litedramcore_bankmachine2_next_state <= 1'd0;
        end
        default: begin
            if (bankmachine2_refresh_req) begin
                litedramcore_litedramcore_bankmachine2_next_state <= 3'd4;
            end else begin
                if (bankmachine2_source_source_valid) begin
                    if (bankmachine2_row_opened) begin
                        if (bankmachine2_row_hit) begin
                            if ((bankmachine2_cmd_ready & bankmachine2_auto_precharge)) begin
                                litedramcore_litedramcore_bankmachine2_next_state <= 2'd2;
                            end
                        end else begin
                            litedramcore_litedramcore_bankmachine2_next_state <= 1'd1;
                        end
                    end else begin
                        litedramcore_litedramcore_bankmachine2_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine2_refresh_gnt <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (bankmachine2_twtpcon_ready) begin
                bankmachine2_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine2_row_open <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine2_trccon_ready) begin
                bankmachine2_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine2_cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((bankmachine2_twtpcon_ready & bankmachine2_trascon_ready)) begin
                bankmachine2_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine2_trccon_ready) begin
                bankmachine2_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine2_refresh_req) begin
            end else begin
                if (bankmachine2_source_source_valid) begin
                    if (bankmachine2_row_opened) begin
                        if (bankmachine2_row_hit) begin
                            bankmachine2_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine2_row_close <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            bankmachine2_row_close <= 1'd1;
        end
        2'd2: begin
            bankmachine2_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            bankmachine2_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine2_row_col_n_addr_sel <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine2_trccon_ready) begin
                bankmachine2_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine2_cmd_payload_cas <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine2_refresh_req) begin
            end else begin
                if (bankmachine2_source_source_valid) begin
                    if (bankmachine2_row_opened) begin
                        if (bankmachine2_row_hit) begin
                            bankmachine2_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine2_cmd_payload_ras <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((bankmachine2_twtpcon_ready & bankmachine2_trascon_ready)) begin
                bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine2_trccon_ready) begin
                bankmachine2_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine2_cmd_payload_we <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((bankmachine2_twtpcon_ready & bankmachine2_trascon_ready)) begin
                bankmachine2_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine2_refresh_req) begin
            end else begin
                if (bankmachine2_source_source_valid) begin
                    if (bankmachine2_row_opened) begin
                        if (bankmachine2_row_hit) begin
                            if (bankmachine2_source_source_payload_we) begin
                                bankmachine2_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine2_cmd_payload_is_cmd <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
            if ((bankmachine2_twtpcon_ready & bankmachine2_trascon_ready)) begin
                bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine2_trccon_ready) begin
                bankmachine2_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            bankmachine2_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine2_cmd_payload_is_read <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine2_refresh_req) begin
            end else begin
                if (bankmachine2_source_source_valid) begin
                    if (bankmachine2_row_opened) begin
                        if (bankmachine2_row_hit) begin
                            if (bankmachine2_source_source_payload_we) begin
                            end else begin
                                bankmachine2_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine2_cmd_payload_is_write <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine2_refresh_req) begin
            end else begin
                if (bankmachine2_source_source_valid) begin
                    if (bankmachine2_row_opened) begin
                        if (bankmachine2_row_hit) begin
                            if (bankmachine2_source_source_payload_we) begin
                                bankmachine2_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine2_req_wdata_ready <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine2_refresh_req) begin
            end else begin
                if (bankmachine2_source_source_valid) begin
                    if (bankmachine2_row_opened) begin
                        if (bankmachine2_row_hit) begin
                            if (bankmachine2_source_source_payload_we) begin
                                bankmachine2_req_wdata_ready <= bankmachine2_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine2_req_rdata_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine2_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine2_refresh_req) begin
            end else begin
                if (bankmachine2_source_source_valid) begin
                    if (bankmachine2_row_opened) begin
                        if (bankmachine2_row_hit) begin
                            if (bankmachine2_source_source_payload_we) begin
                            end else begin
                                bankmachine2_req_rdata_valid <= bankmachine2_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
assign bankmachine3_sink_valid = bankmachine3_req_valid;
assign bankmachine3_req_ready = bankmachine3_sink_ready;
assign bankmachine3_sink_payload_we = bankmachine3_req_we;
assign bankmachine3_sink_payload_addr = bankmachine3_req_addr;
assign bankmachine3_sink_sink_valid = bankmachine3_source_valid;
assign bankmachine3_source_ready = bankmachine3_sink_sink_ready;
assign bankmachine3_sink_sink_first = bankmachine3_source_first;
assign bankmachine3_sink_sink_last = bankmachine3_source_last;
assign bankmachine3_sink_sink_payload_we = bankmachine3_source_payload_we;
assign bankmachine3_sink_sink_payload_addr = bankmachine3_source_payload_addr;
assign bankmachine3_source_source_ready = (bankmachine3_req_wdata_ready | bankmachine3_req_rdata_valid);
assign bankmachine3_req_lock = (bankmachine3_source_valid | bankmachine3_source_source_valid);
assign bankmachine3_row_hit = (bankmachine3_row == bankmachine3_source_source_payload_addr[20:7]);
assign bankmachine3_cmd_payload_ba = 2'd3;
always @(*) begin
    bankmachine3_cmd_payload_a <= 14'd0;
    if (bankmachine3_row_col_n_addr_sel) begin
        bankmachine3_cmd_payload_a <= bankmachine3_source_source_payload_addr[20:7];
    end else begin
        bankmachine3_cmd_payload_a <= ((bankmachine3_auto_precharge <<< 4'd10) | {bankmachine3_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign bankmachine3_twtpcon_valid = ((bankmachine3_cmd_valid & bankmachine3_cmd_ready) & bankmachine3_cmd_payload_is_write);
assign bankmachine3_trccon_valid = ((bankmachine3_cmd_valid & bankmachine3_cmd_ready) & bankmachine3_row_open);
assign bankmachine3_trascon_valid = ((bankmachine3_cmd_valid & bankmachine3_cmd_ready) & bankmachine3_row_open);
always @(*) begin
    bankmachine3_auto_precharge <= 1'd0;
    if ((bankmachine3_source_valid & bankmachine3_source_source_valid)) begin
        if ((bankmachine3_source_payload_addr[20:7] != bankmachine3_source_source_payload_addr[20:7])) begin
            bankmachine3_auto_precharge <= (bankmachine3_row_close == 1'd0);
        end
    end
end
assign bankmachine3_syncfifo3_din = {bankmachine3_fifo_in_last, bankmachine3_fifo_in_first, bankmachine3_fifo_in_payload_addr, bankmachine3_fifo_in_payload_we};
assign {bankmachine3_fifo_out_last, bankmachine3_fifo_out_first, bankmachine3_fifo_out_payload_addr, bankmachine3_fifo_out_payload_we} = bankmachine3_syncfifo3_dout;
assign {bankmachine3_fifo_out_last, bankmachine3_fifo_out_first, bankmachine3_fifo_out_payload_addr, bankmachine3_fifo_out_payload_we} = bankmachine3_syncfifo3_dout;
assign {bankmachine3_fifo_out_last, bankmachine3_fifo_out_first, bankmachine3_fifo_out_payload_addr, bankmachine3_fifo_out_payload_we} = bankmachine3_syncfifo3_dout;
assign {bankmachine3_fifo_out_last, bankmachine3_fifo_out_first, bankmachine3_fifo_out_payload_addr, bankmachine3_fifo_out_payload_we} = bankmachine3_syncfifo3_dout;
assign bankmachine3_sink_ready = bankmachine3_syncfifo3_writable;
assign bankmachine3_syncfifo3_we = bankmachine3_sink_valid;
assign bankmachine3_fifo_in_first = bankmachine3_sink_first;
assign bankmachine3_fifo_in_last = bankmachine3_sink_last;
assign bankmachine3_fifo_in_payload_we = bankmachine3_sink_payload_we;
assign bankmachine3_fifo_in_payload_addr = bankmachine3_sink_payload_addr;
assign bankmachine3_source_valid = bankmachine3_syncfifo3_readable;
assign bankmachine3_source_first = bankmachine3_fifo_out_first;
assign bankmachine3_source_last = bankmachine3_fifo_out_last;
assign bankmachine3_source_payload_we = bankmachine3_fifo_out_payload_we;
assign bankmachine3_source_payload_addr = bankmachine3_fifo_out_payload_addr;
assign bankmachine3_syncfifo3_re = bankmachine3_source_ready;
always @(*) begin
    bankmachine3_wrport_adr <= 4'd0;
    if (bankmachine3_replace) begin
        bankmachine3_wrport_adr <= (bankmachine3_produce - 1'd1);
    end else begin
        bankmachine3_wrport_adr <= bankmachine3_produce;
    end
end
assign bankmachine3_wrport_dat_w = bankmachine3_syncfifo3_din;
assign bankmachine3_wrport_we = (bankmachine3_syncfifo3_we & (bankmachine3_syncfifo3_writable | bankmachine3_replace));
assign bankmachine3_do_read = (bankmachine3_syncfifo3_readable & bankmachine3_syncfifo3_re);
assign bankmachine3_rdport_adr = bankmachine3_consume;
assign bankmachine3_syncfifo3_dout = bankmachine3_rdport_dat_r;
assign bankmachine3_syncfifo3_writable = (bankmachine3_level != 5'd16);
assign bankmachine3_syncfifo3_readable = (bankmachine3_level != 1'd0);
assign bankmachine3_pipe_valid_sink_ready = ((~bankmachine3_pipe_valid_source_valid) | bankmachine3_pipe_valid_source_ready);
assign bankmachine3_pipe_valid_sink_valid = bankmachine3_sink_sink_valid;
assign bankmachine3_sink_sink_ready = bankmachine3_pipe_valid_sink_ready;
assign bankmachine3_pipe_valid_sink_first = bankmachine3_sink_sink_first;
assign bankmachine3_pipe_valid_sink_last = bankmachine3_sink_sink_last;
assign bankmachine3_pipe_valid_sink_payload_we = bankmachine3_sink_sink_payload_we;
assign bankmachine3_pipe_valid_sink_payload_addr = bankmachine3_sink_sink_payload_addr;
assign bankmachine3_source_source_valid = bankmachine3_pipe_valid_source_valid;
assign bankmachine3_pipe_valid_source_ready = bankmachine3_source_source_ready;
assign bankmachine3_source_source_first = bankmachine3_pipe_valid_source_first;
assign bankmachine3_source_source_last = bankmachine3_pipe_valid_source_last;
assign bankmachine3_source_source_payload_we = bankmachine3_pipe_valid_source_payload_we;
assign bankmachine3_source_source_payload_addr = bankmachine3_pipe_valid_source_payload_addr;
always @(*) begin
    litedramcore_litedramcore_bankmachine3_next_state <= 3'd0;
    litedramcore_litedramcore_bankmachine3_next_state <= litedramcore_litedramcore_bankmachine3_state;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((bankmachine3_twtpcon_ready & bankmachine3_trascon_ready)) begin
                if (bankmachine3_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine3_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((bankmachine3_twtpcon_ready & bankmachine3_trascon_ready)) begin
                litedramcore_litedramcore_bankmachine3_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (bankmachine3_trccon_ready) begin
                if (bankmachine3_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine3_next_state <= 3'd6;
                end
            end
        end
        3'd4: begin
            if ((~bankmachine3_refresh_req)) begin
                litedramcore_litedramcore_bankmachine3_next_state <= 1'd0;
            end
        end
        3'd5: begin
            litedramcore_litedramcore_bankmachine3_next_state <= 2'd3;
        end
        3'd6: begin
            litedramcore_litedramcore_bankmachine3_next_state <= 1'd0;
        end
        default: begin
            if (bankmachine3_refresh_req) begin
                litedramcore_litedramcore_bankmachine3_next_state <= 3'd4;
            end else begin
                if (bankmachine3_source_source_valid) begin
                    if (bankmachine3_row_opened) begin
                        if (bankmachine3_row_hit) begin
                            if ((bankmachine3_cmd_ready & bankmachine3_auto_precharge)) begin
                                litedramcore_litedramcore_bankmachine3_next_state <= 2'd2;
                            end
                        end else begin
                            litedramcore_litedramcore_bankmachine3_next_state <= 1'd1;
                        end
                    end else begin
                        litedramcore_litedramcore_bankmachine3_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine3_row_col_n_addr_sel <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine3_trccon_ready) begin
                bankmachine3_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine3_cmd_payload_cas <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine3_refresh_req) begin
            end else begin
                if (bankmachine3_source_source_valid) begin
                    if (bankmachine3_row_opened) begin
                        if (bankmachine3_row_hit) begin
                            bankmachine3_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine3_cmd_payload_ras <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((bankmachine3_twtpcon_ready & bankmachine3_trascon_ready)) begin
                bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine3_trccon_ready) begin
                bankmachine3_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine3_cmd_payload_we <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((bankmachine3_twtpcon_ready & bankmachine3_trascon_ready)) begin
                bankmachine3_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine3_refresh_req) begin
            end else begin
                if (bankmachine3_source_source_valid) begin
                    if (bankmachine3_row_opened) begin
                        if (bankmachine3_row_hit) begin
                            if (bankmachine3_source_source_payload_we) begin
                                bankmachine3_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine3_cmd_payload_is_cmd <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((bankmachine3_twtpcon_ready & bankmachine3_trascon_ready)) begin
                bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine3_trccon_ready) begin
                bankmachine3_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            bankmachine3_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine3_cmd_payload_is_read <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine3_refresh_req) begin
            end else begin
                if (bankmachine3_source_source_valid) begin
                    if (bankmachine3_row_opened) begin
                        if (bankmachine3_row_hit) begin
                            if (bankmachine3_source_source_payload_we) begin
                            end else begin
                                bankmachine3_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine3_cmd_payload_is_write <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine3_refresh_req) begin
            end else begin
                if (bankmachine3_source_source_valid) begin
                    if (bankmachine3_row_opened) begin
                        if (bankmachine3_row_hit) begin
                            if (bankmachine3_source_source_payload_we) begin
                                bankmachine3_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine3_req_wdata_ready <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine3_refresh_req) begin
            end else begin
                if (bankmachine3_source_source_valid) begin
                    if (bankmachine3_row_opened) begin
                        if (bankmachine3_row_hit) begin
                            if (bankmachine3_source_source_payload_we) begin
                                bankmachine3_req_wdata_ready <= bankmachine3_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine3_req_rdata_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine3_refresh_req) begin
            end else begin
                if (bankmachine3_source_source_valid) begin
                    if (bankmachine3_row_opened) begin
                        if (bankmachine3_row_hit) begin
                            if (bankmachine3_source_source_payload_we) begin
                            end else begin
                                bankmachine3_req_rdata_valid <= bankmachine3_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine3_refresh_gnt <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (bankmachine3_twtpcon_ready) begin
                bankmachine3_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine3_row_open <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine3_trccon_ready) begin
                bankmachine3_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine3_cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            if ((bankmachine3_twtpcon_ready & bankmachine3_trascon_ready)) begin
                bankmachine3_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine3_trccon_ready) begin
                bankmachine3_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine3_refresh_req) begin
            end else begin
                if (bankmachine3_source_source_valid) begin
                    if (bankmachine3_row_opened) begin
                        if (bankmachine3_row_hit) begin
                            bankmachine3_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine3_row_close <= 1'd0;
    case (litedramcore_litedramcore_bankmachine3_state)
        1'd1: begin
            bankmachine3_row_close <= 1'd1;
        end
        2'd2: begin
            bankmachine3_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            bankmachine3_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign bankmachine4_sink_valid = bankmachine4_req_valid;
assign bankmachine4_req_ready = bankmachine4_sink_ready;
assign bankmachine4_sink_payload_we = bankmachine4_req_we;
assign bankmachine4_sink_payload_addr = bankmachine4_req_addr;
assign bankmachine4_sink_sink_valid = bankmachine4_source_valid;
assign bankmachine4_source_ready = bankmachine4_sink_sink_ready;
assign bankmachine4_sink_sink_first = bankmachine4_source_first;
assign bankmachine4_sink_sink_last = bankmachine4_source_last;
assign bankmachine4_sink_sink_payload_we = bankmachine4_source_payload_we;
assign bankmachine4_sink_sink_payload_addr = bankmachine4_source_payload_addr;
assign bankmachine4_source_source_ready = (bankmachine4_req_wdata_ready | bankmachine4_req_rdata_valid);
assign bankmachine4_req_lock = (bankmachine4_source_valid | bankmachine4_source_source_valid);
assign bankmachine4_row_hit = (bankmachine4_row == bankmachine4_source_source_payload_addr[20:7]);
assign bankmachine4_cmd_payload_ba = 3'd4;
always @(*) begin
    bankmachine4_cmd_payload_a <= 14'd0;
    if (bankmachine4_row_col_n_addr_sel) begin
        bankmachine4_cmd_payload_a <= bankmachine4_source_source_payload_addr[20:7];
    end else begin
        bankmachine4_cmd_payload_a <= ((bankmachine4_auto_precharge <<< 4'd10) | {bankmachine4_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign bankmachine4_twtpcon_valid = ((bankmachine4_cmd_valid & bankmachine4_cmd_ready) & bankmachine4_cmd_payload_is_write);
assign bankmachine4_trccon_valid = ((bankmachine4_cmd_valid & bankmachine4_cmd_ready) & bankmachine4_row_open);
assign bankmachine4_trascon_valid = ((bankmachine4_cmd_valid & bankmachine4_cmd_ready) & bankmachine4_row_open);
always @(*) begin
    bankmachine4_auto_precharge <= 1'd0;
    if ((bankmachine4_source_valid & bankmachine4_source_source_valid)) begin
        if ((bankmachine4_source_payload_addr[20:7] != bankmachine4_source_source_payload_addr[20:7])) begin
            bankmachine4_auto_precharge <= (bankmachine4_row_close == 1'd0);
        end
    end
end
assign bankmachine4_syncfifo4_din = {bankmachine4_fifo_in_last, bankmachine4_fifo_in_first, bankmachine4_fifo_in_payload_addr, bankmachine4_fifo_in_payload_we};
assign {bankmachine4_fifo_out_last, bankmachine4_fifo_out_first, bankmachine4_fifo_out_payload_addr, bankmachine4_fifo_out_payload_we} = bankmachine4_syncfifo4_dout;
assign {bankmachine4_fifo_out_last, bankmachine4_fifo_out_first, bankmachine4_fifo_out_payload_addr, bankmachine4_fifo_out_payload_we} = bankmachine4_syncfifo4_dout;
assign {bankmachine4_fifo_out_last, bankmachine4_fifo_out_first, bankmachine4_fifo_out_payload_addr, bankmachine4_fifo_out_payload_we} = bankmachine4_syncfifo4_dout;
assign {bankmachine4_fifo_out_last, bankmachine4_fifo_out_first, bankmachine4_fifo_out_payload_addr, bankmachine4_fifo_out_payload_we} = bankmachine4_syncfifo4_dout;
assign bankmachine4_sink_ready = bankmachine4_syncfifo4_writable;
assign bankmachine4_syncfifo4_we = bankmachine4_sink_valid;
assign bankmachine4_fifo_in_first = bankmachine4_sink_first;
assign bankmachine4_fifo_in_last = bankmachine4_sink_last;
assign bankmachine4_fifo_in_payload_we = bankmachine4_sink_payload_we;
assign bankmachine4_fifo_in_payload_addr = bankmachine4_sink_payload_addr;
assign bankmachine4_source_valid = bankmachine4_syncfifo4_readable;
assign bankmachine4_source_first = bankmachine4_fifo_out_first;
assign bankmachine4_source_last = bankmachine4_fifo_out_last;
assign bankmachine4_source_payload_we = bankmachine4_fifo_out_payload_we;
assign bankmachine4_source_payload_addr = bankmachine4_fifo_out_payload_addr;
assign bankmachine4_syncfifo4_re = bankmachine4_source_ready;
always @(*) begin
    bankmachine4_wrport_adr <= 4'd0;
    if (bankmachine4_replace) begin
        bankmachine4_wrport_adr <= (bankmachine4_produce - 1'd1);
    end else begin
        bankmachine4_wrport_adr <= bankmachine4_produce;
    end
end
assign bankmachine4_wrport_dat_w = bankmachine4_syncfifo4_din;
assign bankmachine4_wrport_we = (bankmachine4_syncfifo4_we & (bankmachine4_syncfifo4_writable | bankmachine4_replace));
assign bankmachine4_do_read = (bankmachine4_syncfifo4_readable & bankmachine4_syncfifo4_re);
assign bankmachine4_rdport_adr = bankmachine4_consume;
assign bankmachine4_syncfifo4_dout = bankmachine4_rdport_dat_r;
assign bankmachine4_syncfifo4_writable = (bankmachine4_level != 5'd16);
assign bankmachine4_syncfifo4_readable = (bankmachine4_level != 1'd0);
assign bankmachine4_pipe_valid_sink_ready = ((~bankmachine4_pipe_valid_source_valid) | bankmachine4_pipe_valid_source_ready);
assign bankmachine4_pipe_valid_sink_valid = bankmachine4_sink_sink_valid;
assign bankmachine4_sink_sink_ready = bankmachine4_pipe_valid_sink_ready;
assign bankmachine4_pipe_valid_sink_first = bankmachine4_sink_sink_first;
assign bankmachine4_pipe_valid_sink_last = bankmachine4_sink_sink_last;
assign bankmachine4_pipe_valid_sink_payload_we = bankmachine4_sink_sink_payload_we;
assign bankmachine4_pipe_valid_sink_payload_addr = bankmachine4_sink_sink_payload_addr;
assign bankmachine4_source_source_valid = bankmachine4_pipe_valid_source_valid;
assign bankmachine4_pipe_valid_source_ready = bankmachine4_source_source_ready;
assign bankmachine4_source_source_first = bankmachine4_pipe_valid_source_first;
assign bankmachine4_source_source_last = bankmachine4_pipe_valid_source_last;
assign bankmachine4_source_source_payload_we = bankmachine4_pipe_valid_source_payload_we;
assign bankmachine4_source_source_payload_addr = bankmachine4_pipe_valid_source_payload_addr;
always @(*) begin
    litedramcore_litedramcore_bankmachine4_next_state <= 3'd0;
    litedramcore_litedramcore_bankmachine4_next_state <= litedramcore_litedramcore_bankmachine4_state;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((bankmachine4_twtpcon_ready & bankmachine4_trascon_ready)) begin
                if (bankmachine4_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine4_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((bankmachine4_twtpcon_ready & bankmachine4_trascon_ready)) begin
                litedramcore_litedramcore_bankmachine4_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (bankmachine4_trccon_ready) begin
                if (bankmachine4_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine4_next_state <= 3'd6;
                end
            end
        end
        3'd4: begin
            if ((~bankmachine4_refresh_req)) begin
                litedramcore_litedramcore_bankmachine4_next_state <= 1'd0;
            end
        end
        3'd5: begin
            litedramcore_litedramcore_bankmachine4_next_state <= 2'd3;
        end
        3'd6: begin
            litedramcore_litedramcore_bankmachine4_next_state <= 1'd0;
        end
        default: begin
            if (bankmachine4_refresh_req) begin
                litedramcore_litedramcore_bankmachine4_next_state <= 3'd4;
            end else begin
                if (bankmachine4_source_source_valid) begin
                    if (bankmachine4_row_opened) begin
                        if (bankmachine4_row_hit) begin
                            if ((bankmachine4_cmd_ready & bankmachine4_auto_precharge)) begin
                                litedramcore_litedramcore_bankmachine4_next_state <= 2'd2;
                            end
                        end else begin
                            litedramcore_litedramcore_bankmachine4_next_state <= 1'd1;
                        end
                    end else begin
                        litedramcore_litedramcore_bankmachine4_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine4_cmd_payload_cas <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine4_refresh_req) begin
            end else begin
                if (bankmachine4_source_source_valid) begin
                    if (bankmachine4_row_opened) begin
                        if (bankmachine4_row_hit) begin
                            bankmachine4_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine4_cmd_payload_ras <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((bankmachine4_twtpcon_ready & bankmachine4_trascon_ready)) begin
                bankmachine4_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine4_trccon_ready) begin
                bankmachine4_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine4_cmd_payload_we <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((bankmachine4_twtpcon_ready & bankmachine4_trascon_ready)) begin
                bankmachine4_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine4_refresh_req) begin
            end else begin
                if (bankmachine4_source_source_valid) begin
                    if (bankmachine4_row_opened) begin
                        if (bankmachine4_row_hit) begin
                            if (bankmachine4_source_source_payload_we) begin
                                bankmachine4_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine4_cmd_payload_is_cmd <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((bankmachine4_twtpcon_ready & bankmachine4_trascon_ready)) begin
                bankmachine4_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine4_trccon_ready) begin
                bankmachine4_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            bankmachine4_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine4_cmd_payload_is_read <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine4_refresh_req) begin
            end else begin
                if (bankmachine4_source_source_valid) begin
                    if (bankmachine4_row_opened) begin
                        if (bankmachine4_row_hit) begin
                            if (bankmachine4_source_source_payload_we) begin
                            end else begin
                                bankmachine4_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine4_cmd_payload_is_write <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine4_refresh_req) begin
            end else begin
                if (bankmachine4_source_source_valid) begin
                    if (bankmachine4_row_opened) begin
                        if (bankmachine4_row_hit) begin
                            if (bankmachine4_source_source_payload_we) begin
                                bankmachine4_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine4_req_wdata_ready <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine4_refresh_req) begin
            end else begin
                if (bankmachine4_source_source_valid) begin
                    if (bankmachine4_row_opened) begin
                        if (bankmachine4_row_hit) begin
                            if (bankmachine4_source_source_payload_we) begin
                                bankmachine4_req_wdata_ready <= bankmachine4_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine4_req_rdata_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine4_refresh_req) begin
            end else begin
                if (bankmachine4_source_source_valid) begin
                    if (bankmachine4_row_opened) begin
                        if (bankmachine4_row_hit) begin
                            if (bankmachine4_source_source_payload_we) begin
                            end else begin
                                bankmachine4_req_rdata_valid <= bankmachine4_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine4_refresh_gnt <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (bankmachine4_twtpcon_ready) begin
                bankmachine4_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine4_row_open <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine4_trccon_ready) begin
                bankmachine4_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine4_cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            if ((bankmachine4_twtpcon_ready & bankmachine4_trascon_ready)) begin
                bankmachine4_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine4_trccon_ready) begin
                bankmachine4_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine4_refresh_req) begin
            end else begin
                if (bankmachine4_source_source_valid) begin
                    if (bankmachine4_row_opened) begin
                        if (bankmachine4_row_hit) begin
                            bankmachine4_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine4_row_close <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
            bankmachine4_row_close <= 1'd1;
        end
        2'd2: begin
            bankmachine4_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            bankmachine4_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine4_row_col_n_addr_sel <= 1'd0;
    case (litedramcore_litedramcore_bankmachine4_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine4_trccon_ready) begin
                bankmachine4_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign bankmachine5_sink_valid = bankmachine5_req_valid;
assign bankmachine5_req_ready = bankmachine5_sink_ready;
assign bankmachine5_sink_payload_we = bankmachine5_req_we;
assign bankmachine5_sink_payload_addr = bankmachine5_req_addr;
assign bankmachine5_sink_sink_valid = bankmachine5_source_valid;
assign bankmachine5_source_ready = bankmachine5_sink_sink_ready;
assign bankmachine5_sink_sink_first = bankmachine5_source_first;
assign bankmachine5_sink_sink_last = bankmachine5_source_last;
assign bankmachine5_sink_sink_payload_we = bankmachine5_source_payload_we;
assign bankmachine5_sink_sink_payload_addr = bankmachine5_source_payload_addr;
assign bankmachine5_source_source_ready = (bankmachine5_req_wdata_ready | bankmachine5_req_rdata_valid);
assign bankmachine5_req_lock = (bankmachine5_source_valid | bankmachine5_source_source_valid);
assign bankmachine5_row_hit = (bankmachine5_row == bankmachine5_source_source_payload_addr[20:7]);
assign bankmachine5_cmd_payload_ba = 3'd5;
always @(*) begin
    bankmachine5_cmd_payload_a <= 14'd0;
    if (bankmachine5_row_col_n_addr_sel) begin
        bankmachine5_cmd_payload_a <= bankmachine5_source_source_payload_addr[20:7];
    end else begin
        bankmachine5_cmd_payload_a <= ((bankmachine5_auto_precharge <<< 4'd10) | {bankmachine5_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign bankmachine5_twtpcon_valid = ((bankmachine5_cmd_valid & bankmachine5_cmd_ready) & bankmachine5_cmd_payload_is_write);
assign bankmachine5_trccon_valid = ((bankmachine5_cmd_valid & bankmachine5_cmd_ready) & bankmachine5_row_open);
assign bankmachine5_trascon_valid = ((bankmachine5_cmd_valid & bankmachine5_cmd_ready) & bankmachine5_row_open);
always @(*) begin
    bankmachine5_auto_precharge <= 1'd0;
    if ((bankmachine5_source_valid & bankmachine5_source_source_valid)) begin
        if ((bankmachine5_source_payload_addr[20:7] != bankmachine5_source_source_payload_addr[20:7])) begin
            bankmachine5_auto_precharge <= (bankmachine5_row_close == 1'd0);
        end
    end
end
assign bankmachine5_syncfifo5_din = {bankmachine5_fifo_in_last, bankmachine5_fifo_in_first, bankmachine5_fifo_in_payload_addr, bankmachine5_fifo_in_payload_we};
assign {bankmachine5_fifo_out_last, bankmachine5_fifo_out_first, bankmachine5_fifo_out_payload_addr, bankmachine5_fifo_out_payload_we} = bankmachine5_syncfifo5_dout;
assign {bankmachine5_fifo_out_last, bankmachine5_fifo_out_first, bankmachine5_fifo_out_payload_addr, bankmachine5_fifo_out_payload_we} = bankmachine5_syncfifo5_dout;
assign {bankmachine5_fifo_out_last, bankmachine5_fifo_out_first, bankmachine5_fifo_out_payload_addr, bankmachine5_fifo_out_payload_we} = bankmachine5_syncfifo5_dout;
assign {bankmachine5_fifo_out_last, bankmachine5_fifo_out_first, bankmachine5_fifo_out_payload_addr, bankmachine5_fifo_out_payload_we} = bankmachine5_syncfifo5_dout;
assign bankmachine5_sink_ready = bankmachine5_syncfifo5_writable;
assign bankmachine5_syncfifo5_we = bankmachine5_sink_valid;
assign bankmachine5_fifo_in_first = bankmachine5_sink_first;
assign bankmachine5_fifo_in_last = bankmachine5_sink_last;
assign bankmachine5_fifo_in_payload_we = bankmachine5_sink_payload_we;
assign bankmachine5_fifo_in_payload_addr = bankmachine5_sink_payload_addr;
assign bankmachine5_source_valid = bankmachine5_syncfifo5_readable;
assign bankmachine5_source_first = bankmachine5_fifo_out_first;
assign bankmachine5_source_last = bankmachine5_fifo_out_last;
assign bankmachine5_source_payload_we = bankmachine5_fifo_out_payload_we;
assign bankmachine5_source_payload_addr = bankmachine5_fifo_out_payload_addr;
assign bankmachine5_syncfifo5_re = bankmachine5_source_ready;
always @(*) begin
    bankmachine5_wrport_adr <= 4'd0;
    if (bankmachine5_replace) begin
        bankmachine5_wrport_adr <= (bankmachine5_produce - 1'd1);
    end else begin
        bankmachine5_wrport_adr <= bankmachine5_produce;
    end
end
assign bankmachine5_wrport_dat_w = bankmachine5_syncfifo5_din;
assign bankmachine5_wrport_we = (bankmachine5_syncfifo5_we & (bankmachine5_syncfifo5_writable | bankmachine5_replace));
assign bankmachine5_do_read = (bankmachine5_syncfifo5_readable & bankmachine5_syncfifo5_re);
assign bankmachine5_rdport_adr = bankmachine5_consume;
assign bankmachine5_syncfifo5_dout = bankmachine5_rdport_dat_r;
assign bankmachine5_syncfifo5_writable = (bankmachine5_level != 5'd16);
assign bankmachine5_syncfifo5_readable = (bankmachine5_level != 1'd0);
assign bankmachine5_pipe_valid_sink_ready = ((~bankmachine5_pipe_valid_source_valid) | bankmachine5_pipe_valid_source_ready);
assign bankmachine5_pipe_valid_sink_valid = bankmachine5_sink_sink_valid;
assign bankmachine5_sink_sink_ready = bankmachine5_pipe_valid_sink_ready;
assign bankmachine5_pipe_valid_sink_first = bankmachine5_sink_sink_first;
assign bankmachine5_pipe_valid_sink_last = bankmachine5_sink_sink_last;
assign bankmachine5_pipe_valid_sink_payload_we = bankmachine5_sink_sink_payload_we;
assign bankmachine5_pipe_valid_sink_payload_addr = bankmachine5_sink_sink_payload_addr;
assign bankmachine5_source_source_valid = bankmachine5_pipe_valid_source_valid;
assign bankmachine5_pipe_valid_source_ready = bankmachine5_source_source_ready;
assign bankmachine5_source_source_first = bankmachine5_pipe_valid_source_first;
assign bankmachine5_source_source_last = bankmachine5_pipe_valid_source_last;
assign bankmachine5_source_source_payload_we = bankmachine5_pipe_valid_source_payload_we;
assign bankmachine5_source_source_payload_addr = bankmachine5_pipe_valid_source_payload_addr;
always @(*) begin
    litedramcore_litedramcore_bankmachine5_next_state <= 3'd0;
    litedramcore_litedramcore_bankmachine5_next_state <= litedramcore_litedramcore_bankmachine5_state;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((bankmachine5_twtpcon_ready & bankmachine5_trascon_ready)) begin
                if (bankmachine5_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine5_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((bankmachine5_twtpcon_ready & bankmachine5_trascon_ready)) begin
                litedramcore_litedramcore_bankmachine5_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (bankmachine5_trccon_ready) begin
                if (bankmachine5_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine5_next_state <= 3'd6;
                end
            end
        end
        3'd4: begin
            if ((~bankmachine5_refresh_req)) begin
                litedramcore_litedramcore_bankmachine5_next_state <= 1'd0;
            end
        end
        3'd5: begin
            litedramcore_litedramcore_bankmachine5_next_state <= 2'd3;
        end
        3'd6: begin
            litedramcore_litedramcore_bankmachine5_next_state <= 1'd0;
        end
        default: begin
            if (bankmachine5_refresh_req) begin
                litedramcore_litedramcore_bankmachine5_next_state <= 3'd4;
            end else begin
                if (bankmachine5_source_source_valid) begin
                    if (bankmachine5_row_opened) begin
                        if (bankmachine5_row_hit) begin
                            if ((bankmachine5_cmd_ready & bankmachine5_auto_precharge)) begin
                                litedramcore_litedramcore_bankmachine5_next_state <= 2'd2;
                            end
                        end else begin
                            litedramcore_litedramcore_bankmachine5_next_state <= 1'd1;
                        end
                    end else begin
                        litedramcore_litedramcore_bankmachine5_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine5_cmd_payload_is_read <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine5_refresh_req) begin
            end else begin
                if (bankmachine5_source_source_valid) begin
                    if (bankmachine5_row_opened) begin
                        if (bankmachine5_row_hit) begin
                            if (bankmachine5_source_source_payload_we) begin
                            end else begin
                                bankmachine5_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine5_cmd_payload_is_write <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine5_refresh_req) begin
            end else begin
                if (bankmachine5_source_source_valid) begin
                    if (bankmachine5_row_opened) begin
                        if (bankmachine5_row_hit) begin
                            if (bankmachine5_source_source_payload_we) begin
                                bankmachine5_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine5_req_wdata_ready <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine5_refresh_req) begin
            end else begin
                if (bankmachine5_source_source_valid) begin
                    if (bankmachine5_row_opened) begin
                        if (bankmachine5_row_hit) begin
                            if (bankmachine5_source_source_payload_we) begin
                                bankmachine5_req_wdata_ready <= bankmachine5_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine5_req_rdata_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine5_refresh_req) begin
            end else begin
                if (bankmachine5_source_source_valid) begin
                    if (bankmachine5_row_opened) begin
                        if (bankmachine5_row_hit) begin
                            if (bankmachine5_source_source_payload_we) begin
                            end else begin
                                bankmachine5_req_rdata_valid <= bankmachine5_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine5_row_open <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine5_trccon_ready) begin
                bankmachine5_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine5_cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((bankmachine5_twtpcon_ready & bankmachine5_trascon_ready)) begin
                bankmachine5_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine5_trccon_ready) begin
                bankmachine5_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine5_refresh_req) begin
            end else begin
                if (bankmachine5_source_source_valid) begin
                    if (bankmachine5_row_opened) begin
                        if (bankmachine5_row_hit) begin
                            bankmachine5_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine5_row_close <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            bankmachine5_row_close <= 1'd1;
        end
        2'd2: begin
            bankmachine5_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            bankmachine5_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine5_refresh_gnt <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (bankmachine5_twtpcon_ready) begin
                bankmachine5_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine5_row_col_n_addr_sel <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine5_trccon_ready) begin
                bankmachine5_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine5_cmd_payload_cas <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine5_refresh_req) begin
            end else begin
                if (bankmachine5_source_source_valid) begin
                    if (bankmachine5_row_opened) begin
                        if (bankmachine5_row_hit) begin
                            bankmachine5_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine5_cmd_payload_ras <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((bankmachine5_twtpcon_ready & bankmachine5_trascon_ready)) begin
                bankmachine5_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine5_trccon_ready) begin
                bankmachine5_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine5_cmd_payload_we <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((bankmachine5_twtpcon_ready & bankmachine5_trascon_ready)) begin
                bankmachine5_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine5_refresh_req) begin
            end else begin
                if (bankmachine5_source_source_valid) begin
                    if (bankmachine5_row_opened) begin
                        if (bankmachine5_row_hit) begin
                            if (bankmachine5_source_source_payload_we) begin
                                bankmachine5_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine5_cmd_payload_is_cmd <= 1'd0;
    case (litedramcore_litedramcore_bankmachine5_state)
        1'd1: begin
            if ((bankmachine5_twtpcon_ready & bankmachine5_trascon_ready)) begin
                bankmachine5_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine5_trccon_ready) begin
                bankmachine5_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            bankmachine5_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign bankmachine6_sink_valid = bankmachine6_req_valid;
assign bankmachine6_req_ready = bankmachine6_sink_ready;
assign bankmachine6_sink_payload_we = bankmachine6_req_we;
assign bankmachine6_sink_payload_addr = bankmachine6_req_addr;
assign bankmachine6_sink_sink_valid = bankmachine6_source_valid;
assign bankmachine6_source_ready = bankmachine6_sink_sink_ready;
assign bankmachine6_sink_sink_first = bankmachine6_source_first;
assign bankmachine6_sink_sink_last = bankmachine6_source_last;
assign bankmachine6_sink_sink_payload_we = bankmachine6_source_payload_we;
assign bankmachine6_sink_sink_payload_addr = bankmachine6_source_payload_addr;
assign bankmachine6_source_source_ready = (bankmachine6_req_wdata_ready | bankmachine6_req_rdata_valid);
assign bankmachine6_req_lock = (bankmachine6_source_valid | bankmachine6_source_source_valid);
assign bankmachine6_row_hit = (bankmachine6_row == bankmachine6_source_source_payload_addr[20:7]);
assign bankmachine6_cmd_payload_ba = 3'd6;
always @(*) begin
    bankmachine6_cmd_payload_a <= 14'd0;
    if (bankmachine6_row_col_n_addr_sel) begin
        bankmachine6_cmd_payload_a <= bankmachine6_source_source_payload_addr[20:7];
    end else begin
        bankmachine6_cmd_payload_a <= ((bankmachine6_auto_precharge <<< 4'd10) | {bankmachine6_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign bankmachine6_twtpcon_valid = ((bankmachine6_cmd_valid & bankmachine6_cmd_ready) & bankmachine6_cmd_payload_is_write);
assign bankmachine6_trccon_valid = ((bankmachine6_cmd_valid & bankmachine6_cmd_ready) & bankmachine6_row_open);
assign bankmachine6_trascon_valid = ((bankmachine6_cmd_valid & bankmachine6_cmd_ready) & bankmachine6_row_open);
always @(*) begin
    bankmachine6_auto_precharge <= 1'd0;
    if ((bankmachine6_source_valid & bankmachine6_source_source_valid)) begin
        if ((bankmachine6_source_payload_addr[20:7] != bankmachine6_source_source_payload_addr[20:7])) begin
            bankmachine6_auto_precharge <= (bankmachine6_row_close == 1'd0);
        end
    end
end
assign bankmachine6_syncfifo6_din = {bankmachine6_fifo_in_last, bankmachine6_fifo_in_first, bankmachine6_fifo_in_payload_addr, bankmachine6_fifo_in_payload_we};
assign {bankmachine6_fifo_out_last, bankmachine6_fifo_out_first, bankmachine6_fifo_out_payload_addr, bankmachine6_fifo_out_payload_we} = bankmachine6_syncfifo6_dout;
assign {bankmachine6_fifo_out_last, bankmachine6_fifo_out_first, bankmachine6_fifo_out_payload_addr, bankmachine6_fifo_out_payload_we} = bankmachine6_syncfifo6_dout;
assign {bankmachine6_fifo_out_last, bankmachine6_fifo_out_first, bankmachine6_fifo_out_payload_addr, bankmachine6_fifo_out_payload_we} = bankmachine6_syncfifo6_dout;
assign {bankmachine6_fifo_out_last, bankmachine6_fifo_out_first, bankmachine6_fifo_out_payload_addr, bankmachine6_fifo_out_payload_we} = bankmachine6_syncfifo6_dout;
assign bankmachine6_sink_ready = bankmachine6_syncfifo6_writable;
assign bankmachine6_syncfifo6_we = bankmachine6_sink_valid;
assign bankmachine6_fifo_in_first = bankmachine6_sink_first;
assign bankmachine6_fifo_in_last = bankmachine6_sink_last;
assign bankmachine6_fifo_in_payload_we = bankmachine6_sink_payload_we;
assign bankmachine6_fifo_in_payload_addr = bankmachine6_sink_payload_addr;
assign bankmachine6_source_valid = bankmachine6_syncfifo6_readable;
assign bankmachine6_source_first = bankmachine6_fifo_out_first;
assign bankmachine6_source_last = bankmachine6_fifo_out_last;
assign bankmachine6_source_payload_we = bankmachine6_fifo_out_payload_we;
assign bankmachine6_source_payload_addr = bankmachine6_fifo_out_payload_addr;
assign bankmachine6_syncfifo6_re = bankmachine6_source_ready;
always @(*) begin
    bankmachine6_wrport_adr <= 4'd0;
    if (bankmachine6_replace) begin
        bankmachine6_wrport_adr <= (bankmachine6_produce - 1'd1);
    end else begin
        bankmachine6_wrport_adr <= bankmachine6_produce;
    end
end
assign bankmachine6_wrport_dat_w = bankmachine6_syncfifo6_din;
assign bankmachine6_wrport_we = (bankmachine6_syncfifo6_we & (bankmachine6_syncfifo6_writable | bankmachine6_replace));
assign bankmachine6_do_read = (bankmachine6_syncfifo6_readable & bankmachine6_syncfifo6_re);
assign bankmachine6_rdport_adr = bankmachine6_consume;
assign bankmachine6_syncfifo6_dout = bankmachine6_rdport_dat_r;
assign bankmachine6_syncfifo6_writable = (bankmachine6_level != 5'd16);
assign bankmachine6_syncfifo6_readable = (bankmachine6_level != 1'd0);
assign bankmachine6_pipe_valid_sink_ready = ((~bankmachine6_pipe_valid_source_valid) | bankmachine6_pipe_valid_source_ready);
assign bankmachine6_pipe_valid_sink_valid = bankmachine6_sink_sink_valid;
assign bankmachine6_sink_sink_ready = bankmachine6_pipe_valid_sink_ready;
assign bankmachine6_pipe_valid_sink_first = bankmachine6_sink_sink_first;
assign bankmachine6_pipe_valid_sink_last = bankmachine6_sink_sink_last;
assign bankmachine6_pipe_valid_sink_payload_we = bankmachine6_sink_sink_payload_we;
assign bankmachine6_pipe_valid_sink_payload_addr = bankmachine6_sink_sink_payload_addr;
assign bankmachine6_source_source_valid = bankmachine6_pipe_valid_source_valid;
assign bankmachine6_pipe_valid_source_ready = bankmachine6_source_source_ready;
assign bankmachine6_source_source_first = bankmachine6_pipe_valid_source_first;
assign bankmachine6_source_source_last = bankmachine6_pipe_valid_source_last;
assign bankmachine6_source_source_payload_we = bankmachine6_pipe_valid_source_payload_we;
assign bankmachine6_source_source_payload_addr = bankmachine6_pipe_valid_source_payload_addr;
always @(*) begin
    litedramcore_litedramcore_bankmachine6_next_state <= 3'd0;
    litedramcore_litedramcore_bankmachine6_next_state <= litedramcore_litedramcore_bankmachine6_state;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((bankmachine6_twtpcon_ready & bankmachine6_trascon_ready)) begin
                if (bankmachine6_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine6_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((bankmachine6_twtpcon_ready & bankmachine6_trascon_ready)) begin
                litedramcore_litedramcore_bankmachine6_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (bankmachine6_trccon_ready) begin
                if (bankmachine6_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine6_next_state <= 3'd6;
                end
            end
        end
        3'd4: begin
            if ((~bankmachine6_refresh_req)) begin
                litedramcore_litedramcore_bankmachine6_next_state <= 1'd0;
            end
        end
        3'd5: begin
            litedramcore_litedramcore_bankmachine6_next_state <= 2'd3;
        end
        3'd6: begin
            litedramcore_litedramcore_bankmachine6_next_state <= 1'd0;
        end
        default: begin
            if (bankmachine6_refresh_req) begin
                litedramcore_litedramcore_bankmachine6_next_state <= 3'd4;
            end else begin
                if (bankmachine6_source_source_valid) begin
                    if (bankmachine6_row_opened) begin
                        if (bankmachine6_row_hit) begin
                            if ((bankmachine6_cmd_ready & bankmachine6_auto_precharge)) begin
                                litedramcore_litedramcore_bankmachine6_next_state <= 2'd2;
                            end
                        end else begin
                            litedramcore_litedramcore_bankmachine6_next_state <= 1'd1;
                        end
                    end else begin
                        litedramcore_litedramcore_bankmachine6_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine6_refresh_gnt <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (bankmachine6_twtpcon_ready) begin
                bankmachine6_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine6_row_open <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine6_trccon_ready) begin
                bankmachine6_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine6_cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((bankmachine6_twtpcon_ready & bankmachine6_trascon_ready)) begin
                bankmachine6_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine6_trccon_ready) begin
                bankmachine6_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine6_refresh_req) begin
            end else begin
                if (bankmachine6_source_source_valid) begin
                    if (bankmachine6_row_opened) begin
                        if (bankmachine6_row_hit) begin
                            bankmachine6_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine6_row_close <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            bankmachine6_row_close <= 1'd1;
        end
        2'd2: begin
            bankmachine6_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            bankmachine6_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine6_row_col_n_addr_sel <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine6_trccon_ready) begin
                bankmachine6_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine6_cmd_payload_cas <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine6_refresh_req) begin
            end else begin
                if (bankmachine6_source_source_valid) begin
                    if (bankmachine6_row_opened) begin
                        if (bankmachine6_row_hit) begin
                            bankmachine6_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine6_cmd_payload_ras <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((bankmachine6_twtpcon_ready & bankmachine6_trascon_ready)) begin
                bankmachine6_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine6_trccon_ready) begin
                bankmachine6_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine6_cmd_payload_we <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((bankmachine6_twtpcon_ready & bankmachine6_trascon_ready)) begin
                bankmachine6_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine6_refresh_req) begin
            end else begin
                if (bankmachine6_source_source_valid) begin
                    if (bankmachine6_row_opened) begin
                        if (bankmachine6_row_hit) begin
                            if (bankmachine6_source_source_payload_we) begin
                                bankmachine6_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine6_cmd_payload_is_cmd <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
            if ((bankmachine6_twtpcon_ready & bankmachine6_trascon_ready)) begin
                bankmachine6_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine6_trccon_ready) begin
                bankmachine6_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            bankmachine6_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine6_cmd_payload_is_read <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine6_refresh_req) begin
            end else begin
                if (bankmachine6_source_source_valid) begin
                    if (bankmachine6_row_opened) begin
                        if (bankmachine6_row_hit) begin
                            if (bankmachine6_source_source_payload_we) begin
                            end else begin
                                bankmachine6_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine6_cmd_payload_is_write <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine6_refresh_req) begin
            end else begin
                if (bankmachine6_source_source_valid) begin
                    if (bankmachine6_row_opened) begin
                        if (bankmachine6_row_hit) begin
                            if (bankmachine6_source_source_payload_we) begin
                                bankmachine6_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine6_req_wdata_ready <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine6_refresh_req) begin
            end else begin
                if (bankmachine6_source_source_valid) begin
                    if (bankmachine6_row_opened) begin
                        if (bankmachine6_row_hit) begin
                            if (bankmachine6_source_source_payload_we) begin
                                bankmachine6_req_wdata_ready <= bankmachine6_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine6_req_rdata_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine6_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine6_refresh_req) begin
            end else begin
                if (bankmachine6_source_source_valid) begin
                    if (bankmachine6_row_opened) begin
                        if (bankmachine6_row_hit) begin
                            if (bankmachine6_source_source_payload_we) begin
                            end else begin
                                bankmachine6_req_rdata_valid <= bankmachine6_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
assign bankmachine7_sink_valid = bankmachine7_req_valid;
assign bankmachine7_req_ready = bankmachine7_sink_ready;
assign bankmachine7_sink_payload_we = bankmachine7_req_we;
assign bankmachine7_sink_payload_addr = bankmachine7_req_addr;
assign bankmachine7_sink_sink_valid = bankmachine7_source_valid;
assign bankmachine7_source_ready = bankmachine7_sink_sink_ready;
assign bankmachine7_sink_sink_first = bankmachine7_source_first;
assign bankmachine7_sink_sink_last = bankmachine7_source_last;
assign bankmachine7_sink_sink_payload_we = bankmachine7_source_payload_we;
assign bankmachine7_sink_sink_payload_addr = bankmachine7_source_payload_addr;
assign bankmachine7_source_source_ready = (bankmachine7_req_wdata_ready | bankmachine7_req_rdata_valid);
assign bankmachine7_req_lock = (bankmachine7_source_valid | bankmachine7_source_source_valid);
assign bankmachine7_row_hit = (bankmachine7_row == bankmachine7_source_source_payload_addr[20:7]);
assign bankmachine7_cmd_payload_ba = 3'd7;
always @(*) begin
    bankmachine7_cmd_payload_a <= 14'd0;
    if (bankmachine7_row_col_n_addr_sel) begin
        bankmachine7_cmd_payload_a <= bankmachine7_source_source_payload_addr[20:7];
    end else begin
        bankmachine7_cmd_payload_a <= ((bankmachine7_auto_precharge <<< 4'd10) | {bankmachine7_source_source_payload_addr[6:0], {3{1'd0}}});
    end
end
assign bankmachine7_twtpcon_valid = ((bankmachine7_cmd_valid & bankmachine7_cmd_ready) & bankmachine7_cmd_payload_is_write);
assign bankmachine7_trccon_valid = ((bankmachine7_cmd_valid & bankmachine7_cmd_ready) & bankmachine7_row_open);
assign bankmachine7_trascon_valid = ((bankmachine7_cmd_valid & bankmachine7_cmd_ready) & bankmachine7_row_open);
always @(*) begin
    bankmachine7_auto_precharge <= 1'd0;
    if ((bankmachine7_source_valid & bankmachine7_source_source_valid)) begin
        if ((bankmachine7_source_payload_addr[20:7] != bankmachine7_source_source_payload_addr[20:7])) begin
            bankmachine7_auto_precharge <= (bankmachine7_row_close == 1'd0);
        end
    end
end
assign bankmachine7_syncfifo7_din = {bankmachine7_fifo_in_last, bankmachine7_fifo_in_first, bankmachine7_fifo_in_payload_addr, bankmachine7_fifo_in_payload_we};
assign {bankmachine7_fifo_out_last, bankmachine7_fifo_out_first, bankmachine7_fifo_out_payload_addr, bankmachine7_fifo_out_payload_we} = bankmachine7_syncfifo7_dout;
assign {bankmachine7_fifo_out_last, bankmachine7_fifo_out_first, bankmachine7_fifo_out_payload_addr, bankmachine7_fifo_out_payload_we} = bankmachine7_syncfifo7_dout;
assign {bankmachine7_fifo_out_last, bankmachine7_fifo_out_first, bankmachine7_fifo_out_payload_addr, bankmachine7_fifo_out_payload_we} = bankmachine7_syncfifo7_dout;
assign {bankmachine7_fifo_out_last, bankmachine7_fifo_out_first, bankmachine7_fifo_out_payload_addr, bankmachine7_fifo_out_payload_we} = bankmachine7_syncfifo7_dout;
assign bankmachine7_sink_ready = bankmachine7_syncfifo7_writable;
assign bankmachine7_syncfifo7_we = bankmachine7_sink_valid;
assign bankmachine7_fifo_in_first = bankmachine7_sink_first;
assign bankmachine7_fifo_in_last = bankmachine7_sink_last;
assign bankmachine7_fifo_in_payload_we = bankmachine7_sink_payload_we;
assign bankmachine7_fifo_in_payload_addr = bankmachine7_sink_payload_addr;
assign bankmachine7_source_valid = bankmachine7_syncfifo7_readable;
assign bankmachine7_source_first = bankmachine7_fifo_out_first;
assign bankmachine7_source_last = bankmachine7_fifo_out_last;
assign bankmachine7_source_payload_we = bankmachine7_fifo_out_payload_we;
assign bankmachine7_source_payload_addr = bankmachine7_fifo_out_payload_addr;
assign bankmachine7_syncfifo7_re = bankmachine7_source_ready;
always @(*) begin
    bankmachine7_wrport_adr <= 4'd0;
    if (bankmachine7_replace) begin
        bankmachine7_wrport_adr <= (bankmachine7_produce - 1'd1);
    end else begin
        bankmachine7_wrport_adr <= bankmachine7_produce;
    end
end
assign bankmachine7_wrport_dat_w = bankmachine7_syncfifo7_din;
assign bankmachine7_wrport_we = (bankmachine7_syncfifo7_we & (bankmachine7_syncfifo7_writable | bankmachine7_replace));
assign bankmachine7_do_read = (bankmachine7_syncfifo7_readable & bankmachine7_syncfifo7_re);
assign bankmachine7_rdport_adr = bankmachine7_consume;
assign bankmachine7_syncfifo7_dout = bankmachine7_rdport_dat_r;
assign bankmachine7_syncfifo7_writable = (bankmachine7_level != 5'd16);
assign bankmachine7_syncfifo7_readable = (bankmachine7_level != 1'd0);
assign bankmachine7_pipe_valid_sink_ready = ((~bankmachine7_pipe_valid_source_valid) | bankmachine7_pipe_valid_source_ready);
assign bankmachine7_pipe_valid_sink_valid = bankmachine7_sink_sink_valid;
assign bankmachine7_sink_sink_ready = bankmachine7_pipe_valid_sink_ready;
assign bankmachine7_pipe_valid_sink_first = bankmachine7_sink_sink_first;
assign bankmachine7_pipe_valid_sink_last = bankmachine7_sink_sink_last;
assign bankmachine7_pipe_valid_sink_payload_we = bankmachine7_sink_sink_payload_we;
assign bankmachine7_pipe_valid_sink_payload_addr = bankmachine7_sink_sink_payload_addr;
assign bankmachine7_source_source_valid = bankmachine7_pipe_valid_source_valid;
assign bankmachine7_pipe_valid_source_ready = bankmachine7_source_source_ready;
assign bankmachine7_source_source_first = bankmachine7_pipe_valid_source_first;
assign bankmachine7_source_source_last = bankmachine7_pipe_valid_source_last;
assign bankmachine7_source_source_payload_we = bankmachine7_pipe_valid_source_payload_we;
assign bankmachine7_source_source_payload_addr = bankmachine7_pipe_valid_source_payload_addr;
always @(*) begin
    litedramcore_litedramcore_bankmachine7_next_state <= 3'd0;
    litedramcore_litedramcore_bankmachine7_next_state <= litedramcore_litedramcore_bankmachine7_state;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((bankmachine7_twtpcon_ready & bankmachine7_trascon_ready)) begin
                if (bankmachine7_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine7_next_state <= 3'd5;
                end
            end
        end
        2'd2: begin
            if ((bankmachine7_twtpcon_ready & bankmachine7_trascon_ready)) begin
                litedramcore_litedramcore_bankmachine7_next_state <= 3'd5;
            end
        end
        2'd3: begin
            if (bankmachine7_trccon_ready) begin
                if (bankmachine7_cmd_ready) begin
                    litedramcore_litedramcore_bankmachine7_next_state <= 3'd6;
                end
            end
        end
        3'd4: begin
            if ((~bankmachine7_refresh_req)) begin
                litedramcore_litedramcore_bankmachine7_next_state <= 1'd0;
            end
        end
        3'd5: begin
            litedramcore_litedramcore_bankmachine7_next_state <= 2'd3;
        end
        3'd6: begin
            litedramcore_litedramcore_bankmachine7_next_state <= 1'd0;
        end
        default: begin
            if (bankmachine7_refresh_req) begin
                litedramcore_litedramcore_bankmachine7_next_state <= 3'd4;
            end else begin
                if (bankmachine7_source_source_valid) begin
                    if (bankmachine7_row_opened) begin
                        if (bankmachine7_row_hit) begin
                            if ((bankmachine7_cmd_ready & bankmachine7_auto_precharge)) begin
                                litedramcore_litedramcore_bankmachine7_next_state <= 2'd2;
                            end
                        end else begin
                            litedramcore_litedramcore_bankmachine7_next_state <= 1'd1;
                        end
                    end else begin
                        litedramcore_litedramcore_bankmachine7_next_state <= 2'd3;
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine7_row_col_n_addr_sel <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine7_trccon_ready) begin
                bankmachine7_row_col_n_addr_sel <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine7_cmd_payload_cas <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine7_refresh_req) begin
            end else begin
                if (bankmachine7_source_source_valid) begin
                    if (bankmachine7_row_opened) begin
                        if (bankmachine7_row_hit) begin
                            bankmachine7_cmd_payload_cas <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine7_cmd_payload_ras <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((bankmachine7_twtpcon_ready & bankmachine7_trascon_ready)) begin
                bankmachine7_cmd_payload_ras <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine7_trccon_ready) begin
                bankmachine7_cmd_payload_ras <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine7_cmd_payload_we <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((bankmachine7_twtpcon_ready & bankmachine7_trascon_ready)) begin
                bankmachine7_cmd_payload_we <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine7_refresh_req) begin
            end else begin
                if (bankmachine7_source_source_valid) begin
                    if (bankmachine7_row_opened) begin
                        if (bankmachine7_row_hit) begin
                            if (bankmachine7_source_source_payload_we) begin
                                bankmachine7_cmd_payload_we <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine7_cmd_payload_is_cmd <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((bankmachine7_twtpcon_ready & bankmachine7_trascon_ready)) begin
                bankmachine7_cmd_payload_is_cmd <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine7_trccon_ready) begin
                bankmachine7_cmd_payload_is_cmd <= 1'd1;
            end
        end
        3'd4: begin
            bankmachine7_cmd_payload_is_cmd <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine7_cmd_payload_is_read <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine7_refresh_req) begin
            end else begin
                if (bankmachine7_source_source_valid) begin
                    if (bankmachine7_row_opened) begin
                        if (bankmachine7_row_hit) begin
                            if (bankmachine7_source_source_payload_we) begin
                            end else begin
                                bankmachine7_cmd_payload_is_read <= 1'd1;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine7_cmd_payload_is_write <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine7_refresh_req) begin
            end else begin
                if (bankmachine7_source_source_valid) begin
                    if (bankmachine7_row_opened) begin
                        if (bankmachine7_row_hit) begin
                            if (bankmachine7_source_source_payload_we) begin
                                bankmachine7_cmd_payload_is_write <= 1'd1;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine7_req_wdata_ready <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine7_refresh_req) begin
            end else begin
                if (bankmachine7_source_source_valid) begin
                    if (bankmachine7_row_opened) begin
                        if (bankmachine7_row_hit) begin
                            if (bankmachine7_source_source_payload_we) begin
                                bankmachine7_req_wdata_ready <= bankmachine7_cmd_ready;
                            end else begin
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine7_req_rdata_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine7_refresh_req) begin
            end else begin
                if (bankmachine7_source_source_valid) begin
                    if (bankmachine7_row_opened) begin
                        if (bankmachine7_row_hit) begin
                            if (bankmachine7_source_source_payload_we) begin
                            end else begin
                                bankmachine7_req_rdata_valid <= bankmachine7_cmd_ready;
                            end
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine7_refresh_gnt <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
            if (bankmachine7_twtpcon_ready) begin
                bankmachine7_refresh_gnt <= 1'd1;
            end
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine7_row_open <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine7_trccon_ready) begin
                bankmachine7_row_open <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    bankmachine7_cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            if ((bankmachine7_twtpcon_ready & bankmachine7_trascon_ready)) begin
                bankmachine7_cmd_valid <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
            if (bankmachine7_trccon_ready) begin
                bankmachine7_cmd_valid <= 1'd1;
            end
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
            if (bankmachine7_refresh_req) begin
            end else begin
                if (bankmachine7_source_source_valid) begin
                    if (bankmachine7_row_opened) begin
                        if (bankmachine7_row_hit) begin
                            bankmachine7_cmd_valid <= 1'd1;
                        end else begin
                        end
                    end else begin
                    end
                end
            end
        end
    endcase
end
always @(*) begin
    bankmachine7_row_close <= 1'd0;
    case (litedramcore_litedramcore_bankmachine7_state)
        1'd1: begin
            bankmachine7_row_close <= 1'd1;
        end
        2'd2: begin
            bankmachine7_row_close <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
            bankmachine7_row_close <= 1'd1;
        end
        3'd5: begin
        end
        3'd6: begin
        end
        default: begin
        end
    endcase
end
assign rdcmdphase = (a7ddrphy_rdphase_storage - 1'd1);
assign wrcmdphase = (a7ddrphy_wrphase_storage - 1'd1);
assign trrdcon_valid = ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & ((choose_cmd_cmd_payload_ras & (~choose_cmd_cmd_payload_cas)) & (~choose_cmd_cmd_payload_we)));
assign tfawcon_valid = ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & ((choose_cmd_cmd_payload_ras & (~choose_cmd_cmd_payload_cas)) & (~choose_cmd_cmd_payload_we)));
assign ras_allowed = (trrdcon_ready & tfawcon_ready);
assign tccdcon_valid = ((choose_req_cmd_valid & choose_req_cmd_ready) & (choose_req_cmd_payload_is_write | choose_req_cmd_payload_is_read));
assign cas_allowed = tccdcon_ready;
assign twtrcon_valid = ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_is_write);
assign read_available = ((((((((bankmachine0_cmd_valid & bankmachine0_cmd_payload_is_read) | (bankmachine1_cmd_valid & bankmachine1_cmd_payload_is_read)) | (bankmachine2_cmd_valid & bankmachine2_cmd_payload_is_read)) | (bankmachine3_cmd_valid & bankmachine3_cmd_payload_is_read)) | (bankmachine4_cmd_valid & bankmachine4_cmd_payload_is_read)) | (bankmachine5_cmd_valid & bankmachine5_cmd_payload_is_read)) | (bankmachine6_cmd_valid & bankmachine6_cmd_payload_is_read)) | (bankmachine7_cmd_valid & bankmachine7_cmd_payload_is_read));
assign write_available = ((((((((bankmachine0_cmd_valid & bankmachine0_cmd_payload_is_write) | (bankmachine1_cmd_valid & bankmachine1_cmd_payload_is_write)) | (bankmachine2_cmd_valid & bankmachine2_cmd_payload_is_write)) | (bankmachine3_cmd_valid & bankmachine3_cmd_payload_is_write)) | (bankmachine4_cmd_valid & bankmachine4_cmd_payload_is_write)) | (bankmachine5_cmd_valid & bankmachine5_cmd_payload_is_write)) | (bankmachine6_cmd_valid & bankmachine6_cmd_payload_is_write)) | (bankmachine7_cmd_valid & bankmachine7_cmd_payload_is_write));
assign max_time0 = (time0 == 1'd0);
assign max_time1 = (time1 == 1'd0);
assign bankmachine0_refresh_req = cmd_valid;
assign bankmachine1_refresh_req = cmd_valid;
assign bankmachine2_refresh_req = cmd_valid;
assign bankmachine3_refresh_req = cmd_valid;
assign bankmachine4_refresh_req = cmd_valid;
assign bankmachine5_refresh_req = cmd_valid;
assign bankmachine6_refresh_req = cmd_valid;
assign bankmachine7_refresh_req = cmd_valid;
assign go_to_refresh = (((((((bankmachine0_refresh_gnt & bankmachine1_refresh_gnt) & bankmachine2_refresh_gnt) & bankmachine3_refresh_gnt) & bankmachine4_refresh_gnt) & bankmachine5_refresh_gnt) & bankmachine6_refresh_gnt) & bankmachine7_refresh_gnt);
assign interface_rdata = {dfi_p3_rddata, dfi_p2_rddata, dfi_p1_rddata, dfi_p0_rddata};
assign {dfi_p3_wrdata, dfi_p2_wrdata, dfi_p1_wrdata, dfi_p0_wrdata} = interface_wdata;
assign {dfi_p3_wrdata, dfi_p2_wrdata, dfi_p1_wrdata, dfi_p0_wrdata} = interface_wdata;
assign {dfi_p3_wrdata, dfi_p2_wrdata, dfi_p1_wrdata, dfi_p0_wrdata} = interface_wdata;
assign {dfi_p3_wrdata, dfi_p2_wrdata, dfi_p1_wrdata, dfi_p0_wrdata} = interface_wdata;
assign {dfi_p3_wrdata_mask, dfi_p2_wrdata_mask, dfi_p1_wrdata_mask, dfi_p0_wrdata_mask} = (~interface_wdata_we);
assign {dfi_p3_wrdata_mask, dfi_p2_wrdata_mask, dfi_p1_wrdata_mask, dfi_p0_wrdata_mask} = (~interface_wdata_we);
assign {dfi_p3_wrdata_mask, dfi_p2_wrdata_mask, dfi_p1_wrdata_mask, dfi_p0_wrdata_mask} = (~interface_wdata_we);
assign {dfi_p3_wrdata_mask, dfi_p2_wrdata_mask, dfi_p1_wrdata_mask, dfi_p0_wrdata_mask} = (~interface_wdata_we);
always @(*) begin
    choose_cmd_valids <= 8'd0;
    choose_cmd_valids[0] <= (bankmachine0_cmd_valid & (((bankmachine0_cmd_payload_is_cmd & choose_cmd_want_cmds) & ((~((bankmachine0_cmd_payload_ras & (~bankmachine0_cmd_payload_cas)) & (~bankmachine0_cmd_payload_we))) | choose_cmd_want_activates)) | ((bankmachine0_cmd_payload_is_read == choose_cmd_want_reads) & (bankmachine0_cmd_payload_is_write == choose_cmd_want_writes))));
    choose_cmd_valids[1] <= (bankmachine1_cmd_valid & (((bankmachine1_cmd_payload_is_cmd & choose_cmd_want_cmds) & ((~((bankmachine1_cmd_payload_ras & (~bankmachine1_cmd_payload_cas)) & (~bankmachine1_cmd_payload_we))) | choose_cmd_want_activates)) | ((bankmachine1_cmd_payload_is_read == choose_cmd_want_reads) & (bankmachine1_cmd_payload_is_write == choose_cmd_want_writes))));
    choose_cmd_valids[2] <= (bankmachine2_cmd_valid & (((bankmachine2_cmd_payload_is_cmd & choose_cmd_want_cmds) & ((~((bankmachine2_cmd_payload_ras & (~bankmachine2_cmd_payload_cas)) & (~bankmachine2_cmd_payload_we))) | choose_cmd_want_activates)) | ((bankmachine2_cmd_payload_is_read == choose_cmd_want_reads) & (bankmachine2_cmd_payload_is_write == choose_cmd_want_writes))));
    choose_cmd_valids[3] <= (bankmachine3_cmd_valid & (((bankmachine3_cmd_payload_is_cmd & choose_cmd_want_cmds) & ((~((bankmachine3_cmd_payload_ras & (~bankmachine3_cmd_payload_cas)) & (~bankmachine3_cmd_payload_we))) | choose_cmd_want_activates)) | ((bankmachine3_cmd_payload_is_read == choose_cmd_want_reads) & (bankmachine3_cmd_payload_is_write == choose_cmd_want_writes))));
    choose_cmd_valids[4] <= (bankmachine4_cmd_valid & (((bankmachine4_cmd_payload_is_cmd & choose_cmd_want_cmds) & ((~((bankmachine4_cmd_payload_ras & (~bankmachine4_cmd_payload_cas)) & (~bankmachine4_cmd_payload_we))) | choose_cmd_want_activates)) | ((bankmachine4_cmd_payload_is_read == choose_cmd_want_reads) & (bankmachine4_cmd_payload_is_write == choose_cmd_want_writes))));
    choose_cmd_valids[5] <= (bankmachine5_cmd_valid & (((bankmachine5_cmd_payload_is_cmd & choose_cmd_want_cmds) & ((~((bankmachine5_cmd_payload_ras & (~bankmachine5_cmd_payload_cas)) & (~bankmachine5_cmd_payload_we))) | choose_cmd_want_activates)) | ((bankmachine5_cmd_payload_is_read == choose_cmd_want_reads) & (bankmachine5_cmd_payload_is_write == choose_cmd_want_writes))));
    choose_cmd_valids[6] <= (bankmachine6_cmd_valid & (((bankmachine6_cmd_payload_is_cmd & choose_cmd_want_cmds) & ((~((bankmachine6_cmd_payload_ras & (~bankmachine6_cmd_payload_cas)) & (~bankmachine6_cmd_payload_we))) | choose_cmd_want_activates)) | ((bankmachine6_cmd_payload_is_read == choose_cmd_want_reads) & (bankmachine6_cmd_payload_is_write == choose_cmd_want_writes))));
    choose_cmd_valids[7] <= (bankmachine7_cmd_valid & (((bankmachine7_cmd_payload_is_cmd & choose_cmd_want_cmds) & ((~((bankmachine7_cmd_payload_ras & (~bankmachine7_cmd_payload_cas)) & (~bankmachine7_cmd_payload_we))) | choose_cmd_want_activates)) | ((bankmachine7_cmd_payload_is_read == choose_cmd_want_reads) & (bankmachine7_cmd_payload_is_write == choose_cmd_want_writes))));
end
assign choose_cmd_request = choose_cmd_valids;
assign choose_cmd_cmd_valid = rhs_array_muxed0;
assign choose_cmd_cmd_payload_a = rhs_array_muxed1;
assign choose_cmd_cmd_payload_ba = rhs_array_muxed2;
assign choose_cmd_cmd_payload_is_read = rhs_array_muxed3;
assign choose_cmd_cmd_payload_is_write = rhs_array_muxed4;
assign choose_cmd_cmd_payload_is_cmd = rhs_array_muxed5;
always @(*) begin
    choose_cmd_cmd_payload_cas <= 1'd0;
    if (choose_cmd_cmd_valid) begin
        choose_cmd_cmd_payload_cas <= t_array_muxed0;
    end
end
always @(*) begin
    choose_cmd_cmd_payload_ras <= 1'd0;
    if (choose_cmd_cmd_valid) begin
        choose_cmd_cmd_payload_ras <= t_array_muxed1;
    end
end
always @(*) begin
    choose_cmd_cmd_payload_we <= 1'd0;
    if (choose_cmd_cmd_valid) begin
        choose_cmd_cmd_payload_we <= t_array_muxed2;
    end
end
always @(*) begin
    bankmachine0_cmd_ready <= 1'd0;
    if (((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & (choose_cmd_grant == 1'd0))) begin
        bankmachine0_cmd_ready <= 1'd1;
    end
    if (((choose_req_cmd_valid & choose_req_cmd_ready) & (choose_req_grant == 1'd0))) begin
        bankmachine0_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    bankmachine1_cmd_ready <= 1'd0;
    if (((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & (choose_cmd_grant == 1'd1))) begin
        bankmachine1_cmd_ready <= 1'd1;
    end
    if (((choose_req_cmd_valid & choose_req_cmd_ready) & (choose_req_grant == 1'd1))) begin
        bankmachine1_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    bankmachine2_cmd_ready <= 1'd0;
    if (((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & (choose_cmd_grant == 2'd2))) begin
        bankmachine2_cmd_ready <= 1'd1;
    end
    if (((choose_req_cmd_valid & choose_req_cmd_ready) & (choose_req_grant == 2'd2))) begin
        bankmachine2_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    bankmachine3_cmd_ready <= 1'd0;
    if (((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & (choose_cmd_grant == 2'd3))) begin
        bankmachine3_cmd_ready <= 1'd1;
    end
    if (((choose_req_cmd_valid & choose_req_cmd_ready) & (choose_req_grant == 2'd3))) begin
        bankmachine3_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    bankmachine4_cmd_ready <= 1'd0;
    if (((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & (choose_cmd_grant == 3'd4))) begin
        bankmachine4_cmd_ready <= 1'd1;
    end
    if (((choose_req_cmd_valid & choose_req_cmd_ready) & (choose_req_grant == 3'd4))) begin
        bankmachine4_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    bankmachine5_cmd_ready <= 1'd0;
    if (((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & (choose_cmd_grant == 3'd5))) begin
        bankmachine5_cmd_ready <= 1'd1;
    end
    if (((choose_req_cmd_valid & choose_req_cmd_ready) & (choose_req_grant == 3'd5))) begin
        bankmachine5_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    bankmachine6_cmd_ready <= 1'd0;
    if (((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & (choose_cmd_grant == 3'd6))) begin
        bankmachine6_cmd_ready <= 1'd1;
    end
    if (((choose_req_cmd_valid & choose_req_cmd_ready) & (choose_req_grant == 3'd6))) begin
        bankmachine6_cmd_ready <= 1'd1;
    end
end
always @(*) begin
    bankmachine7_cmd_ready <= 1'd0;
    if (((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & (choose_cmd_grant == 3'd7))) begin
        bankmachine7_cmd_ready <= 1'd1;
    end
    if (((choose_req_cmd_valid & choose_req_cmd_ready) & (choose_req_grant == 3'd7))) begin
        bankmachine7_cmd_ready <= 1'd1;
    end
end
assign choose_cmd_ce = (choose_cmd_cmd_ready | (~choose_cmd_cmd_valid));
always @(*) begin
    choose_req_valids <= 8'd0;
    choose_req_valids[0] <= (bankmachine0_cmd_valid & (((bankmachine0_cmd_payload_is_cmd & choose_req_want_cmds) & ((~((bankmachine0_cmd_payload_ras & (~bankmachine0_cmd_payload_cas)) & (~bankmachine0_cmd_payload_we))) | choose_req_want_activates)) | ((bankmachine0_cmd_payload_is_read == choose_req_want_reads) & (bankmachine0_cmd_payload_is_write == choose_req_want_writes))));
    choose_req_valids[1] <= (bankmachine1_cmd_valid & (((bankmachine1_cmd_payload_is_cmd & choose_req_want_cmds) & ((~((bankmachine1_cmd_payload_ras & (~bankmachine1_cmd_payload_cas)) & (~bankmachine1_cmd_payload_we))) | choose_req_want_activates)) | ((bankmachine1_cmd_payload_is_read == choose_req_want_reads) & (bankmachine1_cmd_payload_is_write == choose_req_want_writes))));
    choose_req_valids[2] <= (bankmachine2_cmd_valid & (((bankmachine2_cmd_payload_is_cmd & choose_req_want_cmds) & ((~((bankmachine2_cmd_payload_ras & (~bankmachine2_cmd_payload_cas)) & (~bankmachine2_cmd_payload_we))) | choose_req_want_activates)) | ((bankmachine2_cmd_payload_is_read == choose_req_want_reads) & (bankmachine2_cmd_payload_is_write == choose_req_want_writes))));
    choose_req_valids[3] <= (bankmachine3_cmd_valid & (((bankmachine3_cmd_payload_is_cmd & choose_req_want_cmds) & ((~((bankmachine3_cmd_payload_ras & (~bankmachine3_cmd_payload_cas)) & (~bankmachine3_cmd_payload_we))) | choose_req_want_activates)) | ((bankmachine3_cmd_payload_is_read == choose_req_want_reads) & (bankmachine3_cmd_payload_is_write == choose_req_want_writes))));
    choose_req_valids[4] <= (bankmachine4_cmd_valid & (((bankmachine4_cmd_payload_is_cmd & choose_req_want_cmds) & ((~((bankmachine4_cmd_payload_ras & (~bankmachine4_cmd_payload_cas)) & (~bankmachine4_cmd_payload_we))) | choose_req_want_activates)) | ((bankmachine4_cmd_payload_is_read == choose_req_want_reads) & (bankmachine4_cmd_payload_is_write == choose_req_want_writes))));
    choose_req_valids[5] <= (bankmachine5_cmd_valid & (((bankmachine5_cmd_payload_is_cmd & choose_req_want_cmds) & ((~((bankmachine5_cmd_payload_ras & (~bankmachine5_cmd_payload_cas)) & (~bankmachine5_cmd_payload_we))) | choose_req_want_activates)) | ((bankmachine5_cmd_payload_is_read == choose_req_want_reads) & (bankmachine5_cmd_payload_is_write == choose_req_want_writes))));
    choose_req_valids[6] <= (bankmachine6_cmd_valid & (((bankmachine6_cmd_payload_is_cmd & choose_req_want_cmds) & ((~((bankmachine6_cmd_payload_ras & (~bankmachine6_cmd_payload_cas)) & (~bankmachine6_cmd_payload_we))) | choose_req_want_activates)) | ((bankmachine6_cmd_payload_is_read == choose_req_want_reads) & (bankmachine6_cmd_payload_is_write == choose_req_want_writes))));
    choose_req_valids[7] <= (bankmachine7_cmd_valid & (((bankmachine7_cmd_payload_is_cmd & choose_req_want_cmds) & ((~((bankmachine7_cmd_payload_ras & (~bankmachine7_cmd_payload_cas)) & (~bankmachine7_cmd_payload_we))) | choose_req_want_activates)) | ((bankmachine7_cmd_payload_is_read == choose_req_want_reads) & (bankmachine7_cmd_payload_is_write == choose_req_want_writes))));
end
assign choose_req_request = choose_req_valids;
assign choose_req_cmd_valid = rhs_array_muxed6;
assign choose_req_cmd_payload_a = rhs_array_muxed7;
assign choose_req_cmd_payload_ba = rhs_array_muxed8;
assign choose_req_cmd_payload_is_read = rhs_array_muxed9;
assign choose_req_cmd_payload_is_write = rhs_array_muxed10;
assign choose_req_cmd_payload_is_cmd = rhs_array_muxed11;
always @(*) begin
    choose_req_cmd_payload_cas <= 1'd0;
    if (choose_req_cmd_valid) begin
        choose_req_cmd_payload_cas <= t_array_muxed3;
    end
end
always @(*) begin
    choose_req_cmd_payload_ras <= 1'd0;
    if (choose_req_cmd_valid) begin
        choose_req_cmd_payload_ras <= t_array_muxed4;
    end
end
always @(*) begin
    choose_req_cmd_payload_we <= 1'd0;
    if (choose_req_cmd_valid) begin
        choose_req_cmd_payload_we <= t_array_muxed5;
    end
end
assign choose_req_ce = (choose_req_cmd_ready | (~choose_req_cmd_valid));
assign dfi_p0_reset_n = 1'd1;
assign dfi_p0_cke = {1{steerer0}};
assign dfi_p0_odt = {1{steerer1}};
assign dfi_p1_reset_n = 1'd1;
assign dfi_p1_cke = {1{steerer2}};
assign dfi_p1_odt = {1{steerer3}};
assign dfi_p2_reset_n = 1'd1;
assign dfi_p2_cke = {1{steerer4}};
assign dfi_p2_odt = {1{steerer5}};
assign dfi_p3_reset_n = 1'd1;
assign dfi_p3_cke = {1{steerer6}};
assign dfi_p3_odt = {1{steerer7}};
assign tfawcon_count = ((tfawcon_window[0] + tfawcon_window[1]) + tfawcon_window[2]);
always @(*) begin
    litedramcore_litedramcore_multiplexer_next_state <= 4'd0;
    litedramcore_litedramcore_multiplexer_next_state <= litedramcore_litedramcore_multiplexer_state;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            if (read_available) begin
                if (((~write_available) | max_time1)) begin
                    litedramcore_litedramcore_multiplexer_next_state <= 2'd3;
                end
            end
            if (go_to_refresh) begin
                litedramcore_litedramcore_multiplexer_next_state <= 2'd2;
            end
        end
        2'd2: begin
            if (cmd_last) begin
                litedramcore_litedramcore_multiplexer_next_state <= 1'd0;
            end
        end
        2'd3: begin
            if (twtrcon_ready) begin
                litedramcore_litedramcore_multiplexer_next_state <= 1'd0;
            end
        end
        3'd4: begin
            litedramcore_litedramcore_multiplexer_next_state <= 3'd5;
        end
        3'd5: begin
            litedramcore_litedramcore_multiplexer_next_state <= 3'd6;
        end
        3'd6: begin
            litedramcore_litedramcore_multiplexer_next_state <= 3'd7;
        end
        3'd7: begin
            litedramcore_litedramcore_multiplexer_next_state <= 4'd8;
        end
        4'd8: begin
            litedramcore_litedramcore_multiplexer_next_state <= 4'd9;
        end
        4'd9: begin
            litedramcore_litedramcore_multiplexer_next_state <= 4'd10;
        end
        4'd10: begin
            litedramcore_litedramcore_multiplexer_next_state <= 1'd1;
        end
        default: begin
            if (write_available) begin
                if (((~read_available) | max_time0)) begin
                    litedramcore_litedramcore_multiplexer_next_state <= 3'd4;
                end
            end
            if (go_to_refresh) begin
                litedramcore_litedramcore_multiplexer_next_state <= 2'd2;
            end
        end
    endcase
end
always @(*) begin
    choose_req_cmd_ready <= 1'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            if (1'd0) begin
                choose_req_cmd_ready <= (cas_allowed & ((~((choose_req_cmd_payload_ras & (~choose_req_cmd_payload_cas)) & (~choose_req_cmd_payload_we))) | ras_allowed));
            end else begin
                choose_req_cmd_ready <= cas_allowed;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            if (1'd0) begin
                choose_req_cmd_ready <= (cas_allowed & ((~((choose_req_cmd_payload_ras & (~choose_req_cmd_payload_cas)) & (~choose_req_cmd_payload_we))) | ras_allowed));
            end else begin
                choose_req_cmd_ready <= cas_allowed;
            end
        end
    endcase
end
always @(*) begin
    steerer_sel0 <= 2'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            steerer_sel0 <= 1'd0;
            if ((a7ddrphy_wrphase_storage == 1'd0)) begin
                steerer_sel0 <= 2'd2;
            end
            if ((wrcmdphase == 1'd0)) begin
                steerer_sel0 <= 1'd1;
            end
        end
        2'd2: begin
            steerer_sel0 <= 2'd3;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            steerer_sel0 <= 1'd0;
            if ((a7ddrphy_rdphase_storage == 1'd0)) begin
                steerer_sel0 <= 2'd2;
            end
            if ((rdcmdphase == 1'd0)) begin
                steerer_sel0 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    cmd_ready <= 1'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
            cmd_ready <= 1'd1;
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    steerer_sel1 <= 2'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            steerer_sel1 <= 1'd0;
            if ((a7ddrphy_wrphase_storage == 1'd1)) begin
                steerer_sel1 <= 2'd2;
            end
            if ((wrcmdphase == 1'd1)) begin
                steerer_sel1 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            steerer_sel1 <= 1'd0;
            if ((a7ddrphy_rdphase_storage == 1'd1)) begin
                steerer_sel1 <= 2'd2;
            end
            if ((rdcmdphase == 1'd1)) begin
                steerer_sel1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    en0 <= 1'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            en0 <= 1'd1;
        end
    endcase
end
always @(*) begin
    steerer_sel2 <= 2'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            steerer_sel2 <= 1'd0;
            if ((a7ddrphy_wrphase_storage == 2'd2)) begin
                steerer_sel2 <= 2'd2;
            end
            if ((wrcmdphase == 2'd2)) begin
                steerer_sel2 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            steerer_sel2 <= 1'd0;
            if ((a7ddrphy_rdphase_storage == 2'd2)) begin
                steerer_sel2 <= 2'd2;
            end
            if ((rdcmdphase == 2'd2)) begin
                steerer_sel2 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    choose_cmd_want_activates <= 1'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            if (1'd0) begin
            end else begin
                choose_cmd_want_activates <= ras_allowed;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            if (1'd0) begin
            end else begin
                choose_cmd_want_activates <= ras_allowed;
            end
        end
    endcase
end
always @(*) begin
    steerer_sel3 <= 2'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            steerer_sel3 <= 1'd0;
            if ((a7ddrphy_wrphase_storage == 2'd3)) begin
                steerer_sel3 <= 2'd2;
            end
            if ((wrcmdphase == 2'd3)) begin
                steerer_sel3 <= 1'd1;
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            steerer_sel3 <= 1'd0;
            if ((a7ddrphy_rdphase_storage == 2'd3)) begin
                steerer_sel3 <= 2'd2;
            end
            if ((rdcmdphase == 2'd3)) begin
                steerer_sel3 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    choose_cmd_cmd_ready <= 1'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            if (1'd0) begin
            end else begin
                choose_cmd_cmd_ready <= ((~((choose_cmd_cmd_payload_ras & (~choose_cmd_cmd_payload_cas)) & (~choose_cmd_cmd_payload_we))) | ras_allowed);
            end
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            if (1'd0) begin
            end else begin
                choose_cmd_cmd_ready <= ((~((choose_cmd_cmd_payload_ras & (~choose_cmd_cmd_payload_cas)) & (~choose_cmd_cmd_payload_we))) | ras_allowed);
            end
        end
    endcase
end
always @(*) begin
    choose_req_want_reads <= 1'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
            choose_req_want_reads <= 1'd1;
        end
    endcase
end
always @(*) begin
    choose_req_want_writes <= 1'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            choose_req_want_writes <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    en1 <= 1'd0;
    case (litedramcore_litedramcore_multiplexer_state)
        1'd1: begin
            en1 <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        3'd4: begin
        end
        3'd5: begin
        end
        3'd6: begin
        end
        3'd7: begin
        end
        4'd8: begin
        end
        4'd9: begin
        end
        4'd10: begin
        end
        default: begin
        end
    endcase
end
assign litedramcore_litedramcore_roundrobin0_request = {(((port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((litedramcore_litedramcore_locked0 | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign litedramcore_litedramcore_roundrobin0_ce = ((~interface_bank0_valid) & (~interface_bank0_lock));
assign interface_bank0_addr = rhs_array_muxed12;
assign interface_bank0_we = rhs_array_muxed13;
assign interface_bank0_valid = rhs_array_muxed14;
assign litedramcore_litedramcore_roundrobin1_request = {(((port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((litedramcore_litedramcore_locked1 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign litedramcore_litedramcore_roundrobin1_ce = ((~interface_bank1_valid) & (~interface_bank1_lock));
assign interface_bank1_addr = rhs_array_muxed15;
assign interface_bank1_we = rhs_array_muxed16;
assign interface_bank1_valid = rhs_array_muxed17;
assign litedramcore_litedramcore_roundrobin2_request = {(((port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((litedramcore_litedramcore_locked2 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign litedramcore_litedramcore_roundrobin2_ce = ((~interface_bank2_valid) & (~interface_bank2_lock));
assign interface_bank2_addr = rhs_array_muxed18;
assign interface_bank2_we = rhs_array_muxed19;
assign interface_bank2_valid = rhs_array_muxed20;
assign litedramcore_litedramcore_roundrobin3_request = {(((port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((litedramcore_litedramcore_locked3 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign litedramcore_litedramcore_roundrobin3_ce = ((~interface_bank3_valid) & (~interface_bank3_lock));
assign interface_bank3_addr = rhs_array_muxed21;
assign interface_bank3_we = rhs_array_muxed22;
assign interface_bank3_valid = rhs_array_muxed23;
assign litedramcore_litedramcore_roundrobin4_request = {(((port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((litedramcore_litedramcore_locked4 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign litedramcore_litedramcore_roundrobin4_ce = ((~interface_bank4_valid) & (~interface_bank4_lock));
assign interface_bank4_addr = rhs_array_muxed24;
assign interface_bank4_we = rhs_array_muxed25;
assign interface_bank4_valid = rhs_array_muxed26;
assign litedramcore_litedramcore_roundrobin5_request = {(((port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((litedramcore_litedramcore_locked5 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign litedramcore_litedramcore_roundrobin5_ce = ((~interface_bank5_valid) & (~interface_bank5_lock));
assign interface_bank5_addr = rhs_array_muxed27;
assign interface_bank5_we = rhs_array_muxed28;
assign interface_bank5_valid = rhs_array_muxed29;
assign litedramcore_litedramcore_roundrobin6_request = {(((port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((litedramcore_litedramcore_locked6 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid)};
assign litedramcore_litedramcore_roundrobin6_ce = ((~interface_bank6_valid) & (~interface_bank6_lock));
assign interface_bank6_addr = rhs_array_muxed30;
assign interface_bank6_we = rhs_array_muxed31;
assign interface_bank6_valid = rhs_array_muxed32;
assign litedramcore_litedramcore_roundrobin7_request = {(((port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((litedramcore_litedramcore_locked7 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))))) & port_cmd_valid)};
assign litedramcore_litedramcore_roundrobin7_ce = ((~interface_bank7_valid) & (~interface_bank7_lock));
assign interface_bank7_addr = rhs_array_muxed33;
assign interface_bank7_we = rhs_array_muxed34;
assign interface_bank7_valid = rhs_array_muxed35;
assign port_cmd_ready = ((((((((1'd0 | (((litedramcore_litedramcore_roundrobin0_grant == 1'd0) & ((port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((litedramcore_litedramcore_locked0 | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & interface_bank0_ready)) | (((litedramcore_litedramcore_roundrobin1_grant == 1'd0) & ((port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((litedramcore_litedramcore_locked1 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & interface_bank1_ready)) | (((litedramcore_litedramcore_roundrobin2_grant == 1'd0) & ((port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((litedramcore_litedramcore_locked2 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & interface_bank2_ready)) | (((litedramcore_litedramcore_roundrobin3_grant == 1'd0) & ((port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((litedramcore_litedramcore_locked3 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & interface_bank3_ready)) | (((litedramcore_litedramcore_roundrobin4_grant == 1'd0) & ((port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((litedramcore_litedramcore_locked4 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & interface_bank4_ready)) | (((litedramcore_litedramcore_roundrobin5_grant == 1'd0) & ((port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((litedramcore_litedramcore_locked5 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & interface_bank5_ready)) | (((litedramcore_litedramcore_roundrobin6_grant == 1'd0) & ((port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((litedramcore_litedramcore_locked6 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0)))))) & interface_bank6_ready)) | (((litedramcore_litedramcore_roundrobin7_grant == 1'd0) & ((port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((litedramcore_litedramcore_locked7 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0)))))) & interface_bank7_ready));
assign port_wdata_ready = litedramcore_litedramcore_new_master_wdata_ready1;
assign port_rdata_valid = litedramcore_litedramcore_new_master_rdata_valid8;
always @(*) begin
    interface_wdata <= 128'd0;
    case ({litedramcore_litedramcore_new_master_wdata_ready1})
        1'd1: begin
            interface_wdata <= port_wdata_payload_data;
        end
        default: begin
            interface_wdata <= 1'd0;
        end
    endcase
end
always @(*) begin
    interface_wdata_we <= 16'd0;
    case ({litedramcore_litedramcore_new_master_wdata_ready1})
        1'd1: begin
            interface_wdata_we <= port_wdata_payload_we;
        end
        default: begin
            interface_wdata_we <= 1'd0;
        end
    endcase
end
assign port_rdata_payload_data = interface_rdata;
assign litedramnativeportconverter_cmd_buffer_source_ready = (litedramnativeportconverter_wdata_finished | litedramnativeportconverter_rdata_finished);
assign litedramnativeportconverter_addr_changed = (litedramnativeportconverter_cmd_addr[25:2] != new_port_cmd_payload_addr[25:2]);
assign litedramnativeportconverter_rw_collision = ((litedramnativeportconverter_cmd_we & (new_port_cmd_valid & (~new_port_cmd_payload_we))) & (~litedramnativeportconverter_addr_changed));
assign litedramnativeportconverter_next_cmd = ((((litedramnativeportconverter_addr_changed | (litedramnativeportconverter_cmd_we != new_port_cmd_payload_we)) | (litedramnativeportconverter_sel == 4'd15)) | litedramnativeportconverter_cmd_last) | new_port_flush);
assign litedramnativeportconverter_rdata_fifo_sink_valid = port_rdata_valid;
assign port_rdata_ready = litedramnativeportconverter_rdata_fifo_sink_ready;
assign litedramnativeportconverter_rdata_fifo_sink_first = port_rdata_first;
assign litedramnativeportconverter_rdata_fifo_sink_last = port_rdata_last;
assign litedramnativeportconverter_rdata_fifo_sink_payload_data = port_rdata_payload_data;
assign litedramnativeportconverter_rdata_converter_sink_valid = litedramnativeportconverter_rdata_fifo_source_valid;
assign litedramnativeportconverter_rdata_fifo_source_ready = litedramnativeportconverter_rdata_converter_sink_ready;
assign litedramnativeportconverter_rdata_converter_sink_first = litedramnativeportconverter_rdata_fifo_source_first;
assign litedramnativeportconverter_rdata_converter_sink_last = litedramnativeportconverter_rdata_fifo_source_last;
assign litedramnativeportconverter_rdata_converter_sink_payload_data = litedramnativeportconverter_rdata_fifo_source_payload_data;
assign litedramnativeportconverter_rdata_chunk_valid = ((litedramnativeportconverter_cmd_buffer_source_payload_sel & litedramnativeportconverter_rdata_chunk) != 1'd0);
always @(*) begin
    new_port_rdata_valid <= 1'd0;
    if ((litedramnativeportconverter_cmd_buffer_source_valid & (~litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        if (litedramnativeportconverter_rdata_chunk_valid) begin
            new_port_rdata_valid <= litedramnativeportconverter_rdata_converter_source_valid;
        end else begin
        end
    end
end
always @(*) begin
    new_port_rdata_payload_data <= 32'd0;
    if ((litedramnativeportconverter_cmd_buffer_source_valid & (~litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        if (litedramnativeportconverter_rdata_chunk_valid) begin
            new_port_rdata_payload_data <= litedramnativeportconverter_rdata_converter_source_payload_data;
        end else begin
        end
    end
end
always @(*) begin
    litedramnativeportconverter_rdata_converter_source_ready <= 1'd0;
    if ((litedramnativeportconverter_cmd_buffer_source_valid & (~litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        if (litedramnativeportconverter_rdata_chunk_valid) begin
            litedramnativeportconverter_rdata_converter_source_ready <= new_port_rdata_ready;
        end else begin
            litedramnativeportconverter_rdata_converter_source_ready <= 1'd1;
        end
    end
end
always @(*) begin
    litedramnativeportconverter_rdata_finished <= 1'd0;
    if ((litedramnativeportconverter_cmd_buffer_source_valid & (~litedramnativeportconverter_cmd_buffer_source_payload_we))) begin
        litedramnativeportconverter_rdata_finished <= ((litedramnativeportconverter_rdata_converter_source_valid & litedramnativeportconverter_rdata_converter_source_ready) & litedramnativeportconverter_rdata_chunk[3]);
    end
end
assign litedramnativeportconverter_wdata_fifo_sink_valid = new_port_wdata_valid;
assign new_port_wdata_ready = litedramnativeportconverter_wdata_fifo_sink_ready;
assign litedramnativeportconverter_wdata_fifo_sink_first = new_port_wdata_first;
assign litedramnativeportconverter_wdata_fifo_sink_last = new_port_wdata_last;
assign litedramnativeportconverter_wdata_fifo_sink_payload_data = new_port_wdata_payload_data;
assign litedramnativeportconverter_wdata_fifo_sink_payload_we = new_port_wdata_payload_we;
assign port_wdata_valid = litedramnativeportconverter_wdata_buffer_source_source_valid;
assign litedramnativeportconverter_wdata_buffer_source_source_ready = port_wdata_ready;
assign port_wdata_first = litedramnativeportconverter_wdata_buffer_source_source_first;
assign port_wdata_last = litedramnativeportconverter_wdata_buffer_source_source_last;
assign port_wdata_payload_data = litedramnativeportconverter_wdata_buffer_source_source_payload_data;
assign port_wdata_payload_we = litedramnativeportconverter_wdata_buffer_source_source_payload_we;
assign litedramnativeportconverter_wdata_chunk_valid = ((litedramnativeportconverter_cmd_buffer_source_payload_sel & litedramnativeportconverter_wdata_chunk) != 1'd0);
always @(*) begin
    litedramnativeportconverter_wdata_converter_sink_payload_we <= 4'd0;
    if ((litedramnativeportconverter_cmd_buffer_source_valid & litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (litedramnativeportconverter_wdata_chunk_valid) begin
            litedramnativeportconverter_wdata_converter_sink_payload_we <= litedramnativeportconverter_wdata_fifo_source_payload_we;
        end else begin
        end
    end
end
always @(*) begin
    litedramnativeportconverter_wdata_converter_sink_valid <= 1'd0;
    if ((litedramnativeportconverter_cmd_buffer_source_valid & litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (litedramnativeportconverter_wdata_chunk_valid) begin
            litedramnativeportconverter_wdata_converter_sink_valid <= litedramnativeportconverter_wdata_fifo_source_valid;
        end else begin
            litedramnativeportconverter_wdata_converter_sink_valid <= 1'd1;
        end
    end
end
always @(*) begin
    litedramnativeportconverter_wdata_fifo_source_ready <= 1'd0;
    if ((litedramnativeportconverter_cmd_buffer_source_valid & litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (litedramnativeportconverter_wdata_chunk_valid) begin
            litedramnativeportconverter_wdata_fifo_source_ready <= litedramnativeportconverter_wdata_converter_sink_ready;
        end else begin
        end
    end
end
always @(*) begin
    litedramnativeportconverter_wdata_converter_sink_payload_data <= 32'd0;
    if ((litedramnativeportconverter_cmd_buffer_source_valid & litedramnativeportconverter_cmd_buffer_source_payload_we)) begin
        if (litedramnativeportconverter_wdata_chunk_valid) begin
            litedramnativeportconverter_wdata_converter_sink_payload_data <= litedramnativeportconverter_wdata_fifo_source_payload_data;
        end else begin
        end
    end
end
assign litedramnativeportconverter_wdata_buffer_sink_sink_valid = litedramnativeportconverter_wdata_converter_source_valid;
assign litedramnativeportconverter_wdata_buffer_sink_sink_payload_data = litedramnativeportconverter_wdata_converter_source_payload_data;
assign litedramnativeportconverter_wdata_buffer_sink_sink_payload_we = (litedramnativeportconverter_wdata_converter_source_payload_we & litedramnativeportconverter_wdata_sel);
assign litedramnativeportconverter_wdata_converter_source_ready = litedramnativeportconverter_wdata_buffer_sink_sink_ready;
assign litedramnativeportconverter_wdata_finished = ((litedramnativeportconverter_wdata_converter_sink_valid & litedramnativeportconverter_wdata_converter_sink_ready) & litedramnativeportconverter_wdata_chunk[3]);
assign litedramnativeportconverter_cmd_buffer_source_valid = litedramnativeportconverter_cmd_buffer_sink_valid;
assign litedramnativeportconverter_cmd_buffer_sink_ready = litedramnativeportconverter_cmd_buffer_source_ready;
assign litedramnativeportconverter_cmd_buffer_source_first = litedramnativeportconverter_cmd_buffer_sink_first;
assign litedramnativeportconverter_cmd_buffer_source_last = litedramnativeportconverter_cmd_buffer_sink_last;
assign litedramnativeportconverter_cmd_buffer_source_payload_sel = litedramnativeportconverter_cmd_buffer_sink_payload_sel;
assign litedramnativeportconverter_cmd_buffer_source_payload_we = litedramnativeportconverter_cmd_buffer_sink_payload_we;
always @(*) begin
    litedramcore_litedramcore_next_state <= 2'd0;
    litedramcore_litedramcore_next_state <= litedramcore_litedramcore_state;
    case (litedramcore_litedramcore_state)
        1'd1: begin
            if (port_cmd_ready) begin
                if (litedramnativeportconverter_cmd_we) begin
                    litedramcore_litedramcore_next_state <= 1'd0;
                end else begin
                    litedramcore_litedramcore_next_state <= 2'd2;
                end
            end
        end
        2'd2: begin
            if (litedramnativeportconverter_next_cmd) begin
                litedramcore_litedramcore_next_state <= 2'd3;
            end else begin
            end
        end
        2'd3: begin
            if (litedramnativeportconverter_cmd_buffer_sink_ready) begin
                if (litedramnativeportconverter_cmd_we) begin
                    litedramcore_litedramcore_next_state <= 1'd1;
                end else begin
                    litedramcore_litedramcore_next_state <= 1'd0;
                end
            end
        end
        default: begin
            if (new_port_cmd_ready) begin
                if (new_port_cmd_payload_we) begin
                    litedramcore_litedramcore_next_state <= 2'd2;
                end else begin
                    litedramcore_litedramcore_next_state <= 1'd1;
                end
            end
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_sel_litedramcore_next_value_ce3 <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeportconverter_next_cmd) begin
            end else begin
                if (new_port_cmd_valid) begin
                    litedramnativeportconverter_sel_litedramcore_next_value_ce3 <= 1'd1;
                end
            end
        end
        2'd3: begin
        end
        default: begin
            if (new_port_cmd_ready) begin
                litedramnativeportconverter_sel_litedramcore_next_value_ce3 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    port_cmd_valid <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
            port_cmd_valid <= 1'd1;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    new_port_cmd_ready <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeportconverter_next_cmd) begin
            end else begin
                new_port_cmd_ready <= new_port_cmd_valid;
            end
        end
        2'd3: begin
        end
        default: begin
            new_port_cmd_ready <= (new_port_cmd_valid & (~litedramnativeportconverter_read_lock));
        end
    endcase
end
always @(*) begin
    port_cmd_payload_we <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
            port_cmd_payload_we <= litedramnativeportconverter_cmd_we;
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    port_cmd_payload_addr <= 24'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
            port_cmd_payload_addr <= litedramnativeportconverter_cmd_addr[25:2];
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_cmd_buffer_sink_valid <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeportconverter_cmd_buffer_sink_valid <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_cmd_addr_litedramcore_next_value0 <= 26'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (new_port_cmd_ready) begin
                litedramnativeportconverter_cmd_addr_litedramcore_next_value0 <= new_port_cmd_payload_addr;
            end
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_cmd_addr_litedramcore_next_value_ce0 <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (new_port_cmd_ready) begin
                litedramnativeportconverter_cmd_addr_litedramcore_next_value_ce0 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_cmd_we_litedramcore_next_value1 <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (new_port_cmd_ready) begin
                litedramnativeportconverter_cmd_we_litedramcore_next_value1 <= new_port_cmd_payload_we;
            end
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_cmd_buffer_sink_payload_sel <= 4'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeportconverter_cmd_buffer_sink_payload_sel <= litedramnativeportconverter_sel;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_cmd_we_litedramcore_next_value_ce1 <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
        end
        default: begin
            if (new_port_cmd_ready) begin
                litedramnativeportconverter_cmd_we_litedramcore_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_cmd_buffer_sink_payload_we <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
        end
        2'd3: begin
            litedramnativeportconverter_cmd_buffer_sink_payload_we <= litedramnativeportconverter_cmd_we;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_cmd_last_litedramcore_next_value2 <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeportconverter_next_cmd) begin
            end else begin
                litedramnativeportconverter_cmd_last_litedramcore_next_value2 <= new_port_cmd_last;
            end
        end
        2'd3: begin
        end
        default: begin
            if (new_port_cmd_ready) begin
                litedramnativeportconverter_cmd_last_litedramcore_next_value2 <= new_port_cmd_last;
            end
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2 <= 1'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeportconverter_next_cmd) begin
            end else begin
                litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2 <= 1'd1;
            end
        end
        2'd3: begin
        end
        default: begin
            if (new_port_cmd_ready) begin
                litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramnativeportconverter_sel_litedramcore_next_value3 <= 4'd0;
    case (litedramcore_litedramcore_state)
        1'd1: begin
        end
        2'd2: begin
            if (litedramnativeportconverter_next_cmd) begin
            end else begin
                if (new_port_cmd_valid) begin
                    litedramnativeportconverter_sel_litedramcore_next_value3 <= (litedramnativeportconverter_sel | (1'd1 <<< new_port_cmd_payload_addr[1:0]));
                end
            end
        end
        2'd3: begin
        end
        default: begin
            if (new_port_cmd_ready) begin
                litedramnativeportconverter_sel_litedramcore_next_value3 <= (1'd1 <<< new_port_cmd_payload_addr[1:0]);
            end
        end
    endcase
end
assign litedramnativeportconverter_rdata_fifo_syncfifo_din = {litedramnativeportconverter_rdata_fifo_fifo_in_last, litedramnativeportconverter_rdata_fifo_fifo_in_first, litedramnativeportconverter_rdata_fifo_fifo_in_payload_data};
assign {litedramnativeportconverter_rdata_fifo_fifo_out_last, litedramnativeportconverter_rdata_fifo_fifo_out_first, litedramnativeportconverter_rdata_fifo_fifo_out_payload_data} = litedramnativeportconverter_rdata_fifo_syncfifo_dout;
assign {litedramnativeportconverter_rdata_fifo_fifo_out_last, litedramnativeportconverter_rdata_fifo_fifo_out_first, litedramnativeportconverter_rdata_fifo_fifo_out_payload_data} = litedramnativeportconverter_rdata_fifo_syncfifo_dout;
assign {litedramnativeportconverter_rdata_fifo_fifo_out_last, litedramnativeportconverter_rdata_fifo_fifo_out_first, litedramnativeportconverter_rdata_fifo_fifo_out_payload_data} = litedramnativeportconverter_rdata_fifo_syncfifo_dout;
assign litedramnativeportconverter_rdata_fifo_sink_ready = litedramnativeportconverter_rdata_fifo_syncfifo_writable;
assign litedramnativeportconverter_rdata_fifo_syncfifo_we = litedramnativeportconverter_rdata_fifo_sink_valid;
assign litedramnativeportconverter_rdata_fifo_fifo_in_first = litedramnativeportconverter_rdata_fifo_sink_first;
assign litedramnativeportconverter_rdata_fifo_fifo_in_last = litedramnativeportconverter_rdata_fifo_sink_last;
assign litedramnativeportconverter_rdata_fifo_fifo_in_payload_data = litedramnativeportconverter_rdata_fifo_sink_payload_data;
assign litedramnativeportconverter_rdata_fifo_source_valid = litedramnativeportconverter_rdata_fifo_syncfifo_readable;
assign litedramnativeportconverter_rdata_fifo_source_first = litedramnativeportconverter_rdata_fifo_fifo_out_first;
assign litedramnativeportconverter_rdata_fifo_source_last = litedramnativeportconverter_rdata_fifo_fifo_out_last;
assign litedramnativeportconverter_rdata_fifo_source_payload_data = litedramnativeportconverter_rdata_fifo_fifo_out_payload_data;
assign litedramnativeportconverter_rdata_fifo_syncfifo_re = litedramnativeportconverter_rdata_fifo_source_ready;
always @(*) begin
    litedramnativeportconverter_rdata_fifo_wrport_adr <= 2'd0;
    if (litedramnativeportconverter_rdata_fifo_replace) begin
        litedramnativeportconverter_rdata_fifo_wrport_adr <= (litedramnativeportconverter_rdata_fifo_produce - 1'd1);
    end else begin
        litedramnativeportconverter_rdata_fifo_wrport_adr <= litedramnativeportconverter_rdata_fifo_produce;
    end
end
assign litedramnativeportconverter_rdata_fifo_wrport_dat_w = litedramnativeportconverter_rdata_fifo_syncfifo_din;
assign litedramnativeportconverter_rdata_fifo_wrport_we = (litedramnativeportconverter_rdata_fifo_syncfifo_we & (litedramnativeportconverter_rdata_fifo_syncfifo_writable | litedramnativeportconverter_rdata_fifo_replace));
assign litedramnativeportconverter_rdata_fifo_do_read = (litedramnativeportconverter_rdata_fifo_syncfifo_readable & litedramnativeportconverter_rdata_fifo_syncfifo_re);
assign litedramnativeportconverter_rdata_fifo_rdport_adr = litedramnativeportconverter_rdata_fifo_consume;
assign litedramnativeportconverter_rdata_fifo_syncfifo_dout = litedramnativeportconverter_rdata_fifo_rdport_dat_r;
assign litedramnativeportconverter_rdata_fifo_syncfifo_writable = (litedramnativeportconverter_rdata_fifo_level != 2'd3);
assign litedramnativeportconverter_rdata_fifo_syncfifo_readable = (litedramnativeportconverter_rdata_fifo_level != 1'd0);
assign litedramnativeportconverter_rdata_converter_converter_sink_valid = litedramnativeportconverter_rdata_converter_sink_valid;
assign litedramnativeportconverter_rdata_converter_converter_sink_first = litedramnativeportconverter_rdata_converter_sink_first;
assign litedramnativeportconverter_rdata_converter_converter_sink_last = litedramnativeportconverter_rdata_converter_sink_last;
assign litedramnativeportconverter_rdata_converter_sink_ready = litedramnativeportconverter_rdata_converter_converter_sink_ready;
always @(*) begin
    litedramnativeportconverter_rdata_converter_converter_sink_payload_data <= 128'd0;
    litedramnativeportconverter_rdata_converter_converter_sink_payload_data[31:0] <= litedramnativeportconverter_rdata_converter_sink_payload_data[31:0];
    litedramnativeportconverter_rdata_converter_converter_sink_payload_data[63:32] <= litedramnativeportconverter_rdata_converter_sink_payload_data[63:32];
    litedramnativeportconverter_rdata_converter_converter_sink_payload_data[95:64] <= litedramnativeportconverter_rdata_converter_sink_payload_data[95:64];
    litedramnativeportconverter_rdata_converter_converter_sink_payload_data[127:96] <= litedramnativeportconverter_rdata_converter_sink_payload_data[127:96];
end
assign litedramnativeportconverter_rdata_converter_source_valid = litedramnativeportconverter_rdata_converter_source_source_valid;
assign litedramnativeportconverter_rdata_converter_source_first = litedramnativeportconverter_rdata_converter_source_source_first;
assign litedramnativeportconverter_rdata_converter_source_last = litedramnativeportconverter_rdata_converter_source_source_last;
assign litedramnativeportconverter_rdata_converter_source_source_ready = litedramnativeportconverter_rdata_converter_source_ready;
assign {litedramnativeportconverter_rdata_converter_source_payload_data} = litedramnativeportconverter_rdata_converter_source_source_payload_data;
assign litedramnativeportconverter_rdata_converter_source_source_valid = litedramnativeportconverter_rdata_converter_converter_source_valid;
assign litedramnativeportconverter_rdata_converter_converter_source_ready = litedramnativeportconverter_rdata_converter_source_source_ready;
assign litedramnativeportconverter_rdata_converter_source_source_first = litedramnativeportconverter_rdata_converter_converter_source_first;
assign litedramnativeportconverter_rdata_converter_source_source_last = litedramnativeportconverter_rdata_converter_converter_source_last;
assign litedramnativeportconverter_rdata_converter_source_source_payload_data = litedramnativeportconverter_rdata_converter_converter_source_payload_data;
assign litedramnativeportconverter_rdata_converter_converter_first = (litedramnativeportconverter_rdata_converter_converter_mux == 1'd0);
assign litedramnativeportconverter_rdata_converter_converter_last = (litedramnativeportconverter_rdata_converter_converter_mux == 2'd3);
assign litedramnativeportconverter_rdata_converter_converter_source_valid = litedramnativeportconverter_rdata_converter_converter_sink_valid;
assign litedramnativeportconverter_rdata_converter_converter_source_first = (litedramnativeportconverter_rdata_converter_converter_sink_first & litedramnativeportconverter_rdata_converter_converter_first);
assign litedramnativeportconverter_rdata_converter_converter_source_last = (litedramnativeportconverter_rdata_converter_converter_sink_last & litedramnativeportconverter_rdata_converter_converter_last);
assign litedramnativeportconverter_rdata_converter_converter_sink_ready = (litedramnativeportconverter_rdata_converter_converter_last & litedramnativeportconverter_rdata_converter_converter_source_ready);
always @(*) begin
    litedramnativeportconverter_rdata_converter_converter_source_payload_data <= 32'd0;
    case (litedramnativeportconverter_rdata_converter_converter_mux)
        1'd0: begin
            litedramnativeportconverter_rdata_converter_converter_source_payload_data <= litedramnativeportconverter_rdata_converter_converter_sink_payload_data[31:0];
        end
        1'd1: begin
            litedramnativeportconverter_rdata_converter_converter_source_payload_data <= litedramnativeportconverter_rdata_converter_converter_sink_payload_data[63:32];
        end
        2'd2: begin
            litedramnativeportconverter_rdata_converter_converter_source_payload_data <= litedramnativeportconverter_rdata_converter_converter_sink_payload_data[95:64];
        end
        default: begin
            litedramnativeportconverter_rdata_converter_converter_source_payload_data <= litedramnativeportconverter_rdata_converter_converter_sink_payload_data[127:96];
        end
    endcase
end
assign litedramnativeportconverter_rdata_converter_converter_source_payload_valid_token_count = litedramnativeportconverter_rdata_converter_converter_last;
assign litedramnativeportconverter_wdata_converter_converter_sink_valid = litedramnativeportconverter_wdata_converter_sink_valid;
assign litedramnativeportconverter_wdata_converter_converter_sink_first = litedramnativeportconverter_wdata_converter_sink_first;
assign litedramnativeportconverter_wdata_converter_converter_sink_last = litedramnativeportconverter_wdata_converter_sink_last;
assign litedramnativeportconverter_wdata_converter_sink_ready = litedramnativeportconverter_wdata_converter_converter_sink_ready;
assign litedramnativeportconverter_wdata_converter_converter_sink_payload_data = {litedramnativeportconverter_wdata_converter_sink_payload_we, litedramnativeportconverter_wdata_converter_sink_payload_data};
assign litedramnativeportconverter_wdata_converter_source_valid = litedramnativeportconverter_wdata_converter_source_source_valid;
assign litedramnativeportconverter_wdata_converter_source_first = litedramnativeportconverter_wdata_converter_source_source_first;
assign litedramnativeportconverter_wdata_converter_source_last = litedramnativeportconverter_wdata_converter_source_source_last;
assign litedramnativeportconverter_wdata_converter_source_source_ready = litedramnativeportconverter_wdata_converter_source_ready;
always @(*) begin
    litedramnativeportconverter_wdata_converter_source_payload_data <= 128'd0;
    litedramnativeportconverter_wdata_converter_source_payload_data[31:0] <= litedramnativeportconverter_wdata_converter_source_source_payload_data[31:0];
    litedramnativeportconverter_wdata_converter_source_payload_data[63:32] <= litedramnativeportconverter_wdata_converter_source_source_payload_data[67:36];
    litedramnativeportconverter_wdata_converter_source_payload_data[95:64] <= litedramnativeportconverter_wdata_converter_source_source_payload_data[103:72];
    litedramnativeportconverter_wdata_converter_source_payload_data[127:96] <= litedramnativeportconverter_wdata_converter_source_source_payload_data[139:108];
end
always @(*) begin
    litedramnativeportconverter_wdata_converter_source_payload_we <= 16'd0;
    litedramnativeportconverter_wdata_converter_source_payload_we[3:0] <= litedramnativeportconverter_wdata_converter_source_source_payload_data[35:32];
    litedramnativeportconverter_wdata_converter_source_payload_we[7:4] <= litedramnativeportconverter_wdata_converter_source_source_payload_data[71:68];
    litedramnativeportconverter_wdata_converter_source_payload_we[11:8] <= litedramnativeportconverter_wdata_converter_source_source_payload_data[107:104];
    litedramnativeportconverter_wdata_converter_source_payload_we[15:12] <= litedramnativeportconverter_wdata_converter_source_source_payload_data[143:140];
end
assign litedramnativeportconverter_wdata_converter_source_source_valid = litedramnativeportconverter_wdata_converter_converter_source_valid;
assign litedramnativeportconverter_wdata_converter_converter_source_ready = litedramnativeportconverter_wdata_converter_source_source_ready;
assign litedramnativeportconverter_wdata_converter_source_source_first = litedramnativeportconverter_wdata_converter_converter_source_first;
assign litedramnativeportconverter_wdata_converter_source_source_last = litedramnativeportconverter_wdata_converter_converter_source_last;
assign litedramnativeportconverter_wdata_converter_source_source_payload_data = litedramnativeportconverter_wdata_converter_converter_source_payload_data;
assign litedramnativeportconverter_wdata_converter_converter_sink_ready = ((~litedramnativeportconverter_wdata_converter_converter_strobe_all) | litedramnativeportconverter_wdata_converter_converter_source_ready);
assign litedramnativeportconverter_wdata_converter_converter_source_valid = litedramnativeportconverter_wdata_converter_converter_strobe_all;
assign litedramnativeportconverter_wdata_converter_converter_load_part = (litedramnativeportconverter_wdata_converter_converter_sink_valid & litedramnativeportconverter_wdata_converter_converter_sink_ready);
assign litedramnativeportconverter_wdata_fifo_syncfifo_din = {litedramnativeportconverter_wdata_fifo_fifo_in_last, litedramnativeportconverter_wdata_fifo_fifo_in_first, litedramnativeportconverter_wdata_fifo_fifo_in_payload_we, litedramnativeportconverter_wdata_fifo_fifo_in_payload_data};
assign {litedramnativeportconverter_wdata_fifo_fifo_out_last, litedramnativeportconverter_wdata_fifo_fifo_out_first, litedramnativeportconverter_wdata_fifo_fifo_out_payload_we, litedramnativeportconverter_wdata_fifo_fifo_out_payload_data} = litedramnativeportconverter_wdata_fifo_syncfifo_dout;
assign {litedramnativeportconverter_wdata_fifo_fifo_out_last, litedramnativeportconverter_wdata_fifo_fifo_out_first, litedramnativeportconverter_wdata_fifo_fifo_out_payload_we, litedramnativeportconverter_wdata_fifo_fifo_out_payload_data} = litedramnativeportconverter_wdata_fifo_syncfifo_dout;
assign {litedramnativeportconverter_wdata_fifo_fifo_out_last, litedramnativeportconverter_wdata_fifo_fifo_out_first, litedramnativeportconverter_wdata_fifo_fifo_out_payload_we, litedramnativeportconverter_wdata_fifo_fifo_out_payload_data} = litedramnativeportconverter_wdata_fifo_syncfifo_dout;
assign {litedramnativeportconverter_wdata_fifo_fifo_out_last, litedramnativeportconverter_wdata_fifo_fifo_out_first, litedramnativeportconverter_wdata_fifo_fifo_out_payload_we, litedramnativeportconverter_wdata_fifo_fifo_out_payload_data} = litedramnativeportconverter_wdata_fifo_syncfifo_dout;
assign litedramnativeportconverter_wdata_fifo_sink_ready = litedramnativeportconverter_wdata_fifo_syncfifo_writable;
assign litedramnativeportconverter_wdata_fifo_syncfifo_we = litedramnativeportconverter_wdata_fifo_sink_valid;
assign litedramnativeportconverter_wdata_fifo_fifo_in_first = litedramnativeportconverter_wdata_fifo_sink_first;
assign litedramnativeportconverter_wdata_fifo_fifo_in_last = litedramnativeportconverter_wdata_fifo_sink_last;
assign litedramnativeportconverter_wdata_fifo_fifo_in_payload_data = litedramnativeportconverter_wdata_fifo_sink_payload_data;
assign litedramnativeportconverter_wdata_fifo_fifo_in_payload_we = litedramnativeportconverter_wdata_fifo_sink_payload_we;
assign litedramnativeportconverter_wdata_fifo_source_valid = litedramnativeportconverter_wdata_fifo_syncfifo_readable;
assign litedramnativeportconverter_wdata_fifo_source_first = litedramnativeportconverter_wdata_fifo_fifo_out_first;
assign litedramnativeportconverter_wdata_fifo_source_last = litedramnativeportconverter_wdata_fifo_fifo_out_last;
assign litedramnativeportconverter_wdata_fifo_source_payload_data = litedramnativeportconverter_wdata_fifo_fifo_out_payload_data;
assign litedramnativeportconverter_wdata_fifo_source_payload_we = litedramnativeportconverter_wdata_fifo_fifo_out_payload_we;
assign litedramnativeportconverter_wdata_fifo_syncfifo_re = litedramnativeportconverter_wdata_fifo_source_ready;
always @(*) begin
    litedramnativeportconverter_wdata_fifo_wrport_adr <= 2'd0;
    if (litedramnativeportconverter_wdata_fifo_replace) begin
        litedramnativeportconverter_wdata_fifo_wrport_adr <= (litedramnativeportconverter_wdata_fifo_produce - 1'd1);
    end else begin
        litedramnativeportconverter_wdata_fifo_wrport_adr <= litedramnativeportconverter_wdata_fifo_produce;
    end
end
assign litedramnativeportconverter_wdata_fifo_wrport_dat_w = litedramnativeportconverter_wdata_fifo_syncfifo_din;
assign litedramnativeportconverter_wdata_fifo_wrport_we = (litedramnativeportconverter_wdata_fifo_syncfifo_we & (litedramnativeportconverter_wdata_fifo_syncfifo_writable | litedramnativeportconverter_wdata_fifo_replace));
assign litedramnativeportconverter_wdata_fifo_do_read = (litedramnativeportconverter_wdata_fifo_syncfifo_readable & litedramnativeportconverter_wdata_fifo_syncfifo_re);
assign litedramnativeportconverter_wdata_fifo_rdport_adr = litedramnativeportconverter_wdata_fifo_consume;
assign litedramnativeportconverter_wdata_fifo_syncfifo_dout = litedramnativeportconverter_wdata_fifo_rdport_dat_r;
assign litedramnativeportconverter_wdata_fifo_syncfifo_writable = (litedramnativeportconverter_wdata_fifo_level != 2'd3);
assign litedramnativeportconverter_wdata_fifo_syncfifo_readable = (litedramnativeportconverter_wdata_fifo_level != 1'd0);
assign litedramnativeportconverter_wdata_buffer_pipe_valid_sink_ready = ((~litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid) | litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready);
assign litedramnativeportconverter_wdata_buffer_pipe_valid_sink_valid = litedramnativeportconverter_wdata_buffer_sink_sink_valid;
assign litedramnativeportconverter_wdata_buffer_sink_sink_ready = litedramnativeportconverter_wdata_buffer_pipe_valid_sink_ready;
assign litedramnativeportconverter_wdata_buffer_pipe_valid_sink_first = litedramnativeportconverter_wdata_buffer_sink_sink_first;
assign litedramnativeportconverter_wdata_buffer_pipe_valid_sink_last = litedramnativeportconverter_wdata_buffer_sink_sink_last;
assign litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_data = litedramnativeportconverter_wdata_buffer_sink_sink_payload_data;
assign litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_we = litedramnativeportconverter_wdata_buffer_sink_sink_payload_we;
assign litedramnativeportconverter_wdata_buffer_source_source_valid = litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid;
assign litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready = litedramnativeportconverter_wdata_buffer_source_source_ready;
assign litedramnativeportconverter_wdata_buffer_source_source_first = litedramnativeportconverter_wdata_buffer_pipe_valid_source_first;
assign litedramnativeportconverter_wdata_buffer_source_source_last = litedramnativeportconverter_wdata_buffer_pipe_valid_source_last;
assign litedramnativeportconverter_wdata_buffer_source_source_payload_data = litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data;
assign litedramnativeportconverter_wdata_buffer_source_source_payload_we = litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we;
assign litedramcore_litedramcore_roundrobin0_grant = 1'd0;
assign litedramcore_litedramcore_roundrobin1_grant = 1'd0;
assign litedramcore_litedramcore_roundrobin2_grant = 1'd0;
assign litedramcore_litedramcore_roundrobin3_grant = 1'd0;
assign litedramcore_litedramcore_roundrobin4_grant = 1'd0;
assign litedramcore_litedramcore_roundrobin5_grant = 1'd0;
assign litedramcore_litedramcore_roundrobin6_grant = 1'd0;
assign litedramcore_litedramcore_roundrobin7_grant = 1'd0;
assign new_port_cmd_payload_addr = (wb_port_adr - 1'd0);
assign new_port_cmd_payload_we = wb_port_we;
assign new_port_cmd_last = (~wb_port_we);
assign new_port_flush = (~wb_port_cyc);
always @(*) begin
    new_port_wdata_valid <= 1'd0;
    new_port_wdata_valid <= (wb_port_stb & wb_port_we);
    if (1'd1) begin
        if ((~is_ongoing)) begin
            new_port_wdata_valid <= 1'd0;
        end
    end
end
assign new_port_wdata_payload_data = wb_port_dat_w;
assign new_port_wdata_payload_we = wb_port_sel;
assign new_port_rdata_ready = 1'd1;
always @(*) begin
    litedramcore_litedramwishbone2native_next_state <= 2'd0;
    litedramcore_litedramwishbone2native_next_state <= litedramcore_litedramwishbone2native_state;
    case (litedramcore_litedramwishbone2native_state)
        1'd1: begin
            if ((new_port_wdata_valid & new_port_wdata_ready)) begin
                litedramcore_litedramwishbone2native_next_state <= 1'd0;
            end
        end
        2'd2: begin
            if (new_port_rdata_valid) begin
                litedramcore_litedramwishbone2native_next_state <= 1'd0;
            end
        end
        default: begin
            if (((new_port_cmd_valid & new_port_cmd_ready) & wb_port_we)) begin
                litedramcore_litedramwishbone2native_next_state <= 1'd1;
            end
            if (((new_port_cmd_valid & new_port_cmd_ready) & (~wb_port_we))) begin
                litedramcore_litedramwishbone2native_next_state <= 2'd2;
            end
        end
    endcase
end
always @(*) begin
    aborted_litedramwishbone2native_next_value <= 1'd0;
    case (litedramcore_litedramwishbone2native_state)
        1'd1: begin
            aborted_litedramwishbone2native_next_value <= ((~wb_port_cyc) | aborted);
        end
        2'd2: begin
            aborted_litedramwishbone2native_next_value <= ((~wb_port_cyc) | aborted);
        end
        default: begin
            aborted_litedramwishbone2native_next_value <= 1'd0;
        end
    endcase
end
always @(*) begin
    aborted_litedramwishbone2native_next_value_ce <= 1'd0;
    case (litedramcore_litedramwishbone2native_state)
        1'd1: begin
            aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
        2'd2: begin
            aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
        default: begin
            aborted_litedramwishbone2native_next_value_ce <= 1'd1;
        end
    endcase
end
always @(*) begin
    is_ongoing <= 1'd0;
    case (litedramcore_litedramwishbone2native_state)
        1'd1: begin
            is_ongoing <= 1'd1;
        end
        2'd2: begin
        end
        default: begin
        end
    endcase
end
always @(*) begin
    wb_port_dat_r <= 32'd0;
    case (litedramcore_litedramwishbone2native_state)
        1'd1: begin
        end
        2'd2: begin
            if (new_port_rdata_valid) begin
                wb_port_dat_r <= new_port_rdata_payload_data;
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    new_port_cmd_valid <= 1'd0;
    case (litedramcore_litedramwishbone2native_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            new_port_cmd_valid <= (wb_port_cyc & wb_port_stb);
        end
    endcase
end
always @(*) begin
    wb_port_ack <= 1'd0;
    case (litedramcore_litedramwishbone2native_state)
        1'd1: begin
            if ((new_port_wdata_valid & new_port_wdata_ready)) begin
                wb_port_ack <= (wb_port_cyc & (~aborted));
            end
        end
        2'd2: begin
            if (new_port_rdata_valid) begin
                wb_port_ack <= (wb_port_cyc & (~aborted));
            end
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_wishbone2csr_next_state <= 2'd0;
    litedramcore_wishbone2csr_next_state <= litedramcore_wishbone2csr_state;
    case (litedramcore_wishbone2csr_state)
        1'd1: begin
            litedramcore_wishbone2csr_next_state <= 2'd2;
        end
        2'd2: begin
            litedramcore_wishbone2csr_next_state <= 1'd0;
        end
        default: begin
            if ((litedramcore_wishbone_cyc & litedramcore_wishbone_stb)) begin
                litedramcore_wishbone2csr_next_state <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramcore_adr_wishbone2csr_next_value1 <= 14'd0;
    case (litedramcore_wishbone2csr_state)
        1'd1: begin
            litedramcore_adr_wishbone2csr_next_value1 <= 1'd0;
        end
        2'd2: begin
        end
        default: begin
            if ((litedramcore_wishbone_cyc & litedramcore_wishbone_stb)) begin
                litedramcore_adr_wishbone2csr_next_value1 <= litedramcore_wishbone_adr;
            end
        end
    endcase
end
always @(*) begin
    litedramcore_adr_wishbone2csr_next_value_ce1 <= 1'd0;
    case (litedramcore_wishbone2csr_state)
        1'd1: begin
            litedramcore_adr_wishbone2csr_next_value_ce1 <= 1'd1;
        end
        2'd2: begin
        end
        default: begin
            if ((litedramcore_wishbone_cyc & litedramcore_wishbone_stb)) begin
                litedramcore_adr_wishbone2csr_next_value_ce1 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramcore_we_wishbone2csr_next_value2 <= 1'd0;
    case (litedramcore_wishbone2csr_state)
        1'd1: begin
            litedramcore_we_wishbone2csr_next_value2 <= 1'd0;
        end
        2'd2: begin
        end
        default: begin
            if ((litedramcore_wishbone_cyc & litedramcore_wishbone_stb)) begin
                litedramcore_we_wishbone2csr_next_value2 <= (litedramcore_wishbone_we & (litedramcore_wishbone_sel != 1'd0));
            end
        end
    endcase
end
always @(*) begin
    litedramcore_we_wishbone2csr_next_value_ce2 <= 1'd0;
    case (litedramcore_wishbone2csr_state)
        1'd1: begin
            litedramcore_we_wishbone2csr_next_value_ce2 <= 1'd1;
        end
        2'd2: begin
        end
        default: begin
            if ((litedramcore_wishbone_cyc & litedramcore_wishbone_stb)) begin
                litedramcore_we_wishbone2csr_next_value_ce2 <= 1'd1;
            end
        end
    endcase
end
always @(*) begin
    litedramcore_wishbone_dat_r <= 32'd0;
    case (litedramcore_wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
            litedramcore_wishbone_dat_r <= litedramcore_dat_r;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_dat_w_wishbone2csr_next_value0 <= 32'd0;
    case (litedramcore_wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            litedramcore_dat_w_wishbone2csr_next_value0 <= litedramcore_wishbone_dat_w;
        end
    endcase
end
always @(*) begin
    litedramcore_wishbone_ack <= 1'd0;
    case (litedramcore_wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
            litedramcore_wishbone_ack <= 1'd1;
        end
        default: begin
        end
    endcase
end
always @(*) begin
    litedramcore_dat_w_wishbone2csr_next_value_ce0 <= 1'd0;
    case (litedramcore_wishbone2csr_state)
        1'd1: begin
        end
        2'd2: begin
        end
        default: begin
            litedramcore_dat_w_wishbone2csr_next_value_ce0 <= 1'd1;
        end
    endcase
end
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 1'd0);
assign csrbank0_init_done0_r = interface0_bank_bus_dat_w[0];
always @(*) begin
    csrbank0_init_done0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_init_done0_we <= (~interface0_bank_bus_we);
    end
end
always @(*) begin
    csrbank0_init_done0_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank0_init_done0_re <= interface0_bank_bus_we;
    end
end
assign csrbank0_init_error0_r = interface0_bank_bus_dat_w[0];
always @(*) begin
    csrbank0_init_error0_we <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_init_error0_we <= (~interface0_bank_bus_we);
    end
end
always @(*) begin
    csrbank0_init_error0_re <= 1'd0;
    if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank0_init_error0_re <= interface0_bank_bus_we;
    end
end
assign csrbank0_init_done0_w = init_done_storage;
assign csrbank0_init_error0_w = init_error_storage;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd1);
assign csrbank1_rst0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_rst0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_rst0_we <= (~interface1_bank_bus_we);
    end
end
always @(*) begin
    csrbank1_rst0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank1_rst0_re <= interface1_bank_bus_we;
    end
end
assign csrbank1_dly_sel0_r = interface1_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank1_dly_sel0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_dly_sel0_re <= interface1_bank_bus_we;
    end
end
always @(*) begin
    csrbank1_dly_sel0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank1_dly_sel0_we <= (~interface1_bank_bus_we);
    end
end
assign csrbank1_half_sys8x_taps0_r = interface1_bank_bus_dat_w[4:0];
always @(*) begin
    csrbank1_half_sys8x_taps0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank1_half_sys8x_taps0_we <= (~interface1_bank_bus_we);
    end
end
always @(*) begin
    csrbank1_half_sys8x_taps0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
        csrbank1_half_sys8x_taps0_re <= interface1_bank_bus_we;
    end
end
assign csrbank1_wlevel_en0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    csrbank1_wlevel_en0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank1_wlevel_en0_re <= interface1_bank_bus_we;
    end
end
always @(*) begin
    csrbank1_wlevel_en0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank1_wlevel_en0_we <= (~interface1_bank_bus_we);
    end
end
assign a7ddrphy_wlevel_strobe_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    a7ddrphy_wlevel_strobe_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd4))) begin
        a7ddrphy_wlevel_strobe_re <= interface1_bank_bus_we;
    end
end
always @(*) begin
    a7ddrphy_wlevel_strobe_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd4))) begin
        a7ddrphy_wlevel_strobe_we <= (~interface1_bank_bus_we);
    end
end
assign a7ddrphy_rdly_dq_rst_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    a7ddrphy_rdly_dq_rst_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd5))) begin
        a7ddrphy_rdly_dq_rst_re <= interface1_bank_bus_we;
    end
end
always @(*) begin
    a7ddrphy_rdly_dq_rst_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd5))) begin
        a7ddrphy_rdly_dq_rst_we <= (~interface1_bank_bus_we);
    end
end
assign a7ddrphy_rdly_dq_inc_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    a7ddrphy_rdly_dq_inc_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd6))) begin
        a7ddrphy_rdly_dq_inc_we <= (~interface1_bank_bus_we);
    end
end
always @(*) begin
    a7ddrphy_rdly_dq_inc_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd6))) begin
        a7ddrphy_rdly_dq_inc_re <= interface1_bank_bus_we;
    end
end
assign a7ddrphy_rdly_dq_bitslip_rst_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    a7ddrphy_rdly_dq_bitslip_rst_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd7))) begin
        a7ddrphy_rdly_dq_bitslip_rst_we <= (~interface1_bank_bus_we);
    end
end
always @(*) begin
    a7ddrphy_rdly_dq_bitslip_rst_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd7))) begin
        a7ddrphy_rdly_dq_bitslip_rst_re <= interface1_bank_bus_we;
    end
end
assign a7ddrphy_rdly_dq_bitslip_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    a7ddrphy_rdly_dq_bitslip_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd8))) begin
        a7ddrphy_rdly_dq_bitslip_we <= (~interface1_bank_bus_we);
    end
end
always @(*) begin
    a7ddrphy_rdly_dq_bitslip_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd8))) begin
        a7ddrphy_rdly_dq_bitslip_re <= interface1_bank_bus_we;
    end
end
assign a7ddrphy_wdly_dq_bitslip_rst_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    a7ddrphy_wdly_dq_bitslip_rst_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd9))) begin
        a7ddrphy_wdly_dq_bitslip_rst_we <= (~interface1_bank_bus_we);
    end
end
always @(*) begin
    a7ddrphy_wdly_dq_bitslip_rst_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd9))) begin
        a7ddrphy_wdly_dq_bitslip_rst_re <= interface1_bank_bus_we;
    end
end
assign a7ddrphy_wdly_dq_bitslip_r = interface1_bank_bus_dat_w[0];
always @(*) begin
    a7ddrphy_wdly_dq_bitslip_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd10))) begin
        a7ddrphy_wdly_dq_bitslip_re <= interface1_bank_bus_we;
    end
end
always @(*) begin
    a7ddrphy_wdly_dq_bitslip_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd10))) begin
        a7ddrphy_wdly_dq_bitslip_we <= (~interface1_bank_bus_we);
    end
end
assign csrbank1_rdphase0_r = interface1_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank1_rdphase0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd11))) begin
        csrbank1_rdphase0_re <= interface1_bank_bus_we;
    end
end
always @(*) begin
    csrbank1_rdphase0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd11))) begin
        csrbank1_rdphase0_we <= (~interface1_bank_bus_we);
    end
end
assign csrbank1_wrphase0_r = interface1_bank_bus_dat_w[1:0];
always @(*) begin
    csrbank1_wrphase0_we <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd12))) begin
        csrbank1_wrphase0_we <= (~interface1_bank_bus_we);
    end
end
always @(*) begin
    csrbank1_wrphase0_re <= 1'd0;
    if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd12))) begin
        csrbank1_wrphase0_re <= interface1_bank_bus_we;
    end
end
assign csrbank1_rst0_w = a7ddrphy_rst_storage;
assign csrbank1_dly_sel0_w = a7ddrphy_dly_sel_storage[1:0];
assign csrbank1_half_sys8x_taps0_w = a7ddrphy_half_sys8x_taps_storage[4:0];
assign csrbank1_wlevel_en0_w = a7ddrphy_wlevel_en_storage;
assign csrbank1_rdphase0_w = a7ddrphy_rdphase_storage[1:0];
assign csrbank1_wrphase0_w = a7ddrphy_wrphase_storage[1:0];
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 2'd2);
assign csrbank2_dfii_control0_r = interface2_bank_bus_dat_w[3:0];
always @(*) begin
    csrbank2_dfii_control0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_dfii_control0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_control0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
        csrbank2_dfii_control0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi0_command0_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_dfii_pi0_command0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank2_dfii_pi0_command0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi0_command0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
        csrbank2_dfii_pi0_command0_re <= interface2_bank_bus_we;
    end
end
assign phaseinjector0_command_issue_r = interface2_bank_bus_dat_w[0];
always @(*) begin
    phaseinjector0_command_issue_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
        phaseinjector0_command_issue_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    phaseinjector0_command_issue_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
        phaseinjector0_command_issue_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi0_address0_r = interface2_bank_bus_dat_w[13:0];
always @(*) begin
    csrbank2_dfii_pi0_address0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank2_dfii_pi0_address0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi0_address0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
        csrbank2_dfii_pi0_address0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi0_baddress0_r = interface2_bank_bus_dat_w[2:0];
always @(*) begin
    csrbank2_dfii_pi0_baddress0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank2_dfii_pi0_baddress0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi0_baddress0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd4))) begin
        csrbank2_dfii_pi0_baddress0_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi0_wrdata0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank2_dfii_pi0_wrdata0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank2_dfii_pi0_wrdata0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi0_wrdata0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd5))) begin
        csrbank2_dfii_pi0_wrdata0_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi0_rddata_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank2_dfii_pi0_rddata_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank2_dfii_pi0_rddata_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi0_rddata_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd6))) begin
        csrbank2_dfii_pi0_rddata_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi1_command0_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_dfii_pi1_command0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank2_dfii_pi1_command0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi1_command0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd7))) begin
        csrbank2_dfii_pi1_command0_re <= interface2_bank_bus_we;
    end
end
assign phaseinjector1_command_issue_r = interface2_bank_bus_dat_w[0];
always @(*) begin
    phaseinjector1_command_issue_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd8))) begin
        phaseinjector1_command_issue_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    phaseinjector1_command_issue_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd8))) begin
        phaseinjector1_command_issue_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi1_address0_r = interface2_bank_bus_dat_w[13:0];
always @(*) begin
    csrbank2_dfii_pi1_address0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd9))) begin
        csrbank2_dfii_pi1_address0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi1_address0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd9))) begin
        csrbank2_dfii_pi1_address0_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi1_baddress0_r = interface2_bank_bus_dat_w[2:0];
always @(*) begin
    csrbank2_dfii_pi1_baddress0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd10))) begin
        csrbank2_dfii_pi1_baddress0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi1_baddress0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd10))) begin
        csrbank2_dfii_pi1_baddress0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi1_wrdata0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank2_dfii_pi1_wrdata0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd11))) begin
        csrbank2_dfii_pi1_wrdata0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi1_wrdata0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd11))) begin
        csrbank2_dfii_pi1_wrdata0_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi1_rddata_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank2_dfii_pi1_rddata_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd12))) begin
        csrbank2_dfii_pi1_rddata_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi1_rddata_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd12))) begin
        csrbank2_dfii_pi1_rddata_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi2_command0_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_dfii_pi2_command0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd13))) begin
        csrbank2_dfii_pi2_command0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi2_command0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd13))) begin
        csrbank2_dfii_pi2_command0_we <= (~interface2_bank_bus_we);
    end
end
assign phaseinjector2_command_issue_r = interface2_bank_bus_dat_w[0];
always @(*) begin
    phaseinjector2_command_issue_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd14))) begin
        phaseinjector2_command_issue_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    phaseinjector2_command_issue_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd14))) begin
        phaseinjector2_command_issue_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi2_address0_r = interface2_bank_bus_dat_w[13:0];
always @(*) begin
    csrbank2_dfii_pi2_address0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd15))) begin
        csrbank2_dfii_pi2_address0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi2_address0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd15))) begin
        csrbank2_dfii_pi2_address0_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi2_baddress0_r = interface2_bank_bus_dat_w[2:0];
always @(*) begin
    csrbank2_dfii_pi2_baddress0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd16))) begin
        csrbank2_dfii_pi2_baddress0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi2_baddress0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd16))) begin
        csrbank2_dfii_pi2_baddress0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi2_wrdata0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank2_dfii_pi2_wrdata0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd17))) begin
        csrbank2_dfii_pi2_wrdata0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi2_wrdata0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd17))) begin
        csrbank2_dfii_pi2_wrdata0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi2_rddata_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank2_dfii_pi2_rddata_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd18))) begin
        csrbank2_dfii_pi2_rddata_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi2_rddata_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd18))) begin
        csrbank2_dfii_pi2_rddata_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi3_command0_r = interface2_bank_bus_dat_w[7:0];
always @(*) begin
    csrbank2_dfii_pi3_command0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd19))) begin
        csrbank2_dfii_pi3_command0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi3_command0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd19))) begin
        csrbank2_dfii_pi3_command0_we <= (~interface2_bank_bus_we);
    end
end
assign phaseinjector3_command_issue_r = interface2_bank_bus_dat_w[0];
always @(*) begin
    phaseinjector3_command_issue_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd20))) begin
        phaseinjector3_command_issue_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    phaseinjector3_command_issue_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd20))) begin
        phaseinjector3_command_issue_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi3_address0_r = interface2_bank_bus_dat_w[13:0];
always @(*) begin
    csrbank2_dfii_pi3_address0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd21))) begin
        csrbank2_dfii_pi3_address0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi3_address0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd21))) begin
        csrbank2_dfii_pi3_address0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi3_baddress0_r = interface2_bank_bus_dat_w[2:0];
always @(*) begin
    csrbank2_dfii_pi3_baddress0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd22))) begin
        csrbank2_dfii_pi3_baddress0_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi3_baddress0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd22))) begin
        csrbank2_dfii_pi3_baddress0_re <= interface2_bank_bus_we;
    end
end
assign csrbank2_dfii_pi3_wrdata0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank2_dfii_pi3_wrdata0_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd23))) begin
        csrbank2_dfii_pi3_wrdata0_re <= interface2_bank_bus_we;
    end
end
always @(*) begin
    csrbank2_dfii_pi3_wrdata0_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd23))) begin
        csrbank2_dfii_pi3_wrdata0_we <= (~interface2_bank_bus_we);
    end
end
assign csrbank2_dfii_pi3_rddata_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
    csrbank2_dfii_pi3_rddata_we <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd24))) begin
        csrbank2_dfii_pi3_rddata_we <= (~interface2_bank_bus_we);
    end
end
always @(*) begin
    csrbank2_dfii_pi3_rddata_re <= 1'd0;
    if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 5'd24))) begin
        csrbank2_dfii_pi3_rddata_re <= interface2_bank_bus_we;
    end
end
assign sel = storage[0];
assign cke = storage[1];
assign odt = storage[2];
assign reset_n = storage[3];
assign csrbank2_dfii_control0_w = storage[3:0];
assign phaseinjector0_csrfield_cs = phaseinjector0_command_storage[0];
assign phaseinjector0_csrfield_we = phaseinjector0_command_storage[1];
assign phaseinjector0_csrfield_cas = phaseinjector0_command_storage[2];
assign phaseinjector0_csrfield_ras = phaseinjector0_command_storage[3];
assign phaseinjector0_csrfield_wren = phaseinjector0_command_storage[4];
assign phaseinjector0_csrfield_rden = phaseinjector0_command_storage[5];
assign phaseinjector0_csrfield_cs_top = phaseinjector0_command_storage[6];
assign phaseinjector0_csrfield_cs_bottom = phaseinjector0_command_storage[7];
assign csrbank2_dfii_pi0_command0_w = phaseinjector0_command_storage[7:0];
assign csrbank2_dfii_pi0_address0_w = phaseinjector0_address_storage[13:0];
assign csrbank2_dfii_pi0_baddress0_w = phaseinjector0_baddress_storage[2:0];
assign csrbank2_dfii_pi0_wrdata0_w = phaseinjector0_wrdata_storage[31:0];
assign csrbank2_dfii_pi0_rddata_w = phaseinjector0_rddata_status[31:0];
assign phaseinjector0_rddata_we = csrbank2_dfii_pi0_rddata_we;
assign phaseinjector1_csrfield_cs = phaseinjector1_command_storage[0];
assign phaseinjector1_csrfield_we = phaseinjector1_command_storage[1];
assign phaseinjector1_csrfield_cas = phaseinjector1_command_storage[2];
assign phaseinjector1_csrfield_ras = phaseinjector1_command_storage[3];
assign phaseinjector1_csrfield_wren = phaseinjector1_command_storage[4];
assign phaseinjector1_csrfield_rden = phaseinjector1_command_storage[5];
assign phaseinjector1_csrfield_cs_top = phaseinjector1_command_storage[6];
assign phaseinjector1_csrfield_cs_bottom = phaseinjector1_command_storage[7];
assign csrbank2_dfii_pi1_command0_w = phaseinjector1_command_storage[7:0];
assign csrbank2_dfii_pi1_address0_w = phaseinjector1_address_storage[13:0];
assign csrbank2_dfii_pi1_baddress0_w = phaseinjector1_baddress_storage[2:0];
assign csrbank2_dfii_pi1_wrdata0_w = phaseinjector1_wrdata_storage[31:0];
assign csrbank2_dfii_pi1_rddata_w = phaseinjector1_rddata_status[31:0];
assign phaseinjector1_rddata_we = csrbank2_dfii_pi1_rddata_we;
assign phaseinjector2_csrfield_cs = phaseinjector2_command_storage[0];
assign phaseinjector2_csrfield_we = phaseinjector2_command_storage[1];
assign phaseinjector2_csrfield_cas = phaseinjector2_command_storage[2];
assign phaseinjector2_csrfield_ras = phaseinjector2_command_storage[3];
assign phaseinjector2_csrfield_wren = phaseinjector2_command_storage[4];
assign phaseinjector2_csrfield_rden = phaseinjector2_command_storage[5];
assign phaseinjector2_csrfield_cs_top = phaseinjector2_command_storage[6];
assign phaseinjector2_csrfield_cs_bottom = phaseinjector2_command_storage[7];
assign csrbank2_dfii_pi2_command0_w = phaseinjector2_command_storage[7:0];
assign csrbank2_dfii_pi2_address0_w = phaseinjector2_address_storage[13:0];
assign csrbank2_dfii_pi2_baddress0_w = phaseinjector2_baddress_storage[2:0];
assign csrbank2_dfii_pi2_wrdata0_w = phaseinjector2_wrdata_storage[31:0];
assign csrbank2_dfii_pi2_rddata_w = phaseinjector2_rddata_status[31:0];
assign phaseinjector2_rddata_we = csrbank2_dfii_pi2_rddata_we;
assign phaseinjector3_csrfield_cs = phaseinjector3_command_storage[0];
assign phaseinjector3_csrfield_we = phaseinjector3_command_storage[1];
assign phaseinjector3_csrfield_cas = phaseinjector3_command_storage[2];
assign phaseinjector3_csrfield_ras = phaseinjector3_command_storage[3];
assign phaseinjector3_csrfield_wren = phaseinjector3_command_storage[4];
assign phaseinjector3_csrfield_rden = phaseinjector3_command_storage[5];
assign phaseinjector3_csrfield_cs_top = phaseinjector3_command_storage[6];
assign phaseinjector3_csrfield_cs_bottom = phaseinjector3_command_storage[7];
assign csrbank2_dfii_pi3_command0_w = phaseinjector3_command_storage[7:0];
assign csrbank2_dfii_pi3_address0_w = phaseinjector3_address_storage[13:0];
assign csrbank2_dfii_pi3_baddress0_w = phaseinjector3_baddress_storage[2:0];
assign csrbank2_dfii_pi3_wrdata0_w = phaseinjector3_wrdata_storage[31:0];
assign csrbank2_dfii_pi3_rddata_w = phaseinjector3_rddata_status[31:0];
assign phaseinjector3_rddata_we = csrbank2_dfii_pi3_rddata_we;
assign csr_interconnect_adr = litedramcore_adr;
assign csr_interconnect_we = litedramcore_we;
assign csr_interconnect_dat_w = litedramcore_dat_w;
assign litedramcore_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r);
always @(*) begin
    rhs_array_muxed0 <= 1'd0;
    case (choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed0 <= choose_cmd_valids[0];
        end
        1'd1: begin
            rhs_array_muxed0 <= choose_cmd_valids[1];
        end
        2'd2: begin
            rhs_array_muxed0 <= choose_cmd_valids[2];
        end
        2'd3: begin
            rhs_array_muxed0 <= choose_cmd_valids[3];
        end
        3'd4: begin
            rhs_array_muxed0 <= choose_cmd_valids[4];
        end
        3'd5: begin
            rhs_array_muxed0 <= choose_cmd_valids[5];
        end
        3'd6: begin
            rhs_array_muxed0 <= choose_cmd_valids[6];
        end
        default: begin
            rhs_array_muxed0 <= choose_cmd_valids[7];
        end
    endcase
end
always @(*) begin
    rhs_array_muxed1 <= 14'd0;
    case (choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed1 <= bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            rhs_array_muxed1 <= bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            rhs_array_muxed1 <= bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            rhs_array_muxed1 <= bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            rhs_array_muxed1 <= bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            rhs_array_muxed1 <= bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            rhs_array_muxed1 <= bankmachine6_cmd_payload_a;
        end
        default: begin
            rhs_array_muxed1 <= bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed2 <= 3'd0;
    case (choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed2 <= bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            rhs_array_muxed2 <= bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            rhs_array_muxed2 <= bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            rhs_array_muxed2 <= bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            rhs_array_muxed2 <= bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            rhs_array_muxed2 <= bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            rhs_array_muxed2 <= bankmachine6_cmd_payload_ba;
        end
        default: begin
            rhs_array_muxed2 <= bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed3 <= 1'd0;
    case (choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed3 <= bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            rhs_array_muxed3 <= bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            rhs_array_muxed3 <= bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            rhs_array_muxed3 <= bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            rhs_array_muxed3 <= bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            rhs_array_muxed3 <= bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            rhs_array_muxed3 <= bankmachine6_cmd_payload_is_read;
        end
        default: begin
            rhs_array_muxed3 <= bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed4 <= 1'd0;
    case (choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed4 <= bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            rhs_array_muxed4 <= bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            rhs_array_muxed4 <= bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            rhs_array_muxed4 <= bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            rhs_array_muxed4 <= bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            rhs_array_muxed4 <= bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            rhs_array_muxed4 <= bankmachine6_cmd_payload_is_write;
        end
        default: begin
            rhs_array_muxed4 <= bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed5 <= 1'd0;
    case (choose_cmd_grant)
        1'd0: begin
            rhs_array_muxed5 <= bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            rhs_array_muxed5 <= bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            rhs_array_muxed5 <= bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            rhs_array_muxed5 <= bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            rhs_array_muxed5 <= bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            rhs_array_muxed5 <= bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            rhs_array_muxed5 <= bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            rhs_array_muxed5 <= bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    t_array_muxed0 <= 1'd0;
    case (choose_cmd_grant)
        1'd0: begin
            t_array_muxed0 <= bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            t_array_muxed0 <= bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            t_array_muxed0 <= bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            t_array_muxed0 <= bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            t_array_muxed0 <= bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            t_array_muxed0 <= bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            t_array_muxed0 <= bankmachine6_cmd_payload_cas;
        end
        default: begin
            t_array_muxed0 <= bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    t_array_muxed1 <= 1'd0;
    case (choose_cmd_grant)
        1'd0: begin
            t_array_muxed1 <= bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            t_array_muxed1 <= bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            t_array_muxed1 <= bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            t_array_muxed1 <= bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            t_array_muxed1 <= bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            t_array_muxed1 <= bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            t_array_muxed1 <= bankmachine6_cmd_payload_ras;
        end
        default: begin
            t_array_muxed1 <= bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    t_array_muxed2 <= 1'd0;
    case (choose_cmd_grant)
        1'd0: begin
            t_array_muxed2 <= bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            t_array_muxed2 <= bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            t_array_muxed2 <= bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            t_array_muxed2 <= bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            t_array_muxed2 <= bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            t_array_muxed2 <= bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            t_array_muxed2 <= bankmachine6_cmd_payload_we;
        end
        default: begin
            t_array_muxed2 <= bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed6 <= 1'd0;
    case (choose_req_grant)
        1'd0: begin
            rhs_array_muxed6 <= choose_req_valids[0];
        end
        1'd1: begin
            rhs_array_muxed6 <= choose_req_valids[1];
        end
        2'd2: begin
            rhs_array_muxed6 <= choose_req_valids[2];
        end
        2'd3: begin
            rhs_array_muxed6 <= choose_req_valids[3];
        end
        3'd4: begin
            rhs_array_muxed6 <= choose_req_valids[4];
        end
        3'd5: begin
            rhs_array_muxed6 <= choose_req_valids[5];
        end
        3'd6: begin
            rhs_array_muxed6 <= choose_req_valids[6];
        end
        default: begin
            rhs_array_muxed6 <= choose_req_valids[7];
        end
    endcase
end
always @(*) begin
    rhs_array_muxed7 <= 14'd0;
    case (choose_req_grant)
        1'd0: begin
            rhs_array_muxed7 <= bankmachine0_cmd_payload_a;
        end
        1'd1: begin
            rhs_array_muxed7 <= bankmachine1_cmd_payload_a;
        end
        2'd2: begin
            rhs_array_muxed7 <= bankmachine2_cmd_payload_a;
        end
        2'd3: begin
            rhs_array_muxed7 <= bankmachine3_cmd_payload_a;
        end
        3'd4: begin
            rhs_array_muxed7 <= bankmachine4_cmd_payload_a;
        end
        3'd5: begin
            rhs_array_muxed7 <= bankmachine5_cmd_payload_a;
        end
        3'd6: begin
            rhs_array_muxed7 <= bankmachine6_cmd_payload_a;
        end
        default: begin
            rhs_array_muxed7 <= bankmachine7_cmd_payload_a;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed8 <= 3'd0;
    case (choose_req_grant)
        1'd0: begin
            rhs_array_muxed8 <= bankmachine0_cmd_payload_ba;
        end
        1'd1: begin
            rhs_array_muxed8 <= bankmachine1_cmd_payload_ba;
        end
        2'd2: begin
            rhs_array_muxed8 <= bankmachine2_cmd_payload_ba;
        end
        2'd3: begin
            rhs_array_muxed8 <= bankmachine3_cmd_payload_ba;
        end
        3'd4: begin
            rhs_array_muxed8 <= bankmachine4_cmd_payload_ba;
        end
        3'd5: begin
            rhs_array_muxed8 <= bankmachine5_cmd_payload_ba;
        end
        3'd6: begin
            rhs_array_muxed8 <= bankmachine6_cmd_payload_ba;
        end
        default: begin
            rhs_array_muxed8 <= bankmachine7_cmd_payload_ba;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed9 <= 1'd0;
    case (choose_req_grant)
        1'd0: begin
            rhs_array_muxed9 <= bankmachine0_cmd_payload_is_read;
        end
        1'd1: begin
            rhs_array_muxed9 <= bankmachine1_cmd_payload_is_read;
        end
        2'd2: begin
            rhs_array_muxed9 <= bankmachine2_cmd_payload_is_read;
        end
        2'd3: begin
            rhs_array_muxed9 <= bankmachine3_cmd_payload_is_read;
        end
        3'd4: begin
            rhs_array_muxed9 <= bankmachine4_cmd_payload_is_read;
        end
        3'd5: begin
            rhs_array_muxed9 <= bankmachine5_cmd_payload_is_read;
        end
        3'd6: begin
            rhs_array_muxed9 <= bankmachine6_cmd_payload_is_read;
        end
        default: begin
            rhs_array_muxed9 <= bankmachine7_cmd_payload_is_read;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed10 <= 1'd0;
    case (choose_req_grant)
        1'd0: begin
            rhs_array_muxed10 <= bankmachine0_cmd_payload_is_write;
        end
        1'd1: begin
            rhs_array_muxed10 <= bankmachine1_cmd_payload_is_write;
        end
        2'd2: begin
            rhs_array_muxed10 <= bankmachine2_cmd_payload_is_write;
        end
        2'd3: begin
            rhs_array_muxed10 <= bankmachine3_cmd_payload_is_write;
        end
        3'd4: begin
            rhs_array_muxed10 <= bankmachine4_cmd_payload_is_write;
        end
        3'd5: begin
            rhs_array_muxed10 <= bankmachine5_cmd_payload_is_write;
        end
        3'd6: begin
            rhs_array_muxed10 <= bankmachine6_cmd_payload_is_write;
        end
        default: begin
            rhs_array_muxed10 <= bankmachine7_cmd_payload_is_write;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed11 <= 1'd0;
    case (choose_req_grant)
        1'd0: begin
            rhs_array_muxed11 <= bankmachine0_cmd_payload_is_cmd;
        end
        1'd1: begin
            rhs_array_muxed11 <= bankmachine1_cmd_payload_is_cmd;
        end
        2'd2: begin
            rhs_array_muxed11 <= bankmachine2_cmd_payload_is_cmd;
        end
        2'd3: begin
            rhs_array_muxed11 <= bankmachine3_cmd_payload_is_cmd;
        end
        3'd4: begin
            rhs_array_muxed11 <= bankmachine4_cmd_payload_is_cmd;
        end
        3'd5: begin
            rhs_array_muxed11 <= bankmachine5_cmd_payload_is_cmd;
        end
        3'd6: begin
            rhs_array_muxed11 <= bankmachine6_cmd_payload_is_cmd;
        end
        default: begin
            rhs_array_muxed11 <= bankmachine7_cmd_payload_is_cmd;
        end
    endcase
end
always @(*) begin
    t_array_muxed3 <= 1'd0;
    case (choose_req_grant)
        1'd0: begin
            t_array_muxed3 <= bankmachine0_cmd_payload_cas;
        end
        1'd1: begin
            t_array_muxed3 <= bankmachine1_cmd_payload_cas;
        end
        2'd2: begin
            t_array_muxed3 <= bankmachine2_cmd_payload_cas;
        end
        2'd3: begin
            t_array_muxed3 <= bankmachine3_cmd_payload_cas;
        end
        3'd4: begin
            t_array_muxed3 <= bankmachine4_cmd_payload_cas;
        end
        3'd5: begin
            t_array_muxed3 <= bankmachine5_cmd_payload_cas;
        end
        3'd6: begin
            t_array_muxed3 <= bankmachine6_cmd_payload_cas;
        end
        default: begin
            t_array_muxed3 <= bankmachine7_cmd_payload_cas;
        end
    endcase
end
always @(*) begin
    t_array_muxed4 <= 1'd0;
    case (choose_req_grant)
        1'd0: begin
            t_array_muxed4 <= bankmachine0_cmd_payload_ras;
        end
        1'd1: begin
            t_array_muxed4 <= bankmachine1_cmd_payload_ras;
        end
        2'd2: begin
            t_array_muxed4 <= bankmachine2_cmd_payload_ras;
        end
        2'd3: begin
            t_array_muxed4 <= bankmachine3_cmd_payload_ras;
        end
        3'd4: begin
            t_array_muxed4 <= bankmachine4_cmd_payload_ras;
        end
        3'd5: begin
            t_array_muxed4 <= bankmachine5_cmd_payload_ras;
        end
        3'd6: begin
            t_array_muxed4 <= bankmachine6_cmd_payload_ras;
        end
        default: begin
            t_array_muxed4 <= bankmachine7_cmd_payload_ras;
        end
    endcase
end
always @(*) begin
    t_array_muxed5 <= 1'd0;
    case (choose_req_grant)
        1'd0: begin
            t_array_muxed5 <= bankmachine0_cmd_payload_we;
        end
        1'd1: begin
            t_array_muxed5 <= bankmachine1_cmd_payload_we;
        end
        2'd2: begin
            t_array_muxed5 <= bankmachine2_cmd_payload_we;
        end
        2'd3: begin
            t_array_muxed5 <= bankmachine3_cmd_payload_we;
        end
        3'd4: begin
            t_array_muxed5 <= bankmachine4_cmd_payload_we;
        end
        3'd5: begin
            t_array_muxed5 <= bankmachine5_cmd_payload_we;
        end
        3'd6: begin
            t_array_muxed5 <= bankmachine6_cmd_payload_we;
        end
        default: begin
            t_array_muxed5 <= bankmachine7_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed12 <= 21'd0;
    case (litedramcore_litedramcore_roundrobin0_grant)
        default: begin
            rhs_array_muxed12 <= {port_cmd_payload_addr[23:10], port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed13 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin0_grant)
        default: begin
            rhs_array_muxed13 <= port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed14 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin0_grant)
        default: begin
            rhs_array_muxed14 <= (((port_cmd_payload_addr[9:7] == 1'd0) & (~(((((((litedramcore_litedramcore_locked0 | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed15 <= 21'd0;
    case (litedramcore_litedramcore_roundrobin1_grant)
        default: begin
            rhs_array_muxed15 <= {port_cmd_payload_addr[23:10], port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed16 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin1_grant)
        default: begin
            rhs_array_muxed16 <= port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed17 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin1_grant)
        default: begin
            rhs_array_muxed17 <= (((port_cmd_payload_addr[9:7] == 1'd1) & (~(((((((litedramcore_litedramcore_locked1 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed18 <= 21'd0;
    case (litedramcore_litedramcore_roundrobin2_grant)
        default: begin
            rhs_array_muxed18 <= {port_cmd_payload_addr[23:10], port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed19 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin2_grant)
        default: begin
            rhs_array_muxed19 <= port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed20 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin2_grant)
        default: begin
            rhs_array_muxed20 <= (((port_cmd_payload_addr[9:7] == 2'd2) & (~(((((((litedramcore_litedramcore_locked2 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed21 <= 21'd0;
    case (litedramcore_litedramcore_roundrobin3_grant)
        default: begin
            rhs_array_muxed21 <= {port_cmd_payload_addr[23:10], port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed22 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin3_grant)
        default: begin
            rhs_array_muxed22 <= port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed23 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin3_grant)
        default: begin
            rhs_array_muxed23 <= (((port_cmd_payload_addr[9:7] == 2'd3) & (~(((((((litedramcore_litedramcore_locked3 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed24 <= 21'd0;
    case (litedramcore_litedramcore_roundrobin4_grant)
        default: begin
            rhs_array_muxed24 <= {port_cmd_payload_addr[23:10], port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed25 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin4_grant)
        default: begin
            rhs_array_muxed25 <= port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed26 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin4_grant)
        default: begin
            rhs_array_muxed26 <= (((port_cmd_payload_addr[9:7] == 3'd4) & (~(((((((litedramcore_litedramcore_locked4 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed27 <= 21'd0;
    case (litedramcore_litedramcore_roundrobin5_grant)
        default: begin
            rhs_array_muxed27 <= {port_cmd_payload_addr[23:10], port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed28 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin5_grant)
        default: begin
            rhs_array_muxed28 <= port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed29 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin5_grant)
        default: begin
            rhs_array_muxed29 <= (((port_cmd_payload_addr[9:7] == 3'd5) & (~(((((((litedramcore_litedramcore_locked5 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed30 <= 21'd0;
    case (litedramcore_litedramcore_roundrobin6_grant)
        default: begin
            rhs_array_muxed30 <= {port_cmd_payload_addr[23:10], port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed31 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin6_grant)
        default: begin
            rhs_array_muxed31 <= port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed32 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin6_grant)
        default: begin
            rhs_array_muxed32 <= (((port_cmd_payload_addr[9:7] == 3'd6) & (~(((((((litedramcore_litedramcore_locked6 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank7_lock & (litedramcore_litedramcore_roundrobin7_grant == 1'd0))))) & port_cmd_valid);
        end
    endcase
end
always @(*) begin
    rhs_array_muxed33 <= 21'd0;
    case (litedramcore_litedramcore_roundrobin7_grant)
        default: begin
            rhs_array_muxed33 <= {port_cmd_payload_addr[23:10], port_cmd_payload_addr[6:0]};
        end
    endcase
end
always @(*) begin
    rhs_array_muxed34 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin7_grant)
        default: begin
            rhs_array_muxed34 <= port_cmd_payload_we;
        end
    endcase
end
always @(*) begin
    rhs_array_muxed35 <= 1'd0;
    case (litedramcore_litedramcore_roundrobin7_grant)
        default: begin
            rhs_array_muxed35 <= (((port_cmd_payload_addr[9:7] == 3'd7) & (~(((((((litedramcore_litedramcore_locked7 | (interface_bank0_lock & (litedramcore_litedramcore_roundrobin0_grant == 1'd0))) | (interface_bank1_lock & (litedramcore_litedramcore_roundrobin1_grant == 1'd0))) | (interface_bank2_lock & (litedramcore_litedramcore_roundrobin2_grant == 1'd0))) | (interface_bank3_lock & (litedramcore_litedramcore_roundrobin3_grant == 1'd0))) | (interface_bank4_lock & (litedramcore_litedramcore_roundrobin4_grant == 1'd0))) | (interface_bank5_lock & (litedramcore_litedramcore_roundrobin5_grant == 1'd0))) | (interface_bank6_lock & (litedramcore_litedramcore_roundrobin6_grant == 1'd0))))) & port_cmd_valid);
        end
    endcase
end
always @(*) begin
    array_muxed0 <= 3'd0;
    case (steerer_sel0)
        1'd0: begin
            array_muxed0 <= nop_ba[2:0];
        end
        1'd1: begin
            array_muxed0 <= choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            array_muxed0 <= choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            array_muxed0 <= cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    array_muxed1 <= 14'd0;
    case (steerer_sel0)
        1'd0: begin
            array_muxed1 <= nop_a;
        end
        1'd1: begin
            array_muxed1 <= choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            array_muxed1 <= choose_req_cmd_payload_a;
        end
        default: begin
            array_muxed1 <= cmd_payload_a;
        end
    endcase
end
always @(*) begin
    array_muxed2 <= 1'd0;
    case (steerer_sel0)
        1'd0: begin
            array_muxed2 <= 1'd0;
        end
        1'd1: begin
            array_muxed2 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            array_muxed2 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_cas);
        end
        default: begin
            array_muxed2 <= ((cmd_valid & cmd_ready) & cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    array_muxed3 <= 1'd0;
    case (steerer_sel0)
        1'd0: begin
            array_muxed3 <= 1'd0;
        end
        1'd1: begin
            array_muxed3 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            array_muxed3 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_ras);
        end
        default: begin
            array_muxed3 <= ((cmd_valid & cmd_ready) & cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    array_muxed4 <= 1'd0;
    case (steerer_sel0)
        1'd0: begin
            array_muxed4 <= 1'd0;
        end
        1'd1: begin
            array_muxed4 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            array_muxed4 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_we);
        end
        default: begin
            array_muxed4 <= ((cmd_valid & cmd_ready) & cmd_payload_we);
        end
    endcase
end
always @(*) begin
    array_muxed5 <= 1'd0;
    case (steerer_sel0)
        1'd0: begin
            array_muxed5 <= 1'd0;
        end
        1'd1: begin
            array_muxed5 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            array_muxed5 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_is_read);
        end
        default: begin
            array_muxed5 <= ((cmd_valid & cmd_ready) & cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    array_muxed6 <= 1'd0;
    case (steerer_sel0)
        1'd0: begin
            array_muxed6 <= 1'd0;
        end
        1'd1: begin
            array_muxed6 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            array_muxed6 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_is_write);
        end
        default: begin
            array_muxed6 <= ((cmd_valid & cmd_ready) & cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    array_muxed7 <= 3'd0;
    case (steerer_sel1)
        1'd0: begin
            array_muxed7 <= nop_ba[2:0];
        end
        1'd1: begin
            array_muxed7 <= choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            array_muxed7 <= choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            array_muxed7 <= cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    array_muxed8 <= 14'd0;
    case (steerer_sel1)
        1'd0: begin
            array_muxed8 <= nop_a;
        end
        1'd1: begin
            array_muxed8 <= choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            array_muxed8 <= choose_req_cmd_payload_a;
        end
        default: begin
            array_muxed8 <= cmd_payload_a;
        end
    endcase
end
always @(*) begin
    array_muxed9 <= 1'd0;
    case (steerer_sel1)
        1'd0: begin
            array_muxed9 <= 1'd0;
        end
        1'd1: begin
            array_muxed9 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            array_muxed9 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_cas);
        end
        default: begin
            array_muxed9 <= ((cmd_valid & cmd_ready) & cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    array_muxed10 <= 1'd0;
    case (steerer_sel1)
        1'd0: begin
            array_muxed10 <= 1'd0;
        end
        1'd1: begin
            array_muxed10 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            array_muxed10 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_ras);
        end
        default: begin
            array_muxed10 <= ((cmd_valid & cmd_ready) & cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    array_muxed11 <= 1'd0;
    case (steerer_sel1)
        1'd0: begin
            array_muxed11 <= 1'd0;
        end
        1'd1: begin
            array_muxed11 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            array_muxed11 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_we);
        end
        default: begin
            array_muxed11 <= ((cmd_valid & cmd_ready) & cmd_payload_we);
        end
    endcase
end
always @(*) begin
    array_muxed12 <= 1'd0;
    case (steerer_sel1)
        1'd0: begin
            array_muxed12 <= 1'd0;
        end
        1'd1: begin
            array_muxed12 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            array_muxed12 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_is_read);
        end
        default: begin
            array_muxed12 <= ((cmd_valid & cmd_ready) & cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    array_muxed13 <= 1'd0;
    case (steerer_sel1)
        1'd0: begin
            array_muxed13 <= 1'd0;
        end
        1'd1: begin
            array_muxed13 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            array_muxed13 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_is_write);
        end
        default: begin
            array_muxed13 <= ((cmd_valid & cmd_ready) & cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    array_muxed14 <= 3'd0;
    case (steerer_sel2)
        1'd0: begin
            array_muxed14 <= nop_ba[2:0];
        end
        1'd1: begin
            array_muxed14 <= choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            array_muxed14 <= choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            array_muxed14 <= cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    array_muxed15 <= 14'd0;
    case (steerer_sel2)
        1'd0: begin
            array_muxed15 <= nop_a;
        end
        1'd1: begin
            array_muxed15 <= choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            array_muxed15 <= choose_req_cmd_payload_a;
        end
        default: begin
            array_muxed15 <= cmd_payload_a;
        end
    endcase
end
always @(*) begin
    array_muxed16 <= 1'd0;
    case (steerer_sel2)
        1'd0: begin
            array_muxed16 <= 1'd0;
        end
        1'd1: begin
            array_muxed16 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            array_muxed16 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_cas);
        end
        default: begin
            array_muxed16 <= ((cmd_valid & cmd_ready) & cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    array_muxed17 <= 1'd0;
    case (steerer_sel2)
        1'd0: begin
            array_muxed17 <= 1'd0;
        end
        1'd1: begin
            array_muxed17 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            array_muxed17 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_ras);
        end
        default: begin
            array_muxed17 <= ((cmd_valid & cmd_ready) & cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    array_muxed18 <= 1'd0;
    case (steerer_sel2)
        1'd0: begin
            array_muxed18 <= 1'd0;
        end
        1'd1: begin
            array_muxed18 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            array_muxed18 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_we);
        end
        default: begin
            array_muxed18 <= ((cmd_valid & cmd_ready) & cmd_payload_we);
        end
    endcase
end
always @(*) begin
    array_muxed19 <= 1'd0;
    case (steerer_sel2)
        1'd0: begin
            array_muxed19 <= 1'd0;
        end
        1'd1: begin
            array_muxed19 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            array_muxed19 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_is_read);
        end
        default: begin
            array_muxed19 <= ((cmd_valid & cmd_ready) & cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    array_muxed20 <= 1'd0;
    case (steerer_sel2)
        1'd0: begin
            array_muxed20 <= 1'd0;
        end
        1'd1: begin
            array_muxed20 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            array_muxed20 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_is_write);
        end
        default: begin
            array_muxed20 <= ((cmd_valid & cmd_ready) & cmd_payload_is_write);
        end
    endcase
end
always @(*) begin
    array_muxed21 <= 3'd0;
    case (steerer_sel3)
        1'd0: begin
            array_muxed21 <= nop_ba[2:0];
        end
        1'd1: begin
            array_muxed21 <= choose_cmd_cmd_payload_ba[2:0];
        end
        2'd2: begin
            array_muxed21 <= choose_req_cmd_payload_ba[2:0];
        end
        default: begin
            array_muxed21 <= cmd_payload_ba[2:0];
        end
    endcase
end
always @(*) begin
    array_muxed22 <= 14'd0;
    case (steerer_sel3)
        1'd0: begin
            array_muxed22 <= nop_a;
        end
        1'd1: begin
            array_muxed22 <= choose_cmd_cmd_payload_a;
        end
        2'd2: begin
            array_muxed22 <= choose_req_cmd_payload_a;
        end
        default: begin
            array_muxed22 <= cmd_payload_a;
        end
    endcase
end
always @(*) begin
    array_muxed23 <= 1'd0;
    case (steerer_sel3)
        1'd0: begin
            array_muxed23 <= 1'd0;
        end
        1'd1: begin
            array_muxed23 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_cas);
        end
        2'd2: begin
            array_muxed23 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_cas);
        end
        default: begin
            array_muxed23 <= ((cmd_valid & cmd_ready) & cmd_payload_cas);
        end
    endcase
end
always @(*) begin
    array_muxed24 <= 1'd0;
    case (steerer_sel3)
        1'd0: begin
            array_muxed24 <= 1'd0;
        end
        1'd1: begin
            array_muxed24 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_ras);
        end
        2'd2: begin
            array_muxed24 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_ras);
        end
        default: begin
            array_muxed24 <= ((cmd_valid & cmd_ready) & cmd_payload_ras);
        end
    endcase
end
always @(*) begin
    array_muxed25 <= 1'd0;
    case (steerer_sel3)
        1'd0: begin
            array_muxed25 <= 1'd0;
        end
        1'd1: begin
            array_muxed25 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_we);
        end
        2'd2: begin
            array_muxed25 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_we);
        end
        default: begin
            array_muxed25 <= ((cmd_valid & cmd_ready) & cmd_payload_we);
        end
    endcase
end
always @(*) begin
    array_muxed26 <= 1'd0;
    case (steerer_sel3)
        1'd0: begin
            array_muxed26 <= 1'd0;
        end
        1'd1: begin
            array_muxed26 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_is_read);
        end
        2'd2: begin
            array_muxed26 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_is_read);
        end
        default: begin
            array_muxed26 <= ((cmd_valid & cmd_ready) & cmd_payload_is_read);
        end
    endcase
end
always @(*) begin
    array_muxed27 <= 1'd0;
    case (steerer_sel3)
        1'd0: begin
            array_muxed27 <= 1'd0;
        end
        1'd1: begin
            array_muxed27 <= ((choose_cmd_cmd_valid & choose_cmd_cmd_ready) & choose_cmd_cmd_payload_is_write);
        end
        2'd2: begin
            array_muxed27 <= ((choose_req_cmd_valid & choose_req_cmd_ready) & choose_req_cmd_payload_is_write);
        end
        default: begin
            array_muxed27 <= ((cmd_valid & cmd_ready) & cmd_payload_is_write);
        end
    endcase
end
assign xilinxasyncresetsynchronizerimpl0 = (~locked);
assign xilinxasyncresetsynchronizerimpl1 = (~locked);
assign xilinxasyncresetsynchronizerimpl2 = (~locked);
assign xilinxasyncresetsynchronizerimpl3 = (~locked);
assign xilinxasyncresetsynchronizerimpl4 = (~locked);


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge iodelay_clk) begin
    if ((reset_counter != 1'd0)) begin
        reset_counter <= (reset_counter - 1'd1);
    end else begin
        ic_reset <= 1'd0;
    end
    if (iodelay_rst) begin
        reset_counter <= 4'd15;
        ic_reset <= 1'd1;
    end
end

always @(posedge sys_clk) begin
    user_enable <= (init_done_storage & (~init_error_storage));
    a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 <= a7ddrphy_dqs_oe_delay_tappeddelayline;
    a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 <= a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0;
    a7ddrphy_dqspattern_o1 <= a7ddrphy_dqspattern_o0;
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip0_value0 <= (a7ddrphy_bitslip0_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip0_value0 <= 3'd7;
    end
    a7ddrphy_bitslip0_r0 <= {a7ddrphy_dqspattern_o1, a7ddrphy_bitslip0_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip1_value0 <= (a7ddrphy_bitslip1_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip1_value0 <= 3'd7;
    end
    a7ddrphy_bitslip1_r0 <= {a7ddrphy_dqspattern_o1, a7ddrphy_bitslip1_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip0_value1 <= (a7ddrphy_bitslip0_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip0_value1 <= 3'd7;
    end
    a7ddrphy_bitslip0_r1 <= {{a7ddrphy_dfi_p3_wrdata_mask[2], a7ddrphy_dfi_p3_wrdata_mask[0], a7ddrphy_dfi_p2_wrdata_mask[2], a7ddrphy_dfi_p2_wrdata_mask[0], a7ddrphy_dfi_p1_wrdata_mask[2], a7ddrphy_dfi_p1_wrdata_mask[0], a7ddrphy_dfi_p0_wrdata_mask[2], a7ddrphy_dfi_p0_wrdata_mask[0]}, a7ddrphy_bitslip0_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip1_value1 <= (a7ddrphy_bitslip1_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip1_value1 <= 3'd7;
    end
    a7ddrphy_bitslip1_r1 <= {{a7ddrphy_dfi_p3_wrdata_mask[3], a7ddrphy_dfi_p3_wrdata_mask[1], a7ddrphy_dfi_p2_wrdata_mask[3], a7ddrphy_dfi_p2_wrdata_mask[1], a7ddrphy_dfi_p1_wrdata_mask[3], a7ddrphy_dfi_p1_wrdata_mask[1], a7ddrphy_dfi_p0_wrdata_mask[3], a7ddrphy_dfi_p0_wrdata_mask[1]}, a7ddrphy_bitslip1_r1[15:8]};
    a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 <= a7ddrphy_dq_oe_delay_tappeddelayline;
    a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 <= a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0;
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip0_value2 <= (a7ddrphy_bitslip0_value2 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip0_value2 <= 3'd7;
    end
    a7ddrphy_bitslip0_r2 <= {{a7ddrphy_dfi_p3_wrdata[16], a7ddrphy_dfi_p3_wrdata[0], a7ddrphy_dfi_p2_wrdata[16], a7ddrphy_dfi_p2_wrdata[0], a7ddrphy_dfi_p1_wrdata[16], a7ddrphy_dfi_p1_wrdata[0], a7ddrphy_dfi_p0_wrdata[16], a7ddrphy_dfi_p0_wrdata[0]}, a7ddrphy_bitslip0_r2[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip0_value3 <= (a7ddrphy_bitslip0_value3 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip0_value3 <= 3'd7;
    end
    a7ddrphy_bitslip0_r3 <= {a7ddrphy_bitslip03, a7ddrphy_bitslip0_r3[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip1_value2 <= (a7ddrphy_bitslip1_value2 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip1_value2 <= 3'd7;
    end
    a7ddrphy_bitslip1_r2 <= {{a7ddrphy_dfi_p3_wrdata[17], a7ddrphy_dfi_p3_wrdata[1], a7ddrphy_dfi_p2_wrdata[17], a7ddrphy_dfi_p2_wrdata[1], a7ddrphy_dfi_p1_wrdata[17], a7ddrphy_dfi_p1_wrdata[1], a7ddrphy_dfi_p0_wrdata[17], a7ddrphy_dfi_p0_wrdata[1]}, a7ddrphy_bitslip1_r2[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip1_value3 <= (a7ddrphy_bitslip1_value3 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip1_value3 <= 3'd7;
    end
    a7ddrphy_bitslip1_r3 <= {a7ddrphy_bitslip13, a7ddrphy_bitslip1_r3[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip2_value0 <= (a7ddrphy_bitslip2_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip2_value0 <= 3'd7;
    end
    a7ddrphy_bitslip2_r0 <= {{a7ddrphy_dfi_p3_wrdata[18], a7ddrphy_dfi_p3_wrdata[2], a7ddrphy_dfi_p2_wrdata[18], a7ddrphy_dfi_p2_wrdata[2], a7ddrphy_dfi_p1_wrdata[18], a7ddrphy_dfi_p1_wrdata[2], a7ddrphy_dfi_p0_wrdata[18], a7ddrphy_dfi_p0_wrdata[2]}, a7ddrphy_bitslip2_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip2_value1 <= (a7ddrphy_bitslip2_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip2_value1 <= 3'd7;
    end
    a7ddrphy_bitslip2_r1 <= {a7ddrphy_bitslip21, a7ddrphy_bitslip2_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip3_value0 <= (a7ddrphy_bitslip3_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip3_value0 <= 3'd7;
    end
    a7ddrphy_bitslip3_r0 <= {{a7ddrphy_dfi_p3_wrdata[19], a7ddrphy_dfi_p3_wrdata[3], a7ddrphy_dfi_p2_wrdata[19], a7ddrphy_dfi_p2_wrdata[3], a7ddrphy_dfi_p1_wrdata[19], a7ddrphy_dfi_p1_wrdata[3], a7ddrphy_dfi_p0_wrdata[19], a7ddrphy_dfi_p0_wrdata[3]}, a7ddrphy_bitslip3_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip3_value1 <= (a7ddrphy_bitslip3_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip3_value1 <= 3'd7;
    end
    a7ddrphy_bitslip3_r1 <= {a7ddrphy_bitslip31, a7ddrphy_bitslip3_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip4_value0 <= (a7ddrphy_bitslip4_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip4_value0 <= 3'd7;
    end
    a7ddrphy_bitslip4_r0 <= {{a7ddrphy_dfi_p3_wrdata[20], a7ddrphy_dfi_p3_wrdata[4], a7ddrphy_dfi_p2_wrdata[20], a7ddrphy_dfi_p2_wrdata[4], a7ddrphy_dfi_p1_wrdata[20], a7ddrphy_dfi_p1_wrdata[4], a7ddrphy_dfi_p0_wrdata[20], a7ddrphy_dfi_p0_wrdata[4]}, a7ddrphy_bitslip4_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip4_value1 <= (a7ddrphy_bitslip4_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip4_value1 <= 3'd7;
    end
    a7ddrphy_bitslip4_r1 <= {a7ddrphy_bitslip41, a7ddrphy_bitslip4_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip5_value0 <= (a7ddrphy_bitslip5_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip5_value0 <= 3'd7;
    end
    a7ddrphy_bitslip5_r0 <= {{a7ddrphy_dfi_p3_wrdata[21], a7ddrphy_dfi_p3_wrdata[5], a7ddrphy_dfi_p2_wrdata[21], a7ddrphy_dfi_p2_wrdata[5], a7ddrphy_dfi_p1_wrdata[21], a7ddrphy_dfi_p1_wrdata[5], a7ddrphy_dfi_p0_wrdata[21], a7ddrphy_dfi_p0_wrdata[5]}, a7ddrphy_bitslip5_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip5_value1 <= (a7ddrphy_bitslip5_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip5_value1 <= 3'd7;
    end
    a7ddrphy_bitslip5_r1 <= {a7ddrphy_bitslip51, a7ddrphy_bitslip5_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip6_value0 <= (a7ddrphy_bitslip6_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip6_value0 <= 3'd7;
    end
    a7ddrphy_bitslip6_r0 <= {{a7ddrphy_dfi_p3_wrdata[22], a7ddrphy_dfi_p3_wrdata[6], a7ddrphy_dfi_p2_wrdata[22], a7ddrphy_dfi_p2_wrdata[6], a7ddrphy_dfi_p1_wrdata[22], a7ddrphy_dfi_p1_wrdata[6], a7ddrphy_dfi_p0_wrdata[22], a7ddrphy_dfi_p0_wrdata[6]}, a7ddrphy_bitslip6_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip6_value1 <= (a7ddrphy_bitslip6_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip6_value1 <= 3'd7;
    end
    a7ddrphy_bitslip6_r1 <= {a7ddrphy_bitslip61, a7ddrphy_bitslip6_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip7_value0 <= (a7ddrphy_bitslip7_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip7_value0 <= 3'd7;
    end
    a7ddrphy_bitslip7_r0 <= {{a7ddrphy_dfi_p3_wrdata[23], a7ddrphy_dfi_p3_wrdata[7], a7ddrphy_dfi_p2_wrdata[23], a7ddrphy_dfi_p2_wrdata[7], a7ddrphy_dfi_p1_wrdata[23], a7ddrphy_dfi_p1_wrdata[7], a7ddrphy_dfi_p0_wrdata[23], a7ddrphy_dfi_p0_wrdata[7]}, a7ddrphy_bitslip7_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip7_value1 <= (a7ddrphy_bitslip7_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip7_value1 <= 3'd7;
    end
    a7ddrphy_bitslip7_r1 <= {a7ddrphy_bitslip71, a7ddrphy_bitslip7_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip8_value0 <= (a7ddrphy_bitslip8_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip8_value0 <= 3'd7;
    end
    a7ddrphy_bitslip8_r0 <= {{a7ddrphy_dfi_p3_wrdata[24], a7ddrphy_dfi_p3_wrdata[8], a7ddrphy_dfi_p2_wrdata[24], a7ddrphy_dfi_p2_wrdata[8], a7ddrphy_dfi_p1_wrdata[24], a7ddrphy_dfi_p1_wrdata[8], a7ddrphy_dfi_p0_wrdata[24], a7ddrphy_dfi_p0_wrdata[8]}, a7ddrphy_bitslip8_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip8_value1 <= (a7ddrphy_bitslip8_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip8_value1 <= 3'd7;
    end
    a7ddrphy_bitslip8_r1 <= {a7ddrphy_bitslip81, a7ddrphy_bitslip8_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip9_value0 <= (a7ddrphy_bitslip9_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip9_value0 <= 3'd7;
    end
    a7ddrphy_bitslip9_r0 <= {{a7ddrphy_dfi_p3_wrdata[25], a7ddrphy_dfi_p3_wrdata[9], a7ddrphy_dfi_p2_wrdata[25], a7ddrphy_dfi_p2_wrdata[9], a7ddrphy_dfi_p1_wrdata[25], a7ddrphy_dfi_p1_wrdata[9], a7ddrphy_dfi_p0_wrdata[25], a7ddrphy_dfi_p0_wrdata[9]}, a7ddrphy_bitslip9_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip9_value1 <= (a7ddrphy_bitslip9_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip9_value1 <= 3'd7;
    end
    a7ddrphy_bitslip9_r1 <= {a7ddrphy_bitslip91, a7ddrphy_bitslip9_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip10_value0 <= (a7ddrphy_bitslip10_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip10_value0 <= 3'd7;
    end
    a7ddrphy_bitslip10_r0 <= {{a7ddrphy_dfi_p3_wrdata[26], a7ddrphy_dfi_p3_wrdata[10], a7ddrphy_dfi_p2_wrdata[26], a7ddrphy_dfi_p2_wrdata[10], a7ddrphy_dfi_p1_wrdata[26], a7ddrphy_dfi_p1_wrdata[10], a7ddrphy_dfi_p0_wrdata[26], a7ddrphy_dfi_p0_wrdata[10]}, a7ddrphy_bitslip10_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip10_value1 <= (a7ddrphy_bitslip10_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip10_value1 <= 3'd7;
    end
    a7ddrphy_bitslip10_r1 <= {a7ddrphy_bitslip101, a7ddrphy_bitslip10_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip11_value0 <= (a7ddrphy_bitslip11_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip11_value0 <= 3'd7;
    end
    a7ddrphy_bitslip11_r0 <= {{a7ddrphy_dfi_p3_wrdata[27], a7ddrphy_dfi_p3_wrdata[11], a7ddrphy_dfi_p2_wrdata[27], a7ddrphy_dfi_p2_wrdata[11], a7ddrphy_dfi_p1_wrdata[27], a7ddrphy_dfi_p1_wrdata[11], a7ddrphy_dfi_p0_wrdata[27], a7ddrphy_dfi_p0_wrdata[11]}, a7ddrphy_bitslip11_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip11_value1 <= (a7ddrphy_bitslip11_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip11_value1 <= 3'd7;
    end
    a7ddrphy_bitslip11_r1 <= {a7ddrphy_bitslip111, a7ddrphy_bitslip11_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip12_value0 <= (a7ddrphy_bitslip12_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip12_value0 <= 3'd7;
    end
    a7ddrphy_bitslip12_r0 <= {{a7ddrphy_dfi_p3_wrdata[28], a7ddrphy_dfi_p3_wrdata[12], a7ddrphy_dfi_p2_wrdata[28], a7ddrphy_dfi_p2_wrdata[12], a7ddrphy_dfi_p1_wrdata[28], a7ddrphy_dfi_p1_wrdata[12], a7ddrphy_dfi_p0_wrdata[28], a7ddrphy_dfi_p0_wrdata[12]}, a7ddrphy_bitslip12_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip12_value1 <= (a7ddrphy_bitslip12_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip12_value1 <= 3'd7;
    end
    a7ddrphy_bitslip12_r1 <= {a7ddrphy_bitslip121, a7ddrphy_bitslip12_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip13_value0 <= (a7ddrphy_bitslip13_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip13_value0 <= 3'd7;
    end
    a7ddrphy_bitslip13_r0 <= {{a7ddrphy_dfi_p3_wrdata[29], a7ddrphy_dfi_p3_wrdata[13], a7ddrphy_dfi_p2_wrdata[29], a7ddrphy_dfi_p2_wrdata[13], a7ddrphy_dfi_p1_wrdata[29], a7ddrphy_dfi_p1_wrdata[13], a7ddrphy_dfi_p0_wrdata[29], a7ddrphy_dfi_p0_wrdata[13]}, a7ddrphy_bitslip13_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip13_value1 <= (a7ddrphy_bitslip13_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip13_value1 <= 3'd7;
    end
    a7ddrphy_bitslip13_r1 <= {a7ddrphy_bitslip131, a7ddrphy_bitslip13_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip14_value0 <= (a7ddrphy_bitslip14_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip14_value0 <= 3'd7;
    end
    a7ddrphy_bitslip14_r0 <= {{a7ddrphy_dfi_p3_wrdata[30], a7ddrphy_dfi_p3_wrdata[14], a7ddrphy_dfi_p2_wrdata[30], a7ddrphy_dfi_p2_wrdata[14], a7ddrphy_dfi_p1_wrdata[30], a7ddrphy_dfi_p1_wrdata[14], a7ddrphy_dfi_p0_wrdata[30], a7ddrphy_dfi_p0_wrdata[14]}, a7ddrphy_bitslip14_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip14_value1 <= (a7ddrphy_bitslip14_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip14_value1 <= 3'd7;
    end
    a7ddrphy_bitslip14_r1 <= {a7ddrphy_bitslip141, a7ddrphy_bitslip14_r1[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip15_value0 <= (a7ddrphy_bitslip15_value0 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_wdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip15_value0 <= 3'd7;
    end
    a7ddrphy_bitslip15_r0 <= {{a7ddrphy_dfi_p3_wrdata[31], a7ddrphy_dfi_p3_wrdata[15], a7ddrphy_dfi_p2_wrdata[31], a7ddrphy_dfi_p2_wrdata[15], a7ddrphy_dfi_p1_wrdata[31], a7ddrphy_dfi_p1_wrdata[15], a7ddrphy_dfi_p0_wrdata[31], a7ddrphy_dfi_p0_wrdata[15]}, a7ddrphy_bitslip15_r0[15:8]};
    if ((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_re)) begin
        a7ddrphy_bitslip15_value1 <= (a7ddrphy_bitslip15_value1 + 1'd1);
    end
    if (((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_bitslip_rst_re) | a7ddrphy_rst_storage)) begin
        a7ddrphy_bitslip15_value1 <= 3'd7;
    end
    a7ddrphy_bitslip15_r1 <= {a7ddrphy_bitslip151, a7ddrphy_bitslip15_r1[15:8]};
    a7ddrphy_rddata_en_tappeddelayline0 <= (((a7ddrphy_dfi_p0_rddata_en | a7ddrphy_dfi_p1_rddata_en) | a7ddrphy_dfi_p2_rddata_en) | a7ddrphy_dfi_p3_rddata_en);
    a7ddrphy_rddata_en_tappeddelayline1 <= a7ddrphy_rddata_en_tappeddelayline0;
    a7ddrphy_rddata_en_tappeddelayline2 <= a7ddrphy_rddata_en_tappeddelayline1;
    a7ddrphy_rddata_en_tappeddelayline3 <= a7ddrphy_rddata_en_tappeddelayline2;
    a7ddrphy_rddata_en_tappeddelayline4 <= a7ddrphy_rddata_en_tappeddelayline3;
    a7ddrphy_rddata_en_tappeddelayline5 <= a7ddrphy_rddata_en_tappeddelayline4;
    a7ddrphy_rddata_en_tappeddelayline6 <= a7ddrphy_rddata_en_tappeddelayline5;
    a7ddrphy_rddata_en_tappeddelayline7 <= a7ddrphy_rddata_en_tappeddelayline6;
    a7ddrphy_wrdata_en_tappeddelayline0 <= (((a7ddrphy_dfi_p0_wrdata_en | a7ddrphy_dfi_p1_wrdata_en) | a7ddrphy_dfi_p2_wrdata_en) | a7ddrphy_dfi_p3_wrdata_en);
    a7ddrphy_wrdata_en_tappeddelayline1 <= a7ddrphy_wrdata_en_tappeddelayline0;
    a7ddrphy_wrdata_en_tappeddelayline2 <= a7ddrphy_wrdata_en_tappeddelayline1;
    if (csr_dfi_p0_rddata_valid) begin
        phaseinjector0_rddata_status <= csr_dfi_p0_rddata;
    end
    if (csr_dfi_p1_rddata_valid) begin
        phaseinjector1_rddata_status <= csr_dfi_p1_rddata;
    end
    if (csr_dfi_p2_rddata_valid) begin
        phaseinjector2_rddata_status <= csr_dfi_p2_rddata;
    end
    if (csr_dfi_p3_rddata_valid) begin
        phaseinjector3_rddata_status <= csr_dfi_p3_rddata;
    end
    if ((timer_wait & (~timer_done0))) begin
        timer_count1 <= (timer_count1 - 1'd1);
    end else begin
        timer_count1 <= 9'd390;
    end
    postponer_req_o <= 1'd0;
    if (postponer_req_i) begin
        postponer_count <= (postponer_count - 1'd1);
        if ((postponer_count == 1'd0)) begin
            postponer_count <= 1'd0;
            postponer_req_o <= 1'd1;
        end
    end
    if (sequencer_start0) begin
        sequencer_count <= 1'd0;
    end else begin
        if (sequencer_done1) begin
            if ((sequencer_count != 1'd0)) begin
                sequencer_count <= (sequencer_count - 1'd1);
            end
        end
    end
    cmd_payload_a <= 1'd0;
    cmd_payload_ba <= 1'd0;
    cmd_payload_cas <= 1'd0;
    cmd_payload_ras <= 1'd0;
    cmd_payload_we <= 1'd0;
    sequencer_done1 <= 1'd0;
    if ((sequencer_start1 & (sequencer_counter == 1'd0))) begin
        cmd_payload_a <= 11'd1024;
        cmd_payload_ba <= 1'd0;
        cmd_payload_cas <= 1'd0;
        cmd_payload_ras <= 1'd1;
        cmd_payload_we <= 1'd1;
    end
    if ((sequencer_counter == 2'd2)) begin
        cmd_payload_a <= 11'd1024;
        cmd_payload_ba <= 1'd0;
        cmd_payload_cas <= 1'd1;
        cmd_payload_ras <= 1'd1;
        cmd_payload_we <= 1'd0;
    end
    if ((sequencer_counter == 6'd34)) begin
        cmd_payload_a <= 1'd0;
        cmd_payload_ba <= 1'd0;
        cmd_payload_cas <= 1'd0;
        cmd_payload_ras <= 1'd0;
        cmd_payload_we <= 1'd0;
        sequencer_done1 <= 1'd1;
    end
    if ((sequencer_counter == 6'd34)) begin
        sequencer_counter <= 1'd0;
    end else begin
        if ((sequencer_counter != 1'd0)) begin
            sequencer_counter <= (sequencer_counter + 1'd1);
        end else begin
            if (sequencer_start1) begin
                sequencer_counter <= 1'd1;
            end
        end
    end
    if ((zqcs_timer_wait & (~zqcs_timer_done0))) begin
        zqcs_timer_count1 <= (zqcs_timer_count1 - 1'd1);
    end else begin
        zqcs_timer_count1 <= 26'd49999999;
    end
    zqcs_executer_done <= 1'd0;
    if ((zqcs_executer_start & (zqcs_executer_counter == 1'd0))) begin
        cmd_payload_a <= 11'd1024;
        cmd_payload_ba <= 1'd0;
        cmd_payload_cas <= 1'd0;
        cmd_payload_ras <= 1'd1;
        cmd_payload_we <= 1'd1;
    end
    if ((zqcs_executer_counter == 2'd2)) begin
        cmd_payload_a <= 1'd0;
        cmd_payload_ba <= 1'd0;
        cmd_payload_cas <= 1'd0;
        cmd_payload_ras <= 1'd0;
        cmd_payload_we <= 1'd1;
    end
    if ((zqcs_executer_counter == 5'd18)) begin
        cmd_payload_a <= 1'd0;
        cmd_payload_ba <= 1'd0;
        cmd_payload_cas <= 1'd0;
        cmd_payload_ras <= 1'd0;
        cmd_payload_we <= 1'd0;
        zqcs_executer_done <= 1'd1;
    end
    if ((zqcs_executer_counter == 5'd18)) begin
        zqcs_executer_counter <= 1'd0;
    end else begin
        if ((zqcs_executer_counter != 1'd0)) begin
            zqcs_executer_counter <= (zqcs_executer_counter + 1'd1);
        end else begin
            if (zqcs_executer_start) begin
                zqcs_executer_counter <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_refresher_state <= litedramcore_litedramcore_refresher_next_state;
    if (bankmachine0_row_close) begin
        bankmachine0_row_opened <= 1'd0;
    end else begin
        if (bankmachine0_row_open) begin
            bankmachine0_row_opened <= 1'd1;
            bankmachine0_row <= bankmachine0_source_source_payload_addr[20:7];
        end
    end
    if (((bankmachine0_syncfifo0_we & bankmachine0_syncfifo0_writable) & (~bankmachine0_replace))) begin
        bankmachine0_produce <= (bankmachine0_produce + 1'd1);
    end
    if (bankmachine0_do_read) begin
        bankmachine0_consume <= (bankmachine0_consume + 1'd1);
    end
    if (((bankmachine0_syncfifo0_we & bankmachine0_syncfifo0_writable) & (~bankmachine0_replace))) begin
        if ((~bankmachine0_do_read)) begin
            bankmachine0_level <= (bankmachine0_level + 1'd1);
        end
    end else begin
        if (bankmachine0_do_read) begin
            bankmachine0_level <= (bankmachine0_level - 1'd1);
        end
    end
    if (((~bankmachine0_pipe_valid_source_valid) | bankmachine0_pipe_valid_source_ready)) begin
        bankmachine0_pipe_valid_source_valid <= bankmachine0_pipe_valid_sink_valid;
        bankmachine0_pipe_valid_source_first <= bankmachine0_pipe_valid_sink_first;
        bankmachine0_pipe_valid_source_last <= bankmachine0_pipe_valid_sink_last;
        bankmachine0_pipe_valid_source_payload_we <= bankmachine0_pipe_valid_sink_payload_we;
        bankmachine0_pipe_valid_source_payload_addr <= bankmachine0_pipe_valid_sink_payload_addr;
    end
    if (bankmachine0_twtpcon_valid) begin
        bankmachine0_twtpcon_count <= 3'd4;
        if (1'd0) begin
            bankmachine0_twtpcon_ready <= 1'd1;
        end else begin
            bankmachine0_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine0_twtpcon_ready)) begin
            bankmachine0_twtpcon_count <= (bankmachine0_twtpcon_count - 1'd1);
            if ((bankmachine0_twtpcon_count == 1'd1)) begin
                bankmachine0_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine0_trccon_valid) begin
        bankmachine0_trccon_count <= 2'd3;
        if (1'd0) begin
            bankmachine0_trccon_ready <= 1'd1;
        end else begin
            bankmachine0_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine0_trccon_ready)) begin
            bankmachine0_trccon_count <= (bankmachine0_trccon_count - 1'd1);
            if ((bankmachine0_trccon_count == 1'd1)) begin
                bankmachine0_trccon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine0_trascon_valid) begin
        bankmachine0_trascon_count <= 2'd2;
        if (1'd0) begin
            bankmachine0_trascon_ready <= 1'd1;
        end else begin
            bankmachine0_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine0_trascon_ready)) begin
            bankmachine0_trascon_count <= (bankmachine0_trascon_count - 1'd1);
            if ((bankmachine0_trascon_count == 1'd1)) begin
                bankmachine0_trascon_ready <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_bankmachine0_state <= litedramcore_litedramcore_bankmachine0_next_state;
    if (bankmachine1_row_close) begin
        bankmachine1_row_opened <= 1'd0;
    end else begin
        if (bankmachine1_row_open) begin
            bankmachine1_row_opened <= 1'd1;
            bankmachine1_row <= bankmachine1_source_source_payload_addr[20:7];
        end
    end
    if (((bankmachine1_syncfifo1_we & bankmachine1_syncfifo1_writable) & (~bankmachine1_replace))) begin
        bankmachine1_produce <= (bankmachine1_produce + 1'd1);
    end
    if (bankmachine1_do_read) begin
        bankmachine1_consume <= (bankmachine1_consume + 1'd1);
    end
    if (((bankmachine1_syncfifo1_we & bankmachine1_syncfifo1_writable) & (~bankmachine1_replace))) begin
        if ((~bankmachine1_do_read)) begin
            bankmachine1_level <= (bankmachine1_level + 1'd1);
        end
    end else begin
        if (bankmachine1_do_read) begin
            bankmachine1_level <= (bankmachine1_level - 1'd1);
        end
    end
    if (((~bankmachine1_pipe_valid_source_valid) | bankmachine1_pipe_valid_source_ready)) begin
        bankmachine1_pipe_valid_source_valid <= bankmachine1_pipe_valid_sink_valid;
        bankmachine1_pipe_valid_source_first <= bankmachine1_pipe_valid_sink_first;
        bankmachine1_pipe_valid_source_last <= bankmachine1_pipe_valid_sink_last;
        bankmachine1_pipe_valid_source_payload_we <= bankmachine1_pipe_valid_sink_payload_we;
        bankmachine1_pipe_valid_source_payload_addr <= bankmachine1_pipe_valid_sink_payload_addr;
    end
    if (bankmachine1_twtpcon_valid) begin
        bankmachine1_twtpcon_count <= 3'd4;
        if (1'd0) begin
            bankmachine1_twtpcon_ready <= 1'd1;
        end else begin
            bankmachine1_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine1_twtpcon_ready)) begin
            bankmachine1_twtpcon_count <= (bankmachine1_twtpcon_count - 1'd1);
            if ((bankmachine1_twtpcon_count == 1'd1)) begin
                bankmachine1_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine1_trccon_valid) begin
        bankmachine1_trccon_count <= 2'd3;
        if (1'd0) begin
            bankmachine1_trccon_ready <= 1'd1;
        end else begin
            bankmachine1_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine1_trccon_ready)) begin
            bankmachine1_trccon_count <= (bankmachine1_trccon_count - 1'd1);
            if ((bankmachine1_trccon_count == 1'd1)) begin
                bankmachine1_trccon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine1_trascon_valid) begin
        bankmachine1_trascon_count <= 2'd2;
        if (1'd0) begin
            bankmachine1_trascon_ready <= 1'd1;
        end else begin
            bankmachine1_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine1_trascon_ready)) begin
            bankmachine1_trascon_count <= (bankmachine1_trascon_count - 1'd1);
            if ((bankmachine1_trascon_count == 1'd1)) begin
                bankmachine1_trascon_ready <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_bankmachine1_state <= litedramcore_litedramcore_bankmachine1_next_state;
    if (bankmachine2_row_close) begin
        bankmachine2_row_opened <= 1'd0;
    end else begin
        if (bankmachine2_row_open) begin
            bankmachine2_row_opened <= 1'd1;
            bankmachine2_row <= bankmachine2_source_source_payload_addr[20:7];
        end
    end
    if (((bankmachine2_syncfifo2_we & bankmachine2_syncfifo2_writable) & (~bankmachine2_replace))) begin
        bankmachine2_produce <= (bankmachine2_produce + 1'd1);
    end
    if (bankmachine2_do_read) begin
        bankmachine2_consume <= (bankmachine2_consume + 1'd1);
    end
    if (((bankmachine2_syncfifo2_we & bankmachine2_syncfifo2_writable) & (~bankmachine2_replace))) begin
        if ((~bankmachine2_do_read)) begin
            bankmachine2_level <= (bankmachine2_level + 1'd1);
        end
    end else begin
        if (bankmachine2_do_read) begin
            bankmachine2_level <= (bankmachine2_level - 1'd1);
        end
    end
    if (((~bankmachine2_pipe_valid_source_valid) | bankmachine2_pipe_valid_source_ready)) begin
        bankmachine2_pipe_valid_source_valid <= bankmachine2_pipe_valid_sink_valid;
        bankmachine2_pipe_valid_source_first <= bankmachine2_pipe_valid_sink_first;
        bankmachine2_pipe_valid_source_last <= bankmachine2_pipe_valid_sink_last;
        bankmachine2_pipe_valid_source_payload_we <= bankmachine2_pipe_valid_sink_payload_we;
        bankmachine2_pipe_valid_source_payload_addr <= bankmachine2_pipe_valid_sink_payload_addr;
    end
    if (bankmachine2_twtpcon_valid) begin
        bankmachine2_twtpcon_count <= 3'd4;
        if (1'd0) begin
            bankmachine2_twtpcon_ready <= 1'd1;
        end else begin
            bankmachine2_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine2_twtpcon_ready)) begin
            bankmachine2_twtpcon_count <= (bankmachine2_twtpcon_count - 1'd1);
            if ((bankmachine2_twtpcon_count == 1'd1)) begin
                bankmachine2_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine2_trccon_valid) begin
        bankmachine2_trccon_count <= 2'd3;
        if (1'd0) begin
            bankmachine2_trccon_ready <= 1'd1;
        end else begin
            bankmachine2_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine2_trccon_ready)) begin
            bankmachine2_trccon_count <= (bankmachine2_trccon_count - 1'd1);
            if ((bankmachine2_trccon_count == 1'd1)) begin
                bankmachine2_trccon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine2_trascon_valid) begin
        bankmachine2_trascon_count <= 2'd2;
        if (1'd0) begin
            bankmachine2_trascon_ready <= 1'd1;
        end else begin
            bankmachine2_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine2_trascon_ready)) begin
            bankmachine2_trascon_count <= (bankmachine2_trascon_count - 1'd1);
            if ((bankmachine2_trascon_count == 1'd1)) begin
                bankmachine2_trascon_ready <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_bankmachine2_state <= litedramcore_litedramcore_bankmachine2_next_state;
    if (bankmachine3_row_close) begin
        bankmachine3_row_opened <= 1'd0;
    end else begin
        if (bankmachine3_row_open) begin
            bankmachine3_row_opened <= 1'd1;
            bankmachine3_row <= bankmachine3_source_source_payload_addr[20:7];
        end
    end
    if (((bankmachine3_syncfifo3_we & bankmachine3_syncfifo3_writable) & (~bankmachine3_replace))) begin
        bankmachine3_produce <= (bankmachine3_produce + 1'd1);
    end
    if (bankmachine3_do_read) begin
        bankmachine3_consume <= (bankmachine3_consume + 1'd1);
    end
    if (((bankmachine3_syncfifo3_we & bankmachine3_syncfifo3_writable) & (~bankmachine3_replace))) begin
        if ((~bankmachine3_do_read)) begin
            bankmachine3_level <= (bankmachine3_level + 1'd1);
        end
    end else begin
        if (bankmachine3_do_read) begin
            bankmachine3_level <= (bankmachine3_level - 1'd1);
        end
    end
    if (((~bankmachine3_pipe_valid_source_valid) | bankmachine3_pipe_valid_source_ready)) begin
        bankmachine3_pipe_valid_source_valid <= bankmachine3_pipe_valid_sink_valid;
        bankmachine3_pipe_valid_source_first <= bankmachine3_pipe_valid_sink_first;
        bankmachine3_pipe_valid_source_last <= bankmachine3_pipe_valid_sink_last;
        bankmachine3_pipe_valid_source_payload_we <= bankmachine3_pipe_valid_sink_payload_we;
        bankmachine3_pipe_valid_source_payload_addr <= bankmachine3_pipe_valid_sink_payload_addr;
    end
    if (bankmachine3_twtpcon_valid) begin
        bankmachine3_twtpcon_count <= 3'd4;
        if (1'd0) begin
            bankmachine3_twtpcon_ready <= 1'd1;
        end else begin
            bankmachine3_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine3_twtpcon_ready)) begin
            bankmachine3_twtpcon_count <= (bankmachine3_twtpcon_count - 1'd1);
            if ((bankmachine3_twtpcon_count == 1'd1)) begin
                bankmachine3_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine3_trccon_valid) begin
        bankmachine3_trccon_count <= 2'd3;
        if (1'd0) begin
            bankmachine3_trccon_ready <= 1'd1;
        end else begin
            bankmachine3_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine3_trccon_ready)) begin
            bankmachine3_trccon_count <= (bankmachine3_trccon_count - 1'd1);
            if ((bankmachine3_trccon_count == 1'd1)) begin
                bankmachine3_trccon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine3_trascon_valid) begin
        bankmachine3_trascon_count <= 2'd2;
        if (1'd0) begin
            bankmachine3_trascon_ready <= 1'd1;
        end else begin
            bankmachine3_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine3_trascon_ready)) begin
            bankmachine3_trascon_count <= (bankmachine3_trascon_count - 1'd1);
            if ((bankmachine3_trascon_count == 1'd1)) begin
                bankmachine3_trascon_ready <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_bankmachine3_state <= litedramcore_litedramcore_bankmachine3_next_state;
    if (bankmachine4_row_close) begin
        bankmachine4_row_opened <= 1'd0;
    end else begin
        if (bankmachine4_row_open) begin
            bankmachine4_row_opened <= 1'd1;
            bankmachine4_row <= bankmachine4_source_source_payload_addr[20:7];
        end
    end
    if (((bankmachine4_syncfifo4_we & bankmachine4_syncfifo4_writable) & (~bankmachine4_replace))) begin
        bankmachine4_produce <= (bankmachine4_produce + 1'd1);
    end
    if (bankmachine4_do_read) begin
        bankmachine4_consume <= (bankmachine4_consume + 1'd1);
    end
    if (((bankmachine4_syncfifo4_we & bankmachine4_syncfifo4_writable) & (~bankmachine4_replace))) begin
        if ((~bankmachine4_do_read)) begin
            bankmachine4_level <= (bankmachine4_level + 1'd1);
        end
    end else begin
        if (bankmachine4_do_read) begin
            bankmachine4_level <= (bankmachine4_level - 1'd1);
        end
    end
    if (((~bankmachine4_pipe_valid_source_valid) | bankmachine4_pipe_valid_source_ready)) begin
        bankmachine4_pipe_valid_source_valid <= bankmachine4_pipe_valid_sink_valid;
        bankmachine4_pipe_valid_source_first <= bankmachine4_pipe_valid_sink_first;
        bankmachine4_pipe_valid_source_last <= bankmachine4_pipe_valid_sink_last;
        bankmachine4_pipe_valid_source_payload_we <= bankmachine4_pipe_valid_sink_payload_we;
        bankmachine4_pipe_valid_source_payload_addr <= bankmachine4_pipe_valid_sink_payload_addr;
    end
    if (bankmachine4_twtpcon_valid) begin
        bankmachine4_twtpcon_count <= 3'd4;
        if (1'd0) begin
            bankmachine4_twtpcon_ready <= 1'd1;
        end else begin
            bankmachine4_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine4_twtpcon_ready)) begin
            bankmachine4_twtpcon_count <= (bankmachine4_twtpcon_count - 1'd1);
            if ((bankmachine4_twtpcon_count == 1'd1)) begin
                bankmachine4_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine4_trccon_valid) begin
        bankmachine4_trccon_count <= 2'd3;
        if (1'd0) begin
            bankmachine4_trccon_ready <= 1'd1;
        end else begin
            bankmachine4_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine4_trccon_ready)) begin
            bankmachine4_trccon_count <= (bankmachine4_trccon_count - 1'd1);
            if ((bankmachine4_trccon_count == 1'd1)) begin
                bankmachine4_trccon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine4_trascon_valid) begin
        bankmachine4_trascon_count <= 2'd2;
        if (1'd0) begin
            bankmachine4_trascon_ready <= 1'd1;
        end else begin
            bankmachine4_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine4_trascon_ready)) begin
            bankmachine4_trascon_count <= (bankmachine4_trascon_count - 1'd1);
            if ((bankmachine4_trascon_count == 1'd1)) begin
                bankmachine4_trascon_ready <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_bankmachine4_state <= litedramcore_litedramcore_bankmachine4_next_state;
    if (bankmachine5_row_close) begin
        bankmachine5_row_opened <= 1'd0;
    end else begin
        if (bankmachine5_row_open) begin
            bankmachine5_row_opened <= 1'd1;
            bankmachine5_row <= bankmachine5_source_source_payload_addr[20:7];
        end
    end
    if (((bankmachine5_syncfifo5_we & bankmachine5_syncfifo5_writable) & (~bankmachine5_replace))) begin
        bankmachine5_produce <= (bankmachine5_produce + 1'd1);
    end
    if (bankmachine5_do_read) begin
        bankmachine5_consume <= (bankmachine5_consume + 1'd1);
    end
    if (((bankmachine5_syncfifo5_we & bankmachine5_syncfifo5_writable) & (~bankmachine5_replace))) begin
        if ((~bankmachine5_do_read)) begin
            bankmachine5_level <= (bankmachine5_level + 1'd1);
        end
    end else begin
        if (bankmachine5_do_read) begin
            bankmachine5_level <= (bankmachine5_level - 1'd1);
        end
    end
    if (((~bankmachine5_pipe_valid_source_valid) | bankmachine5_pipe_valid_source_ready)) begin
        bankmachine5_pipe_valid_source_valid <= bankmachine5_pipe_valid_sink_valid;
        bankmachine5_pipe_valid_source_first <= bankmachine5_pipe_valid_sink_first;
        bankmachine5_pipe_valid_source_last <= bankmachine5_pipe_valid_sink_last;
        bankmachine5_pipe_valid_source_payload_we <= bankmachine5_pipe_valid_sink_payload_we;
        bankmachine5_pipe_valid_source_payload_addr <= bankmachine5_pipe_valid_sink_payload_addr;
    end
    if (bankmachine5_twtpcon_valid) begin
        bankmachine5_twtpcon_count <= 3'd4;
        if (1'd0) begin
            bankmachine5_twtpcon_ready <= 1'd1;
        end else begin
            bankmachine5_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine5_twtpcon_ready)) begin
            bankmachine5_twtpcon_count <= (bankmachine5_twtpcon_count - 1'd1);
            if ((bankmachine5_twtpcon_count == 1'd1)) begin
                bankmachine5_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine5_trccon_valid) begin
        bankmachine5_trccon_count <= 2'd3;
        if (1'd0) begin
            bankmachine5_trccon_ready <= 1'd1;
        end else begin
            bankmachine5_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine5_trccon_ready)) begin
            bankmachine5_trccon_count <= (bankmachine5_trccon_count - 1'd1);
            if ((bankmachine5_trccon_count == 1'd1)) begin
                bankmachine5_trccon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine5_trascon_valid) begin
        bankmachine5_trascon_count <= 2'd2;
        if (1'd0) begin
            bankmachine5_trascon_ready <= 1'd1;
        end else begin
            bankmachine5_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine5_trascon_ready)) begin
            bankmachine5_trascon_count <= (bankmachine5_trascon_count - 1'd1);
            if ((bankmachine5_trascon_count == 1'd1)) begin
                bankmachine5_trascon_ready <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_bankmachine5_state <= litedramcore_litedramcore_bankmachine5_next_state;
    if (bankmachine6_row_close) begin
        bankmachine6_row_opened <= 1'd0;
    end else begin
        if (bankmachine6_row_open) begin
            bankmachine6_row_opened <= 1'd1;
            bankmachine6_row <= bankmachine6_source_source_payload_addr[20:7];
        end
    end
    if (((bankmachine6_syncfifo6_we & bankmachine6_syncfifo6_writable) & (~bankmachine6_replace))) begin
        bankmachine6_produce <= (bankmachine6_produce + 1'd1);
    end
    if (bankmachine6_do_read) begin
        bankmachine6_consume <= (bankmachine6_consume + 1'd1);
    end
    if (((bankmachine6_syncfifo6_we & bankmachine6_syncfifo6_writable) & (~bankmachine6_replace))) begin
        if ((~bankmachine6_do_read)) begin
            bankmachine6_level <= (bankmachine6_level + 1'd1);
        end
    end else begin
        if (bankmachine6_do_read) begin
            bankmachine6_level <= (bankmachine6_level - 1'd1);
        end
    end
    if (((~bankmachine6_pipe_valid_source_valid) | bankmachine6_pipe_valid_source_ready)) begin
        bankmachine6_pipe_valid_source_valid <= bankmachine6_pipe_valid_sink_valid;
        bankmachine6_pipe_valid_source_first <= bankmachine6_pipe_valid_sink_first;
        bankmachine6_pipe_valid_source_last <= bankmachine6_pipe_valid_sink_last;
        bankmachine6_pipe_valid_source_payload_we <= bankmachine6_pipe_valid_sink_payload_we;
        bankmachine6_pipe_valid_source_payload_addr <= bankmachine6_pipe_valid_sink_payload_addr;
    end
    if (bankmachine6_twtpcon_valid) begin
        bankmachine6_twtpcon_count <= 3'd4;
        if (1'd0) begin
            bankmachine6_twtpcon_ready <= 1'd1;
        end else begin
            bankmachine6_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine6_twtpcon_ready)) begin
            bankmachine6_twtpcon_count <= (bankmachine6_twtpcon_count - 1'd1);
            if ((bankmachine6_twtpcon_count == 1'd1)) begin
                bankmachine6_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine6_trccon_valid) begin
        bankmachine6_trccon_count <= 2'd3;
        if (1'd0) begin
            bankmachine6_trccon_ready <= 1'd1;
        end else begin
            bankmachine6_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine6_trccon_ready)) begin
            bankmachine6_trccon_count <= (bankmachine6_trccon_count - 1'd1);
            if ((bankmachine6_trccon_count == 1'd1)) begin
                bankmachine6_trccon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine6_trascon_valid) begin
        bankmachine6_trascon_count <= 2'd2;
        if (1'd0) begin
            bankmachine6_trascon_ready <= 1'd1;
        end else begin
            bankmachine6_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine6_trascon_ready)) begin
            bankmachine6_trascon_count <= (bankmachine6_trascon_count - 1'd1);
            if ((bankmachine6_trascon_count == 1'd1)) begin
                bankmachine6_trascon_ready <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_bankmachine6_state <= litedramcore_litedramcore_bankmachine6_next_state;
    if (bankmachine7_row_close) begin
        bankmachine7_row_opened <= 1'd0;
    end else begin
        if (bankmachine7_row_open) begin
            bankmachine7_row_opened <= 1'd1;
            bankmachine7_row <= bankmachine7_source_source_payload_addr[20:7];
        end
    end
    if (((bankmachine7_syncfifo7_we & bankmachine7_syncfifo7_writable) & (~bankmachine7_replace))) begin
        bankmachine7_produce <= (bankmachine7_produce + 1'd1);
    end
    if (bankmachine7_do_read) begin
        bankmachine7_consume <= (bankmachine7_consume + 1'd1);
    end
    if (((bankmachine7_syncfifo7_we & bankmachine7_syncfifo7_writable) & (~bankmachine7_replace))) begin
        if ((~bankmachine7_do_read)) begin
            bankmachine7_level <= (bankmachine7_level + 1'd1);
        end
    end else begin
        if (bankmachine7_do_read) begin
            bankmachine7_level <= (bankmachine7_level - 1'd1);
        end
    end
    if (((~bankmachine7_pipe_valid_source_valid) | bankmachine7_pipe_valid_source_ready)) begin
        bankmachine7_pipe_valid_source_valid <= bankmachine7_pipe_valid_sink_valid;
        bankmachine7_pipe_valid_source_first <= bankmachine7_pipe_valid_sink_first;
        bankmachine7_pipe_valid_source_last <= bankmachine7_pipe_valid_sink_last;
        bankmachine7_pipe_valid_source_payload_we <= bankmachine7_pipe_valid_sink_payload_we;
        bankmachine7_pipe_valid_source_payload_addr <= bankmachine7_pipe_valid_sink_payload_addr;
    end
    if (bankmachine7_twtpcon_valid) begin
        bankmachine7_twtpcon_count <= 3'd4;
        if (1'd0) begin
            bankmachine7_twtpcon_ready <= 1'd1;
        end else begin
            bankmachine7_twtpcon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine7_twtpcon_ready)) begin
            bankmachine7_twtpcon_count <= (bankmachine7_twtpcon_count - 1'd1);
            if ((bankmachine7_twtpcon_count == 1'd1)) begin
                bankmachine7_twtpcon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine7_trccon_valid) begin
        bankmachine7_trccon_count <= 2'd3;
        if (1'd0) begin
            bankmachine7_trccon_ready <= 1'd1;
        end else begin
            bankmachine7_trccon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine7_trccon_ready)) begin
            bankmachine7_trccon_count <= (bankmachine7_trccon_count - 1'd1);
            if ((bankmachine7_trccon_count == 1'd1)) begin
                bankmachine7_trccon_ready <= 1'd1;
            end
        end
    end
    if (bankmachine7_trascon_valid) begin
        bankmachine7_trascon_count <= 2'd2;
        if (1'd0) begin
            bankmachine7_trascon_ready <= 1'd1;
        end else begin
            bankmachine7_trascon_ready <= 1'd0;
        end
    end else begin
        if ((~bankmachine7_trascon_ready)) begin
            bankmachine7_trascon_count <= (bankmachine7_trascon_count - 1'd1);
            if ((bankmachine7_trascon_count == 1'd1)) begin
                bankmachine7_trascon_ready <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_bankmachine7_state <= litedramcore_litedramcore_bankmachine7_next_state;
    if ((~en0)) begin
        time0 <= 5'd31;
    end else begin
        if ((~max_time0)) begin
            time0 <= (time0 - 1'd1);
        end
    end
    if ((~en1)) begin
        time1 <= 4'd15;
    end else begin
        if ((~max_time1)) begin
            time1 <= (time1 - 1'd1);
        end
    end
    if (choose_cmd_ce) begin
        case (choose_cmd_grant)
            1'd0: begin
                if (choose_cmd_request[1]) begin
                    choose_cmd_grant <= 1'd1;
                end else begin
                    if (choose_cmd_request[2]) begin
                        choose_cmd_grant <= 2'd2;
                    end else begin
                        if (choose_cmd_request[3]) begin
                            choose_cmd_grant <= 2'd3;
                        end else begin
                            if (choose_cmd_request[4]) begin
                                choose_cmd_grant <= 3'd4;
                            end else begin
                                if (choose_cmd_request[5]) begin
                                    choose_cmd_grant <= 3'd5;
                                end else begin
                                    if (choose_cmd_request[6]) begin
                                        choose_cmd_grant <= 3'd6;
                                    end else begin
                                        if (choose_cmd_request[7]) begin
                                            choose_cmd_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (choose_cmd_request[2]) begin
                    choose_cmd_grant <= 2'd2;
                end else begin
                    if (choose_cmd_request[3]) begin
                        choose_cmd_grant <= 2'd3;
                    end else begin
                        if (choose_cmd_request[4]) begin
                            choose_cmd_grant <= 3'd4;
                        end else begin
                            if (choose_cmd_request[5]) begin
                                choose_cmd_grant <= 3'd5;
                            end else begin
                                if (choose_cmd_request[6]) begin
                                    choose_cmd_grant <= 3'd6;
                                end else begin
                                    if (choose_cmd_request[7]) begin
                                        choose_cmd_grant <= 3'd7;
                                    end else begin
                                        if (choose_cmd_request[0]) begin
                                            choose_cmd_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (choose_cmd_request[3]) begin
                    choose_cmd_grant <= 2'd3;
                end else begin
                    if (choose_cmd_request[4]) begin
                        choose_cmd_grant <= 3'd4;
                    end else begin
                        if (choose_cmd_request[5]) begin
                            choose_cmd_grant <= 3'd5;
                        end else begin
                            if (choose_cmd_request[6]) begin
                                choose_cmd_grant <= 3'd6;
                            end else begin
                                if (choose_cmd_request[7]) begin
                                    choose_cmd_grant <= 3'd7;
                                end else begin
                                    if (choose_cmd_request[0]) begin
                                        choose_cmd_grant <= 1'd0;
                                    end else begin
                                        if (choose_cmd_request[1]) begin
                                            choose_cmd_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (choose_cmd_request[4]) begin
                    choose_cmd_grant <= 3'd4;
                end else begin
                    if (choose_cmd_request[5]) begin
                        choose_cmd_grant <= 3'd5;
                    end else begin
                        if (choose_cmd_request[6]) begin
                            choose_cmd_grant <= 3'd6;
                        end else begin
                            if (choose_cmd_request[7]) begin
                                choose_cmd_grant <= 3'd7;
                            end else begin
                                if (choose_cmd_request[0]) begin
                                    choose_cmd_grant <= 1'd0;
                                end else begin
                                    if (choose_cmd_request[1]) begin
                                        choose_cmd_grant <= 1'd1;
                                    end else begin
                                        if (choose_cmd_request[2]) begin
                                            choose_cmd_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (choose_cmd_request[5]) begin
                    choose_cmd_grant <= 3'd5;
                end else begin
                    if (choose_cmd_request[6]) begin
                        choose_cmd_grant <= 3'd6;
                    end else begin
                        if (choose_cmd_request[7]) begin
                            choose_cmd_grant <= 3'd7;
                        end else begin
                            if (choose_cmd_request[0]) begin
                                choose_cmd_grant <= 1'd0;
                            end else begin
                                if (choose_cmd_request[1]) begin
                                    choose_cmd_grant <= 1'd1;
                                end else begin
                                    if (choose_cmd_request[2]) begin
                                        choose_cmd_grant <= 2'd2;
                                    end else begin
                                        if (choose_cmd_request[3]) begin
                                            choose_cmd_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (choose_cmd_request[6]) begin
                    choose_cmd_grant <= 3'd6;
                end else begin
                    if (choose_cmd_request[7]) begin
                        choose_cmd_grant <= 3'd7;
                    end else begin
                        if (choose_cmd_request[0]) begin
                            choose_cmd_grant <= 1'd0;
                        end else begin
                            if (choose_cmd_request[1]) begin
                                choose_cmd_grant <= 1'd1;
                            end else begin
                                if (choose_cmd_request[2]) begin
                                    choose_cmd_grant <= 2'd2;
                                end else begin
                                    if (choose_cmd_request[3]) begin
                                        choose_cmd_grant <= 2'd3;
                                    end else begin
                                        if (choose_cmd_request[4]) begin
                                            choose_cmd_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (choose_cmd_request[7]) begin
                    choose_cmd_grant <= 3'd7;
                end else begin
                    if (choose_cmd_request[0]) begin
                        choose_cmd_grant <= 1'd0;
                    end else begin
                        if (choose_cmd_request[1]) begin
                            choose_cmd_grant <= 1'd1;
                        end else begin
                            if (choose_cmd_request[2]) begin
                                choose_cmd_grant <= 2'd2;
                            end else begin
                                if (choose_cmd_request[3]) begin
                                    choose_cmd_grant <= 2'd3;
                                end else begin
                                    if (choose_cmd_request[4]) begin
                                        choose_cmd_grant <= 3'd4;
                                    end else begin
                                        if (choose_cmd_request[5]) begin
                                            choose_cmd_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (choose_cmd_request[0]) begin
                    choose_cmd_grant <= 1'd0;
                end else begin
                    if (choose_cmd_request[1]) begin
                        choose_cmd_grant <= 1'd1;
                    end else begin
                        if (choose_cmd_request[2]) begin
                            choose_cmd_grant <= 2'd2;
                        end else begin
                            if (choose_cmd_request[3]) begin
                                choose_cmd_grant <= 2'd3;
                            end else begin
                                if (choose_cmd_request[4]) begin
                                    choose_cmd_grant <= 3'd4;
                                end else begin
                                    if (choose_cmd_request[5]) begin
                                        choose_cmd_grant <= 3'd5;
                                    end else begin
                                        if (choose_cmd_request[6]) begin
                                            choose_cmd_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    if (choose_req_ce) begin
        case (choose_req_grant)
            1'd0: begin
                if (choose_req_request[1]) begin
                    choose_req_grant <= 1'd1;
                end else begin
                    if (choose_req_request[2]) begin
                        choose_req_grant <= 2'd2;
                    end else begin
                        if (choose_req_request[3]) begin
                            choose_req_grant <= 2'd3;
                        end else begin
                            if (choose_req_request[4]) begin
                                choose_req_grant <= 3'd4;
                            end else begin
                                if (choose_req_request[5]) begin
                                    choose_req_grant <= 3'd5;
                                end else begin
                                    if (choose_req_request[6]) begin
                                        choose_req_grant <= 3'd6;
                                    end else begin
                                        if (choose_req_request[7]) begin
                                            choose_req_grant <= 3'd7;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            1'd1: begin
                if (choose_req_request[2]) begin
                    choose_req_grant <= 2'd2;
                end else begin
                    if (choose_req_request[3]) begin
                        choose_req_grant <= 2'd3;
                    end else begin
                        if (choose_req_request[4]) begin
                            choose_req_grant <= 3'd4;
                        end else begin
                            if (choose_req_request[5]) begin
                                choose_req_grant <= 3'd5;
                            end else begin
                                if (choose_req_request[6]) begin
                                    choose_req_grant <= 3'd6;
                                end else begin
                                    if (choose_req_request[7]) begin
                                        choose_req_grant <= 3'd7;
                                    end else begin
                                        if (choose_req_request[0]) begin
                                            choose_req_grant <= 1'd0;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd2: begin
                if (choose_req_request[3]) begin
                    choose_req_grant <= 2'd3;
                end else begin
                    if (choose_req_request[4]) begin
                        choose_req_grant <= 3'd4;
                    end else begin
                        if (choose_req_request[5]) begin
                            choose_req_grant <= 3'd5;
                        end else begin
                            if (choose_req_request[6]) begin
                                choose_req_grant <= 3'd6;
                            end else begin
                                if (choose_req_request[7]) begin
                                    choose_req_grant <= 3'd7;
                                end else begin
                                    if (choose_req_request[0]) begin
                                        choose_req_grant <= 1'd0;
                                    end else begin
                                        if (choose_req_request[1]) begin
                                            choose_req_grant <= 1'd1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            2'd3: begin
                if (choose_req_request[4]) begin
                    choose_req_grant <= 3'd4;
                end else begin
                    if (choose_req_request[5]) begin
                        choose_req_grant <= 3'd5;
                    end else begin
                        if (choose_req_request[6]) begin
                            choose_req_grant <= 3'd6;
                        end else begin
                            if (choose_req_request[7]) begin
                                choose_req_grant <= 3'd7;
                            end else begin
                                if (choose_req_request[0]) begin
                                    choose_req_grant <= 1'd0;
                                end else begin
                                    if (choose_req_request[1]) begin
                                        choose_req_grant <= 1'd1;
                                    end else begin
                                        if (choose_req_request[2]) begin
                                            choose_req_grant <= 2'd2;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd4: begin
                if (choose_req_request[5]) begin
                    choose_req_grant <= 3'd5;
                end else begin
                    if (choose_req_request[6]) begin
                        choose_req_grant <= 3'd6;
                    end else begin
                        if (choose_req_request[7]) begin
                            choose_req_grant <= 3'd7;
                        end else begin
                            if (choose_req_request[0]) begin
                                choose_req_grant <= 1'd0;
                            end else begin
                                if (choose_req_request[1]) begin
                                    choose_req_grant <= 1'd1;
                                end else begin
                                    if (choose_req_request[2]) begin
                                        choose_req_grant <= 2'd2;
                                    end else begin
                                        if (choose_req_request[3]) begin
                                            choose_req_grant <= 2'd3;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd5: begin
                if (choose_req_request[6]) begin
                    choose_req_grant <= 3'd6;
                end else begin
                    if (choose_req_request[7]) begin
                        choose_req_grant <= 3'd7;
                    end else begin
                        if (choose_req_request[0]) begin
                            choose_req_grant <= 1'd0;
                        end else begin
                            if (choose_req_request[1]) begin
                                choose_req_grant <= 1'd1;
                            end else begin
                                if (choose_req_request[2]) begin
                                    choose_req_grant <= 2'd2;
                                end else begin
                                    if (choose_req_request[3]) begin
                                        choose_req_grant <= 2'd3;
                                    end else begin
                                        if (choose_req_request[4]) begin
                                            choose_req_grant <= 3'd4;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd6: begin
                if (choose_req_request[7]) begin
                    choose_req_grant <= 3'd7;
                end else begin
                    if (choose_req_request[0]) begin
                        choose_req_grant <= 1'd0;
                    end else begin
                        if (choose_req_request[1]) begin
                            choose_req_grant <= 1'd1;
                        end else begin
                            if (choose_req_request[2]) begin
                                choose_req_grant <= 2'd2;
                            end else begin
                                if (choose_req_request[3]) begin
                                    choose_req_grant <= 2'd3;
                                end else begin
                                    if (choose_req_request[4]) begin
                                        choose_req_grant <= 3'd4;
                                    end else begin
                                        if (choose_req_request[5]) begin
                                            choose_req_grant <= 3'd5;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
            3'd7: begin
                if (choose_req_request[0]) begin
                    choose_req_grant <= 1'd0;
                end else begin
                    if (choose_req_request[1]) begin
                        choose_req_grant <= 1'd1;
                    end else begin
                        if (choose_req_request[2]) begin
                            choose_req_grant <= 2'd2;
                        end else begin
                            if (choose_req_request[3]) begin
                                choose_req_grant <= 2'd3;
                            end else begin
                                if (choose_req_request[4]) begin
                                    choose_req_grant <= 3'd4;
                                end else begin
                                    if (choose_req_request[5]) begin
                                        choose_req_grant <= 3'd5;
                                    end else begin
                                        if (choose_req_request[6]) begin
                                            choose_req_grant <= 3'd6;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        endcase
    end
    dfi_p0_cs_n <= 1'd0;
    dfi_p0_bank <= array_muxed0;
    dfi_p0_address <= array_muxed1;
    dfi_p0_cas_n <= (~array_muxed2);
    dfi_p0_ras_n <= (~array_muxed3);
    dfi_p0_we_n <= (~array_muxed4);
    dfi_p0_rddata_en <= array_muxed5;
    dfi_p0_wrdata_en <= array_muxed6;
    dfi_p1_cs_n <= 1'd0;
    dfi_p1_bank <= array_muxed7;
    dfi_p1_address <= array_muxed8;
    dfi_p1_cas_n <= (~array_muxed9);
    dfi_p1_ras_n <= (~array_muxed10);
    dfi_p1_we_n <= (~array_muxed11);
    dfi_p1_rddata_en <= array_muxed12;
    dfi_p1_wrdata_en <= array_muxed13;
    dfi_p2_cs_n <= 1'd0;
    dfi_p2_bank <= array_muxed14;
    dfi_p2_address <= array_muxed15;
    dfi_p2_cas_n <= (~array_muxed16);
    dfi_p2_ras_n <= (~array_muxed17);
    dfi_p2_we_n <= (~array_muxed18);
    dfi_p2_rddata_en <= array_muxed19;
    dfi_p2_wrdata_en <= array_muxed20;
    dfi_p3_cs_n <= 1'd0;
    dfi_p3_bank <= array_muxed21;
    dfi_p3_address <= array_muxed22;
    dfi_p3_cas_n <= (~array_muxed23);
    dfi_p3_ras_n <= (~array_muxed24);
    dfi_p3_we_n <= (~array_muxed25);
    dfi_p3_rddata_en <= array_muxed26;
    dfi_p3_wrdata_en <= array_muxed27;
    if (trrdcon_valid) begin
        trrdcon_count <= 1'd1;
        if (1'd0) begin
            trrdcon_ready <= 1'd1;
        end else begin
            trrdcon_ready <= 1'd0;
        end
    end else begin
        if ((~trrdcon_ready)) begin
            trrdcon_count <= (trrdcon_count - 1'd1);
            if ((trrdcon_count == 1'd1)) begin
                trrdcon_ready <= 1'd1;
            end
        end
    end
    tfawcon_window <= {tfawcon_window, tfawcon_valid};
    if ((tfawcon_count < 3'd4)) begin
        if ((tfawcon_count == 2'd3)) begin
            tfawcon_ready <= (~tfawcon_valid);
        end else begin
            tfawcon_ready <= 1'd1;
        end
    end
    if (tccdcon_valid) begin
        tccdcon_count <= 1'd0;
        if (1'd1) begin
            tccdcon_ready <= 1'd1;
        end else begin
            tccdcon_ready <= 1'd0;
        end
    end else begin
        if ((~tccdcon_ready)) begin
            tccdcon_count <= (tccdcon_count - 1'd1);
            if ((tccdcon_count == 1'd1)) begin
                tccdcon_ready <= 1'd1;
            end
        end
    end
    if (twtrcon_valid) begin
        twtrcon_count <= 3'd4;
        if (1'd0) begin
            twtrcon_ready <= 1'd1;
        end else begin
            twtrcon_ready <= 1'd0;
        end
    end else begin
        if ((~twtrcon_ready)) begin
            twtrcon_count <= (twtrcon_count - 1'd1);
            if ((twtrcon_count == 1'd1)) begin
                twtrcon_ready <= 1'd1;
            end
        end
    end
    litedramcore_litedramcore_multiplexer_state <= litedramcore_litedramcore_multiplexer_next_state;
    litedramcore_litedramcore_new_master_wdata_ready0 <= ((((((((1'd0 | ((litedramcore_litedramcore_roundrobin0_grant == 1'd0) & interface_bank0_wdata_ready)) | ((litedramcore_litedramcore_roundrobin1_grant == 1'd0) & interface_bank1_wdata_ready)) | ((litedramcore_litedramcore_roundrobin2_grant == 1'd0) & interface_bank2_wdata_ready)) | ((litedramcore_litedramcore_roundrobin3_grant == 1'd0) & interface_bank3_wdata_ready)) | ((litedramcore_litedramcore_roundrobin4_grant == 1'd0) & interface_bank4_wdata_ready)) | ((litedramcore_litedramcore_roundrobin5_grant == 1'd0) & interface_bank5_wdata_ready)) | ((litedramcore_litedramcore_roundrobin6_grant == 1'd0) & interface_bank6_wdata_ready)) | ((litedramcore_litedramcore_roundrobin7_grant == 1'd0) & interface_bank7_wdata_ready));
    litedramcore_litedramcore_new_master_wdata_ready1 <= litedramcore_litedramcore_new_master_wdata_ready0;
    litedramcore_litedramcore_new_master_rdata_valid0 <= ((((((((1'd0 | ((litedramcore_litedramcore_roundrobin0_grant == 1'd0) & interface_bank0_rdata_valid)) | ((litedramcore_litedramcore_roundrobin1_grant == 1'd0) & interface_bank1_rdata_valid)) | ((litedramcore_litedramcore_roundrobin2_grant == 1'd0) & interface_bank2_rdata_valid)) | ((litedramcore_litedramcore_roundrobin3_grant == 1'd0) & interface_bank3_rdata_valid)) | ((litedramcore_litedramcore_roundrobin4_grant == 1'd0) & interface_bank4_rdata_valid)) | ((litedramcore_litedramcore_roundrobin5_grant == 1'd0) & interface_bank5_rdata_valid)) | ((litedramcore_litedramcore_roundrobin6_grant == 1'd0) & interface_bank6_rdata_valid)) | ((litedramcore_litedramcore_roundrobin7_grant == 1'd0) & interface_bank7_rdata_valid));
    litedramcore_litedramcore_new_master_rdata_valid1 <= litedramcore_litedramcore_new_master_rdata_valid0;
    litedramcore_litedramcore_new_master_rdata_valid2 <= litedramcore_litedramcore_new_master_rdata_valid1;
    litedramcore_litedramcore_new_master_rdata_valid3 <= litedramcore_litedramcore_new_master_rdata_valid2;
    litedramcore_litedramcore_new_master_rdata_valid4 <= litedramcore_litedramcore_new_master_rdata_valid3;
    litedramcore_litedramcore_new_master_rdata_valid5 <= litedramcore_litedramcore_new_master_rdata_valid4;
    litedramcore_litedramcore_new_master_rdata_valid6 <= litedramcore_litedramcore_new_master_rdata_valid5;
    litedramcore_litedramcore_new_master_rdata_valid7 <= litedramcore_litedramcore_new_master_rdata_valid6;
    litedramcore_litedramcore_new_master_rdata_valid8 <= litedramcore_litedramcore_new_master_rdata_valid7;
    if (litedramnativeportconverter_wdata_finished) begin
        litedramnativeportconverter_read_lock <= 1'd0;
        litedramnativeportconverter_read_unlocked <= 1'd1;
    end else begin
        if (((litedramnativeportconverter_rw_collision & (~port_cmd_valid)) & (~litedramnativeportconverter_read_unlocked))) begin
            litedramnativeportconverter_read_lock <= 1'd1;
        end
    end
    if ((new_port_cmd_valid & new_port_cmd_ready)) begin
        litedramnativeportconverter_read_unlocked <= 1'd0;
    end
    if ((litedramnativeportconverter_rdata_converter_source_valid & litedramnativeportconverter_rdata_converter_source_ready)) begin
        litedramnativeportconverter_rdata_chunk <= {litedramnativeportconverter_rdata_chunk[2:0], litedramnativeportconverter_rdata_chunk[3]};
    end
    if ((litedramnativeportconverter_wdata_converter_sink_valid & litedramnativeportconverter_wdata_converter_sink_ready)) begin
        litedramnativeportconverter_wdata_chunk <= {litedramnativeportconverter_wdata_chunk[2:0], litedramnativeportconverter_wdata_chunk[3]};
    end
    if (((litedramnativeportconverter_cmd_buffer_source_valid & litedramnativeportconverter_cmd_buffer_source_payload_we) & litedramnativeportconverter_wdata_chunk[3])) begin
        litedramnativeportconverter_wdata_sel <= {{4{litedramnativeportconverter_cmd_buffer_source_payload_sel[3]}}, {4{litedramnativeportconverter_cmd_buffer_source_payload_sel[2]}}, {4{litedramnativeportconverter_cmd_buffer_source_payload_sel[1]}}, {4{litedramnativeportconverter_cmd_buffer_source_payload_sel[0]}}};
    end
    litedramcore_litedramcore_state <= litedramcore_litedramcore_next_state;
    if (litedramnativeportconverter_cmd_addr_litedramcore_next_value_ce0) begin
        litedramnativeportconverter_cmd_addr <= litedramnativeportconverter_cmd_addr_litedramcore_next_value0;
    end
    if (litedramnativeportconverter_cmd_we_litedramcore_next_value_ce1) begin
        litedramnativeportconverter_cmd_we <= litedramnativeportconverter_cmd_we_litedramcore_next_value1;
    end
    if (litedramnativeportconverter_cmd_last_litedramcore_next_value_ce2) begin
        litedramnativeportconverter_cmd_last <= litedramnativeportconverter_cmd_last_litedramcore_next_value2;
    end
    if (litedramnativeportconverter_sel_litedramcore_next_value_ce3) begin
        litedramnativeportconverter_sel <= litedramnativeportconverter_sel_litedramcore_next_value3;
    end
    if (((litedramnativeportconverter_rdata_fifo_syncfifo_we & litedramnativeportconverter_rdata_fifo_syncfifo_writable) & (~litedramnativeportconverter_rdata_fifo_replace))) begin
        if ((litedramnativeportconverter_rdata_fifo_produce == 2'd2)) begin
            litedramnativeportconverter_rdata_fifo_produce <= 1'd0;
        end else begin
            litedramnativeportconverter_rdata_fifo_produce <= (litedramnativeportconverter_rdata_fifo_produce + 1'd1);
        end
    end
    if (litedramnativeportconverter_rdata_fifo_do_read) begin
        if ((litedramnativeportconverter_rdata_fifo_consume == 2'd2)) begin
            litedramnativeportconverter_rdata_fifo_consume <= 1'd0;
        end else begin
            litedramnativeportconverter_rdata_fifo_consume <= (litedramnativeportconverter_rdata_fifo_consume + 1'd1);
        end
    end
    if (((litedramnativeportconverter_rdata_fifo_syncfifo_we & litedramnativeportconverter_rdata_fifo_syncfifo_writable) & (~litedramnativeportconverter_rdata_fifo_replace))) begin
        if ((~litedramnativeportconverter_rdata_fifo_do_read)) begin
            litedramnativeportconverter_rdata_fifo_level <= (litedramnativeportconverter_rdata_fifo_level + 1'd1);
        end
    end else begin
        if (litedramnativeportconverter_rdata_fifo_do_read) begin
            litedramnativeportconverter_rdata_fifo_level <= (litedramnativeportconverter_rdata_fifo_level - 1'd1);
        end
    end
    if ((litedramnativeportconverter_rdata_converter_converter_source_valid & litedramnativeportconverter_rdata_converter_converter_source_ready)) begin
        if (litedramnativeportconverter_rdata_converter_converter_last) begin
            litedramnativeportconverter_rdata_converter_converter_mux <= 1'd0;
        end else begin
            litedramnativeportconverter_rdata_converter_converter_mux <= (litedramnativeportconverter_rdata_converter_converter_mux + 1'd1);
        end
    end
    if (litedramnativeportconverter_wdata_converter_converter_source_ready) begin
        litedramnativeportconverter_wdata_converter_converter_strobe_all <= 1'd0;
    end
    if (litedramnativeportconverter_wdata_converter_converter_load_part) begin
        if (((litedramnativeportconverter_wdata_converter_converter_demux == 2'd3) | litedramnativeportconverter_wdata_converter_converter_sink_last)) begin
            litedramnativeportconverter_wdata_converter_converter_demux <= 1'd0;
            litedramnativeportconverter_wdata_converter_converter_strobe_all <= 1'd1;
        end else begin
            litedramnativeportconverter_wdata_converter_converter_demux <= (litedramnativeportconverter_wdata_converter_converter_demux + 1'd1);
        end
    end
    if ((litedramnativeportconverter_wdata_converter_converter_source_valid & litedramnativeportconverter_wdata_converter_converter_source_ready)) begin
        if ((litedramnativeportconverter_wdata_converter_converter_sink_valid & litedramnativeportconverter_wdata_converter_converter_sink_ready)) begin
            litedramnativeportconverter_wdata_converter_converter_source_first <= litedramnativeportconverter_wdata_converter_converter_sink_first;
            litedramnativeportconverter_wdata_converter_converter_source_last <= litedramnativeportconverter_wdata_converter_converter_sink_last;
        end else begin
            litedramnativeportconverter_wdata_converter_converter_source_first <= 1'd0;
            litedramnativeportconverter_wdata_converter_converter_source_last <= 1'd0;
        end
    end else begin
        if ((litedramnativeportconverter_wdata_converter_converter_sink_valid & litedramnativeportconverter_wdata_converter_converter_sink_ready)) begin
            litedramnativeportconverter_wdata_converter_converter_source_first <= (litedramnativeportconverter_wdata_converter_converter_sink_first | litedramnativeportconverter_wdata_converter_converter_source_first);
            litedramnativeportconverter_wdata_converter_converter_source_last <= (litedramnativeportconverter_wdata_converter_converter_sink_last | litedramnativeportconverter_wdata_converter_converter_source_last);
        end
    end
    if (litedramnativeportconverter_wdata_converter_converter_load_part) begin
        case (litedramnativeportconverter_wdata_converter_converter_demux)
            1'd0: begin
                litedramnativeportconverter_wdata_converter_converter_source_payload_data[35:0] <= litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            1'd1: begin
                litedramnativeportconverter_wdata_converter_converter_source_payload_data[71:36] <= litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            2'd2: begin
                litedramnativeportconverter_wdata_converter_converter_source_payload_data[107:72] <= litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
            2'd3: begin
                litedramnativeportconverter_wdata_converter_converter_source_payload_data[143:108] <= litedramnativeportconverter_wdata_converter_converter_sink_payload_data;
            end
        endcase
    end
    if (litedramnativeportconverter_wdata_converter_converter_load_part) begin
        litedramnativeportconverter_wdata_converter_converter_source_payload_valid_token_count <= (litedramnativeportconverter_wdata_converter_converter_demux + 1'd1);
    end
    if (((litedramnativeportconverter_wdata_fifo_syncfifo_we & litedramnativeportconverter_wdata_fifo_syncfifo_writable) & (~litedramnativeportconverter_wdata_fifo_replace))) begin
        if ((litedramnativeportconverter_wdata_fifo_produce == 2'd2)) begin
            litedramnativeportconverter_wdata_fifo_produce <= 1'd0;
        end else begin
            litedramnativeportconverter_wdata_fifo_produce <= (litedramnativeportconverter_wdata_fifo_produce + 1'd1);
        end
    end
    if (litedramnativeportconverter_wdata_fifo_do_read) begin
        if ((litedramnativeportconverter_wdata_fifo_consume == 2'd2)) begin
            litedramnativeportconverter_wdata_fifo_consume <= 1'd0;
        end else begin
            litedramnativeportconverter_wdata_fifo_consume <= (litedramnativeportconverter_wdata_fifo_consume + 1'd1);
        end
    end
    if (((litedramnativeportconverter_wdata_fifo_syncfifo_we & litedramnativeportconverter_wdata_fifo_syncfifo_writable) & (~litedramnativeportconverter_wdata_fifo_replace))) begin
        if ((~litedramnativeportconverter_wdata_fifo_do_read)) begin
            litedramnativeportconverter_wdata_fifo_level <= (litedramnativeportconverter_wdata_fifo_level + 1'd1);
        end
    end else begin
        if (litedramnativeportconverter_wdata_fifo_do_read) begin
            litedramnativeportconverter_wdata_fifo_level <= (litedramnativeportconverter_wdata_fifo_level - 1'd1);
        end
    end
    if (((~litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid) | litedramnativeportconverter_wdata_buffer_pipe_valid_source_ready)) begin
        litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid <= litedramnativeportconverter_wdata_buffer_pipe_valid_sink_valid;
        litedramnativeportconverter_wdata_buffer_pipe_valid_source_first <= litedramnativeportconverter_wdata_buffer_pipe_valid_sink_first;
        litedramnativeportconverter_wdata_buffer_pipe_valid_source_last <= litedramnativeportconverter_wdata_buffer_pipe_valid_sink_last;
        litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data <= litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_data;
        litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we <= litedramnativeportconverter_wdata_buffer_pipe_valid_sink_payload_we;
    end
    litedramcore_litedramwishbone2native_state <= litedramcore_litedramwishbone2native_next_state;
    if (aborted_litedramwishbone2native_next_value_ce) begin
        aborted <= aborted_litedramwishbone2native_next_value;
    end
    litedramcore_wishbone2csr_state <= litedramcore_wishbone2csr_next_state;
    if (litedramcore_dat_w_wishbone2csr_next_value_ce0) begin
        litedramcore_dat_w <= litedramcore_dat_w_wishbone2csr_next_value0;
    end
    if (litedramcore_adr_wishbone2csr_next_value_ce1) begin
        litedramcore_adr <= litedramcore_adr_wishbone2csr_next_value1;
    end
    if (litedramcore_we_wishbone2csr_next_value_ce2) begin
        litedramcore_we <= litedramcore_we_wishbone2csr_next_value2;
    end
    interface0_bank_bus_dat_r <= 1'd0;
    if (csrbank0_sel) begin
        case (interface0_bank_bus_adr[8:0])
            1'd0: begin
                interface0_bank_bus_dat_r <= csrbank0_init_done0_w;
            end
            1'd1: begin
                interface0_bank_bus_dat_r <= csrbank0_init_error0_w;
            end
        endcase
    end
    if (csrbank0_init_done0_re) begin
        init_done_storage <= csrbank0_init_done0_r;
    end
    init_done_re <= csrbank0_init_done0_re;
    if (csrbank0_init_error0_re) begin
        init_error_storage <= csrbank0_init_error0_r;
    end
    init_error_re <= csrbank0_init_error0_re;
    interface1_bank_bus_dat_r <= 1'd0;
    if (csrbank1_sel) begin
        case (interface1_bank_bus_adr[8:0])
            1'd0: begin
                interface1_bank_bus_dat_r <= csrbank1_rst0_w;
            end
            1'd1: begin
                interface1_bank_bus_dat_r <= csrbank1_dly_sel0_w;
            end
            2'd2: begin
                interface1_bank_bus_dat_r <= csrbank1_half_sys8x_taps0_w;
            end
            2'd3: begin
                interface1_bank_bus_dat_r <= csrbank1_wlevel_en0_w;
            end
            3'd4: begin
                interface1_bank_bus_dat_r <= a7ddrphy_wlevel_strobe_w;
            end
            3'd5: begin
                interface1_bank_bus_dat_r <= a7ddrphy_rdly_dq_rst_w;
            end
            3'd6: begin
                interface1_bank_bus_dat_r <= a7ddrphy_rdly_dq_inc_w;
            end
            3'd7: begin
                interface1_bank_bus_dat_r <= a7ddrphy_rdly_dq_bitslip_rst_w;
            end
            4'd8: begin
                interface1_bank_bus_dat_r <= a7ddrphy_rdly_dq_bitslip_w;
            end
            4'd9: begin
                interface1_bank_bus_dat_r <= a7ddrphy_wdly_dq_bitslip_rst_w;
            end
            4'd10: begin
                interface1_bank_bus_dat_r <= a7ddrphy_wdly_dq_bitslip_w;
            end
            4'd11: begin
                interface1_bank_bus_dat_r <= csrbank1_rdphase0_w;
            end
            4'd12: begin
                interface1_bank_bus_dat_r <= csrbank1_wrphase0_w;
            end
        endcase
    end
    if (csrbank1_rst0_re) begin
        a7ddrphy_rst_storage <= csrbank1_rst0_r;
    end
    a7ddrphy_rst_re <= csrbank1_rst0_re;
    if (csrbank1_dly_sel0_re) begin
        a7ddrphy_dly_sel_storage[1:0] <= csrbank1_dly_sel0_r;
    end
    a7ddrphy_dly_sel_re <= csrbank1_dly_sel0_re;
    if (csrbank1_half_sys8x_taps0_re) begin
        a7ddrphy_half_sys8x_taps_storage[4:0] <= csrbank1_half_sys8x_taps0_r;
    end
    a7ddrphy_half_sys8x_taps_re <= csrbank1_half_sys8x_taps0_re;
    if (csrbank1_wlevel_en0_re) begin
        a7ddrphy_wlevel_en_storage <= csrbank1_wlevel_en0_r;
    end
    a7ddrphy_wlevel_en_re <= csrbank1_wlevel_en0_re;
    if (csrbank1_rdphase0_re) begin
        a7ddrphy_rdphase_storage[1:0] <= csrbank1_rdphase0_r;
    end
    a7ddrphy_rdphase_re <= csrbank1_rdphase0_re;
    if (csrbank1_wrphase0_re) begin
        a7ddrphy_wrphase_storage[1:0] <= csrbank1_wrphase0_r;
    end
    a7ddrphy_wrphase_re <= csrbank1_wrphase0_re;
    interface2_bank_bus_dat_r <= 1'd0;
    if (csrbank2_sel) begin
        case (interface2_bank_bus_adr[8:0])
            1'd0: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_control0_w;
            end
            1'd1: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_command0_w;
            end
            2'd2: begin
                interface2_bank_bus_dat_r <= phaseinjector0_command_issue_w;
            end
            2'd3: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_address0_w;
            end
            3'd4: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_baddress0_w;
            end
            3'd5: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_wrdata0_w;
            end
            3'd6: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi0_rddata_w;
            end
            3'd7: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi1_command0_w;
            end
            4'd8: begin
                interface2_bank_bus_dat_r <= phaseinjector1_command_issue_w;
            end
            4'd9: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi1_address0_w;
            end
            4'd10: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi1_baddress0_w;
            end
            4'd11: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi1_wrdata0_w;
            end
            4'd12: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi1_rddata_w;
            end
            4'd13: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi2_command0_w;
            end
            4'd14: begin
                interface2_bank_bus_dat_r <= phaseinjector2_command_issue_w;
            end
            4'd15: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi2_address0_w;
            end
            5'd16: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi2_baddress0_w;
            end
            5'd17: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi2_wrdata0_w;
            end
            5'd18: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi2_rddata_w;
            end
            5'd19: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi3_command0_w;
            end
            5'd20: begin
                interface2_bank_bus_dat_r <= phaseinjector3_command_issue_w;
            end
            5'd21: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi3_address0_w;
            end
            5'd22: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi3_baddress0_w;
            end
            5'd23: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi3_wrdata0_w;
            end
            5'd24: begin
                interface2_bank_bus_dat_r <= csrbank2_dfii_pi3_rddata_w;
            end
        endcase
    end
    if (csrbank2_dfii_control0_re) begin
        storage[3:0] <= csrbank2_dfii_control0_r;
    end
    re <= csrbank2_dfii_control0_re;
    if (csrbank2_dfii_pi0_command0_re) begin
        phaseinjector0_command_storage[7:0] <= csrbank2_dfii_pi0_command0_r;
    end
    phaseinjector0_command_re <= csrbank2_dfii_pi0_command0_re;
    if (csrbank2_dfii_pi0_address0_re) begin
        phaseinjector0_address_storage[13:0] <= csrbank2_dfii_pi0_address0_r;
    end
    phaseinjector0_address_re <= csrbank2_dfii_pi0_address0_re;
    if (csrbank2_dfii_pi0_baddress0_re) begin
        phaseinjector0_baddress_storage[2:0] <= csrbank2_dfii_pi0_baddress0_r;
    end
    phaseinjector0_baddress_re <= csrbank2_dfii_pi0_baddress0_re;
    if (csrbank2_dfii_pi0_wrdata0_re) begin
        phaseinjector0_wrdata_storage[31:0] <= csrbank2_dfii_pi0_wrdata0_r;
    end
    phaseinjector0_wrdata_re <= csrbank2_dfii_pi0_wrdata0_re;
    phaseinjector0_rddata_re <= csrbank2_dfii_pi0_rddata_re;
    if (csrbank2_dfii_pi1_command0_re) begin
        phaseinjector1_command_storage[7:0] <= csrbank2_dfii_pi1_command0_r;
    end
    phaseinjector1_command_re <= csrbank2_dfii_pi1_command0_re;
    if (csrbank2_dfii_pi1_address0_re) begin
        phaseinjector1_address_storage[13:0] <= csrbank2_dfii_pi1_address0_r;
    end
    phaseinjector1_address_re <= csrbank2_dfii_pi1_address0_re;
    if (csrbank2_dfii_pi1_baddress0_re) begin
        phaseinjector1_baddress_storage[2:0] <= csrbank2_dfii_pi1_baddress0_r;
    end
    phaseinjector1_baddress_re <= csrbank2_dfii_pi1_baddress0_re;
    if (csrbank2_dfii_pi1_wrdata0_re) begin
        phaseinjector1_wrdata_storage[31:0] <= csrbank2_dfii_pi1_wrdata0_r;
    end
    phaseinjector1_wrdata_re <= csrbank2_dfii_pi1_wrdata0_re;
    phaseinjector1_rddata_re <= csrbank2_dfii_pi1_rddata_re;
    if (csrbank2_dfii_pi2_command0_re) begin
        phaseinjector2_command_storage[7:0] <= csrbank2_dfii_pi2_command0_r;
    end
    phaseinjector2_command_re <= csrbank2_dfii_pi2_command0_re;
    if (csrbank2_dfii_pi2_address0_re) begin
        phaseinjector2_address_storage[13:0] <= csrbank2_dfii_pi2_address0_r;
    end
    phaseinjector2_address_re <= csrbank2_dfii_pi2_address0_re;
    if (csrbank2_dfii_pi2_baddress0_re) begin
        phaseinjector2_baddress_storage[2:0] <= csrbank2_dfii_pi2_baddress0_r;
    end
    phaseinjector2_baddress_re <= csrbank2_dfii_pi2_baddress0_re;
    if (csrbank2_dfii_pi2_wrdata0_re) begin
        phaseinjector2_wrdata_storage[31:0] <= csrbank2_dfii_pi2_wrdata0_r;
    end
    phaseinjector2_wrdata_re <= csrbank2_dfii_pi2_wrdata0_re;
    phaseinjector2_rddata_re <= csrbank2_dfii_pi2_rddata_re;
    if (csrbank2_dfii_pi3_command0_re) begin
        phaseinjector3_command_storage[7:0] <= csrbank2_dfii_pi3_command0_r;
    end
    phaseinjector3_command_re <= csrbank2_dfii_pi3_command0_re;
    if (csrbank2_dfii_pi3_address0_re) begin
        phaseinjector3_address_storage[13:0] <= csrbank2_dfii_pi3_address0_r;
    end
    phaseinjector3_address_re <= csrbank2_dfii_pi3_address0_re;
    if (csrbank2_dfii_pi3_baddress0_re) begin
        phaseinjector3_baddress_storage[2:0] <= csrbank2_dfii_pi3_baddress0_r;
    end
    phaseinjector3_baddress_re <= csrbank2_dfii_pi3_baddress0_re;
    if (csrbank2_dfii_pi3_wrdata0_re) begin
        phaseinjector3_wrdata_storage[31:0] <= csrbank2_dfii_pi3_wrdata0_r;
    end
    phaseinjector3_wrdata_re <= csrbank2_dfii_pi3_wrdata0_re;
    phaseinjector3_rddata_re <= csrbank2_dfii_pi3_rddata_re;
    if (sys_rst) begin
        a7ddrphy_rst_storage <= 1'd0;
        a7ddrphy_rst_re <= 1'd0;
        a7ddrphy_dly_sel_storage <= 2'd0;
        a7ddrphy_dly_sel_re <= 1'd0;
        a7ddrphy_half_sys8x_taps_storage <= 5'd16;
        a7ddrphy_half_sys8x_taps_re <= 1'd0;
        a7ddrphy_wlevel_en_storage <= 1'd0;
        a7ddrphy_wlevel_en_re <= 1'd0;
        a7ddrphy_rdphase_storage <= 2'd2;
        a7ddrphy_rdphase_re <= 1'd0;
        a7ddrphy_wrphase_storage <= 2'd3;
        a7ddrphy_wrphase_re <= 1'd0;
        a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline0 <= 1'd0;
        a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1 <= 1'd0;
        a7ddrphy_dqspattern_o1 <= 8'd0;
        a7ddrphy_bitslip0_value0 <= 3'd7;
        a7ddrphy_bitslip1_value0 <= 3'd7;
        a7ddrphy_bitslip0_value1 <= 3'd7;
        a7ddrphy_bitslip1_value1 <= 3'd7;
        a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline0 <= 1'd0;
        a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1 <= 1'd0;
        a7ddrphy_bitslip0_value2 <= 3'd7;
        a7ddrphy_bitslip0_value3 <= 3'd7;
        a7ddrphy_bitslip1_value2 <= 3'd7;
        a7ddrphy_bitslip1_value3 <= 3'd7;
        a7ddrphy_bitslip2_value0 <= 3'd7;
        a7ddrphy_bitslip2_value1 <= 3'd7;
        a7ddrphy_bitslip3_value0 <= 3'd7;
        a7ddrphy_bitslip3_value1 <= 3'd7;
        a7ddrphy_bitslip4_value0 <= 3'd7;
        a7ddrphy_bitslip4_value1 <= 3'd7;
        a7ddrphy_bitslip5_value0 <= 3'd7;
        a7ddrphy_bitslip5_value1 <= 3'd7;
        a7ddrphy_bitslip6_value0 <= 3'd7;
        a7ddrphy_bitslip6_value1 <= 3'd7;
        a7ddrphy_bitslip7_value0 <= 3'd7;
        a7ddrphy_bitslip7_value1 <= 3'd7;
        a7ddrphy_bitslip8_value0 <= 3'd7;
        a7ddrphy_bitslip8_value1 <= 3'd7;
        a7ddrphy_bitslip9_value0 <= 3'd7;
        a7ddrphy_bitslip9_value1 <= 3'd7;
        a7ddrphy_bitslip10_value0 <= 3'd7;
        a7ddrphy_bitslip10_value1 <= 3'd7;
        a7ddrphy_bitslip11_value0 <= 3'd7;
        a7ddrphy_bitslip11_value1 <= 3'd7;
        a7ddrphy_bitslip12_value0 <= 3'd7;
        a7ddrphy_bitslip12_value1 <= 3'd7;
        a7ddrphy_bitslip13_value0 <= 3'd7;
        a7ddrphy_bitslip13_value1 <= 3'd7;
        a7ddrphy_bitslip14_value0 <= 3'd7;
        a7ddrphy_bitslip14_value1 <= 3'd7;
        a7ddrphy_bitslip15_value0 <= 3'd7;
        a7ddrphy_bitslip15_value1 <= 3'd7;
        a7ddrphy_rddata_en_tappeddelayline0 <= 1'd0;
        a7ddrphy_rddata_en_tappeddelayline1 <= 1'd0;
        a7ddrphy_rddata_en_tappeddelayline2 <= 1'd0;
        a7ddrphy_rddata_en_tappeddelayline3 <= 1'd0;
        a7ddrphy_rddata_en_tappeddelayline4 <= 1'd0;
        a7ddrphy_rddata_en_tappeddelayline5 <= 1'd0;
        a7ddrphy_rddata_en_tappeddelayline6 <= 1'd0;
        a7ddrphy_rddata_en_tappeddelayline7 <= 1'd0;
        a7ddrphy_wrdata_en_tappeddelayline0 <= 1'd0;
        a7ddrphy_wrdata_en_tappeddelayline1 <= 1'd0;
        a7ddrphy_wrdata_en_tappeddelayline2 <= 1'd0;
        storage <= 4'd1;
        re <= 1'd0;
        phaseinjector0_command_storage <= 8'd0;
        phaseinjector0_command_re <= 1'd0;
        phaseinjector0_address_re <= 1'd0;
        phaseinjector0_baddress_re <= 1'd0;
        phaseinjector0_wrdata_re <= 1'd0;
        phaseinjector0_rddata_status <= 32'd0;
        phaseinjector0_rddata_re <= 1'd0;
        phaseinjector1_command_storage <= 8'd0;
        phaseinjector1_command_re <= 1'd0;
        phaseinjector1_address_re <= 1'd0;
        phaseinjector1_baddress_re <= 1'd0;
        phaseinjector1_wrdata_re <= 1'd0;
        phaseinjector1_rddata_status <= 32'd0;
        phaseinjector1_rddata_re <= 1'd0;
        phaseinjector2_command_storage <= 8'd0;
        phaseinjector2_command_re <= 1'd0;
        phaseinjector2_address_re <= 1'd0;
        phaseinjector2_baddress_re <= 1'd0;
        phaseinjector2_wrdata_re <= 1'd0;
        phaseinjector2_rddata_status <= 32'd0;
        phaseinjector2_rddata_re <= 1'd0;
        phaseinjector3_command_storage <= 8'd0;
        phaseinjector3_command_re <= 1'd0;
        phaseinjector3_address_re <= 1'd0;
        phaseinjector3_baddress_re <= 1'd0;
        phaseinjector3_wrdata_re <= 1'd0;
        phaseinjector3_rddata_status <= 32'd0;
        phaseinjector3_rddata_re <= 1'd0;
        dfi_p0_address <= 14'd0;
        dfi_p0_bank <= 3'd0;
        dfi_p0_cas_n <= 1'd1;
        dfi_p0_cs_n <= 1'd1;
        dfi_p0_ras_n <= 1'd1;
        dfi_p0_we_n <= 1'd1;
        dfi_p0_wrdata_en <= 1'd0;
        dfi_p0_rddata_en <= 1'd0;
        dfi_p1_address <= 14'd0;
        dfi_p1_bank <= 3'd0;
        dfi_p1_cas_n <= 1'd1;
        dfi_p1_cs_n <= 1'd1;
        dfi_p1_ras_n <= 1'd1;
        dfi_p1_we_n <= 1'd1;
        dfi_p1_wrdata_en <= 1'd0;
        dfi_p1_rddata_en <= 1'd0;
        dfi_p2_address <= 14'd0;
        dfi_p2_bank <= 3'd0;
        dfi_p2_cas_n <= 1'd1;
        dfi_p2_cs_n <= 1'd1;
        dfi_p2_ras_n <= 1'd1;
        dfi_p2_we_n <= 1'd1;
        dfi_p2_wrdata_en <= 1'd0;
        dfi_p2_rddata_en <= 1'd0;
        dfi_p3_address <= 14'd0;
        dfi_p3_bank <= 3'd0;
        dfi_p3_cas_n <= 1'd1;
        dfi_p3_cs_n <= 1'd1;
        dfi_p3_ras_n <= 1'd1;
        dfi_p3_we_n <= 1'd1;
        dfi_p3_wrdata_en <= 1'd0;
        dfi_p3_rddata_en <= 1'd0;
        cmd_payload_a <= 14'd0;
        cmd_payload_ba <= 3'd0;
        cmd_payload_cas <= 1'd0;
        cmd_payload_ras <= 1'd0;
        cmd_payload_we <= 1'd0;
        timer_count1 <= 9'd390;
        postponer_req_o <= 1'd0;
        postponer_count <= 1'd0;
        sequencer_done1 <= 1'd0;
        sequencer_counter <= 6'd0;
        sequencer_count <= 1'd0;
        zqcs_timer_count1 <= 26'd49999999;
        zqcs_executer_done <= 1'd0;
        zqcs_executer_counter <= 5'd0;
        bankmachine0_level <= 5'd0;
        bankmachine0_produce <= 4'd0;
        bankmachine0_consume <= 4'd0;
        bankmachine0_pipe_valid_source_valid <= 1'd0;
        bankmachine0_pipe_valid_source_payload_we <= 1'd0;
        bankmachine0_pipe_valid_source_payload_addr <= 21'd0;
        bankmachine0_row <= 14'd0;
        bankmachine0_row_opened <= 1'd0;
        bankmachine0_twtpcon_ready <= 1'd0;
        bankmachine0_twtpcon_count <= 3'd0;
        bankmachine0_trccon_ready <= 1'd0;
        bankmachine0_trccon_count <= 2'd0;
        bankmachine0_trascon_ready <= 1'd0;
        bankmachine0_trascon_count <= 2'd0;
        bankmachine1_level <= 5'd0;
        bankmachine1_produce <= 4'd0;
        bankmachine1_consume <= 4'd0;
        bankmachine1_pipe_valid_source_valid <= 1'd0;
        bankmachine1_pipe_valid_source_payload_we <= 1'd0;
        bankmachine1_pipe_valid_source_payload_addr <= 21'd0;
        bankmachine1_row <= 14'd0;
        bankmachine1_row_opened <= 1'd0;
        bankmachine1_twtpcon_ready <= 1'd0;
        bankmachine1_twtpcon_count <= 3'd0;
        bankmachine1_trccon_ready <= 1'd0;
        bankmachine1_trccon_count <= 2'd0;
        bankmachine1_trascon_ready <= 1'd0;
        bankmachine1_trascon_count <= 2'd0;
        bankmachine2_level <= 5'd0;
        bankmachine2_produce <= 4'd0;
        bankmachine2_consume <= 4'd0;
        bankmachine2_pipe_valid_source_valid <= 1'd0;
        bankmachine2_pipe_valid_source_payload_we <= 1'd0;
        bankmachine2_pipe_valid_source_payload_addr <= 21'd0;
        bankmachine2_row <= 14'd0;
        bankmachine2_row_opened <= 1'd0;
        bankmachine2_twtpcon_ready <= 1'd0;
        bankmachine2_twtpcon_count <= 3'd0;
        bankmachine2_trccon_ready <= 1'd0;
        bankmachine2_trccon_count <= 2'd0;
        bankmachine2_trascon_ready <= 1'd0;
        bankmachine2_trascon_count <= 2'd0;
        bankmachine3_level <= 5'd0;
        bankmachine3_produce <= 4'd0;
        bankmachine3_consume <= 4'd0;
        bankmachine3_pipe_valid_source_valid <= 1'd0;
        bankmachine3_pipe_valid_source_payload_we <= 1'd0;
        bankmachine3_pipe_valid_source_payload_addr <= 21'd0;
        bankmachine3_row <= 14'd0;
        bankmachine3_row_opened <= 1'd0;
        bankmachine3_twtpcon_ready <= 1'd0;
        bankmachine3_twtpcon_count <= 3'd0;
        bankmachine3_trccon_ready <= 1'd0;
        bankmachine3_trccon_count <= 2'd0;
        bankmachine3_trascon_ready <= 1'd0;
        bankmachine3_trascon_count <= 2'd0;
        bankmachine4_level <= 5'd0;
        bankmachine4_produce <= 4'd0;
        bankmachine4_consume <= 4'd0;
        bankmachine4_pipe_valid_source_valid <= 1'd0;
        bankmachine4_pipe_valid_source_payload_we <= 1'd0;
        bankmachine4_pipe_valid_source_payload_addr <= 21'd0;
        bankmachine4_row <= 14'd0;
        bankmachine4_row_opened <= 1'd0;
        bankmachine4_twtpcon_ready <= 1'd0;
        bankmachine4_twtpcon_count <= 3'd0;
        bankmachine4_trccon_ready <= 1'd0;
        bankmachine4_trccon_count <= 2'd0;
        bankmachine4_trascon_ready <= 1'd0;
        bankmachine4_trascon_count <= 2'd0;
        bankmachine5_level <= 5'd0;
        bankmachine5_produce <= 4'd0;
        bankmachine5_consume <= 4'd0;
        bankmachine5_pipe_valid_source_valid <= 1'd0;
        bankmachine5_pipe_valid_source_payload_we <= 1'd0;
        bankmachine5_pipe_valid_source_payload_addr <= 21'd0;
        bankmachine5_row <= 14'd0;
        bankmachine5_row_opened <= 1'd0;
        bankmachine5_twtpcon_ready <= 1'd0;
        bankmachine5_twtpcon_count <= 3'd0;
        bankmachine5_trccon_ready <= 1'd0;
        bankmachine5_trccon_count <= 2'd0;
        bankmachine5_trascon_ready <= 1'd0;
        bankmachine5_trascon_count <= 2'd0;
        bankmachine6_level <= 5'd0;
        bankmachine6_produce <= 4'd0;
        bankmachine6_consume <= 4'd0;
        bankmachine6_pipe_valid_source_valid <= 1'd0;
        bankmachine6_pipe_valid_source_payload_we <= 1'd0;
        bankmachine6_pipe_valid_source_payload_addr <= 21'd0;
        bankmachine6_row <= 14'd0;
        bankmachine6_row_opened <= 1'd0;
        bankmachine6_twtpcon_ready <= 1'd0;
        bankmachine6_twtpcon_count <= 3'd0;
        bankmachine6_trccon_ready <= 1'd0;
        bankmachine6_trccon_count <= 2'd0;
        bankmachine6_trascon_ready <= 1'd0;
        bankmachine6_trascon_count <= 2'd0;
        bankmachine7_level <= 5'd0;
        bankmachine7_produce <= 4'd0;
        bankmachine7_consume <= 4'd0;
        bankmachine7_pipe_valid_source_valid <= 1'd0;
        bankmachine7_pipe_valid_source_payload_we <= 1'd0;
        bankmachine7_pipe_valid_source_payload_addr <= 21'd0;
        bankmachine7_row <= 14'd0;
        bankmachine7_row_opened <= 1'd0;
        bankmachine7_twtpcon_ready <= 1'd0;
        bankmachine7_twtpcon_count <= 3'd0;
        bankmachine7_trccon_ready <= 1'd0;
        bankmachine7_trccon_count <= 2'd0;
        bankmachine7_trascon_ready <= 1'd0;
        bankmachine7_trascon_count <= 2'd0;
        choose_cmd_grant <= 3'd0;
        choose_req_grant <= 3'd0;
        trrdcon_ready <= 1'd0;
        trrdcon_count <= 1'd0;
        tfawcon_ready <= 1'd1;
        tfawcon_window <= 3'd0;
        tccdcon_ready <= 1'd0;
        tccdcon_count <= 1'd0;
        twtrcon_ready <= 1'd0;
        twtrcon_count <= 3'd0;
        time0 <= 5'd0;
        time1 <= 4'd0;
        init_done_storage <= 1'd0;
        init_done_re <= 1'd0;
        init_error_storage <= 1'd0;
        init_error_re <= 1'd0;
        user_enable <= 1'd0;
        litedramnativeportconverter_sel <= 4'd0;
        litedramnativeportconverter_cmd_addr <= 26'd0;
        litedramnativeportconverter_cmd_we <= 1'd0;
        litedramnativeportconverter_cmd_last <= 1'd0;
        litedramnativeportconverter_read_lock <= 1'd0;
        litedramnativeportconverter_read_unlocked <= 1'd0;
        litedramnativeportconverter_rdata_fifo_level <= 2'd0;
        litedramnativeportconverter_rdata_fifo_produce <= 2'd0;
        litedramnativeportconverter_rdata_fifo_consume <= 2'd0;
        litedramnativeportconverter_rdata_converter_converter_mux <= 2'd0;
        litedramnativeportconverter_rdata_chunk <= 4'd1;
        litedramnativeportconverter_wdata_fifo_level <= 2'd0;
        litedramnativeportconverter_wdata_fifo_produce <= 2'd0;
        litedramnativeportconverter_wdata_fifo_consume <= 2'd0;
        litedramnativeportconverter_wdata_buffer_pipe_valid_source_valid <= 1'd0;
        litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_data <= 128'd0;
        litedramnativeportconverter_wdata_buffer_pipe_valid_source_payload_we <= 16'd0;
        litedramnativeportconverter_wdata_converter_converter_source_payload_data <= 144'd0;
        litedramnativeportconverter_wdata_converter_converter_source_payload_valid_token_count <= 3'd0;
        litedramnativeportconverter_wdata_converter_converter_demux <= 2'd0;
        litedramnativeportconverter_wdata_converter_converter_strobe_all <= 1'd0;
        litedramnativeportconverter_wdata_chunk <= 4'd1;
        litedramnativeportconverter_wdata_sel <= 16'd0;
        aborted <= 1'd0;
        litedramcore_we <= 1'd0;
        litedramcore_litedramcore_refresher_state <= 2'd0;
        litedramcore_litedramcore_bankmachine0_state <= 3'd0;
        litedramcore_litedramcore_bankmachine1_state <= 3'd0;
        litedramcore_litedramcore_bankmachine2_state <= 3'd0;
        litedramcore_litedramcore_bankmachine3_state <= 3'd0;
        litedramcore_litedramcore_bankmachine4_state <= 3'd0;
        litedramcore_litedramcore_bankmachine5_state <= 3'd0;
        litedramcore_litedramcore_bankmachine6_state <= 3'd0;
        litedramcore_litedramcore_bankmachine7_state <= 3'd0;
        litedramcore_litedramcore_multiplexer_state <= 4'd0;
        litedramcore_litedramcore_state <= 2'd0;
        litedramcore_litedramcore_new_master_wdata_ready0 <= 1'd0;
        litedramcore_litedramcore_new_master_wdata_ready1 <= 1'd0;
        litedramcore_litedramcore_new_master_rdata_valid0 <= 1'd0;
        litedramcore_litedramcore_new_master_rdata_valid1 <= 1'd0;
        litedramcore_litedramcore_new_master_rdata_valid2 <= 1'd0;
        litedramcore_litedramcore_new_master_rdata_valid3 <= 1'd0;
        litedramcore_litedramcore_new_master_rdata_valid4 <= 1'd0;
        litedramcore_litedramcore_new_master_rdata_valid5 <= 1'd0;
        litedramcore_litedramcore_new_master_rdata_valid6 <= 1'd0;
        litedramcore_litedramcore_new_master_rdata_valid7 <= 1'd0;
        litedramcore_litedramcore_new_master_rdata_valid8 <= 1'd0;
        litedramcore_litedramwishbone2native_state <= 2'd0;
        litedramcore_wishbone2csr_state <= 2'd0;
    end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

BUFG BUFG(
	.I(clkout0),
	.O(clkout_buf0)
);

BUFG BUFG_1(
	.I(clkout1),
	.O(clkout_buf1)
);

BUFG BUFG_2(
	.I(clkout2),
	.O(clkout_buf2)
);

BUFG BUFG_3(
	.I(clkout3),
	.O(clkout_buf3)
);

BUFG BUFG_4(
	.I(clkout4),
	.O(clkout_buf4)
);

IDELAYCTRL IDELAYCTRL(
	.REFCLK(iodelay_clk),
	.RST(ic_reset)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(1'd0),
	.D2(1'd1),
	.D3(1'd0),
	.D4(1'd1),
	.D5(1'd0),
	.D6(1'd1),
	.D7(1'd0),
	.D8(1'd1),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(a7ddrphy_sd_clk_se_nodelay)
);

OBUFDS OBUFDS(
	.I(a7ddrphy_sd_clk_se_nodelay),
	.O(ddram_clk_p),
	.OB(ddram_clk_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_1 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_reset_n),
	.D2(a7ddrphy_dfi_p0_reset_n),
	.D3(a7ddrphy_dfi_p1_reset_n),
	.D4(a7ddrphy_dfi_p1_reset_n),
	.D5(a7ddrphy_dfi_p2_reset_n),
	.D6(a7ddrphy_dfi_p2_reset_n),
	.D7(a7ddrphy_dfi_p3_reset_n),
	.D8(a7ddrphy_dfi_p3_reset_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_reset_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_2 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_cs_n),
	.D2(a7ddrphy_dfi_p0_cs_n),
	.D3(a7ddrphy_dfi_p1_cs_n),
	.D4(a7ddrphy_dfi_p1_cs_n),
	.D5(a7ddrphy_dfi_p2_cs_n),
	.D6(a7ddrphy_dfi_p2_cs_n),
	.D7(a7ddrphy_dfi_p3_cs_n),
	.D8(a7ddrphy_dfi_p3_cs_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_cs_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_3 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[0]),
	.D2(a7ddrphy_dfi_p0_address[0]),
	.D3(a7ddrphy_dfi_p1_address[0]),
	.D4(a7ddrphy_dfi_p1_address[0]),
	.D5(a7ddrphy_dfi_p2_address[0]),
	.D6(a7ddrphy_dfi_p2_address[0]),
	.D7(a7ddrphy_dfi_p3_address[0]),
	.D8(a7ddrphy_dfi_p3_address[0]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_4 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[1]),
	.D2(a7ddrphy_dfi_p0_address[1]),
	.D3(a7ddrphy_dfi_p1_address[1]),
	.D4(a7ddrphy_dfi_p1_address[1]),
	.D5(a7ddrphy_dfi_p2_address[1]),
	.D6(a7ddrphy_dfi_p2_address[1]),
	.D7(a7ddrphy_dfi_p3_address[1]),
	.D8(a7ddrphy_dfi_p3_address[1]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_5 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[2]),
	.D2(a7ddrphy_dfi_p0_address[2]),
	.D3(a7ddrphy_dfi_p1_address[2]),
	.D4(a7ddrphy_dfi_p1_address[2]),
	.D5(a7ddrphy_dfi_p2_address[2]),
	.D6(a7ddrphy_dfi_p2_address[2]),
	.D7(a7ddrphy_dfi_p3_address[2]),
	.D8(a7ddrphy_dfi_p3_address[2]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[2])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_6 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[3]),
	.D2(a7ddrphy_dfi_p0_address[3]),
	.D3(a7ddrphy_dfi_p1_address[3]),
	.D4(a7ddrphy_dfi_p1_address[3]),
	.D5(a7ddrphy_dfi_p2_address[3]),
	.D6(a7ddrphy_dfi_p2_address[3]),
	.D7(a7ddrphy_dfi_p3_address[3]),
	.D8(a7ddrphy_dfi_p3_address[3]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[3])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_7 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[4]),
	.D2(a7ddrphy_dfi_p0_address[4]),
	.D3(a7ddrphy_dfi_p1_address[4]),
	.D4(a7ddrphy_dfi_p1_address[4]),
	.D5(a7ddrphy_dfi_p2_address[4]),
	.D6(a7ddrphy_dfi_p2_address[4]),
	.D7(a7ddrphy_dfi_p3_address[4]),
	.D8(a7ddrphy_dfi_p3_address[4]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[4])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_8 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[5]),
	.D2(a7ddrphy_dfi_p0_address[5]),
	.D3(a7ddrphy_dfi_p1_address[5]),
	.D4(a7ddrphy_dfi_p1_address[5]),
	.D5(a7ddrphy_dfi_p2_address[5]),
	.D6(a7ddrphy_dfi_p2_address[5]),
	.D7(a7ddrphy_dfi_p3_address[5]),
	.D8(a7ddrphy_dfi_p3_address[5]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[5])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_9 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[6]),
	.D2(a7ddrphy_dfi_p0_address[6]),
	.D3(a7ddrphy_dfi_p1_address[6]),
	.D4(a7ddrphy_dfi_p1_address[6]),
	.D5(a7ddrphy_dfi_p2_address[6]),
	.D6(a7ddrphy_dfi_p2_address[6]),
	.D7(a7ddrphy_dfi_p3_address[6]),
	.D8(a7ddrphy_dfi_p3_address[6]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[6])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_10 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[7]),
	.D2(a7ddrphy_dfi_p0_address[7]),
	.D3(a7ddrphy_dfi_p1_address[7]),
	.D4(a7ddrphy_dfi_p1_address[7]),
	.D5(a7ddrphy_dfi_p2_address[7]),
	.D6(a7ddrphy_dfi_p2_address[7]),
	.D7(a7ddrphy_dfi_p3_address[7]),
	.D8(a7ddrphy_dfi_p3_address[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[7])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_11 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[8]),
	.D2(a7ddrphy_dfi_p0_address[8]),
	.D3(a7ddrphy_dfi_p1_address[8]),
	.D4(a7ddrphy_dfi_p1_address[8]),
	.D5(a7ddrphy_dfi_p2_address[8]),
	.D6(a7ddrphy_dfi_p2_address[8]),
	.D7(a7ddrphy_dfi_p3_address[8]),
	.D8(a7ddrphy_dfi_p3_address[8]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[8])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_12 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[9]),
	.D2(a7ddrphy_dfi_p0_address[9]),
	.D3(a7ddrphy_dfi_p1_address[9]),
	.D4(a7ddrphy_dfi_p1_address[9]),
	.D5(a7ddrphy_dfi_p2_address[9]),
	.D6(a7ddrphy_dfi_p2_address[9]),
	.D7(a7ddrphy_dfi_p3_address[9]),
	.D8(a7ddrphy_dfi_p3_address[9]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[9])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_13 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[10]),
	.D2(a7ddrphy_dfi_p0_address[10]),
	.D3(a7ddrphy_dfi_p1_address[10]),
	.D4(a7ddrphy_dfi_p1_address[10]),
	.D5(a7ddrphy_dfi_p2_address[10]),
	.D6(a7ddrphy_dfi_p2_address[10]),
	.D7(a7ddrphy_dfi_p3_address[10]),
	.D8(a7ddrphy_dfi_p3_address[10]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[10])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_14 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[11]),
	.D2(a7ddrphy_dfi_p0_address[11]),
	.D3(a7ddrphy_dfi_p1_address[11]),
	.D4(a7ddrphy_dfi_p1_address[11]),
	.D5(a7ddrphy_dfi_p2_address[11]),
	.D6(a7ddrphy_dfi_p2_address[11]),
	.D7(a7ddrphy_dfi_p3_address[11]),
	.D8(a7ddrphy_dfi_p3_address[11]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[11])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_15 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[12]),
	.D2(a7ddrphy_dfi_p0_address[12]),
	.D3(a7ddrphy_dfi_p1_address[12]),
	.D4(a7ddrphy_dfi_p1_address[12]),
	.D5(a7ddrphy_dfi_p2_address[12]),
	.D6(a7ddrphy_dfi_p2_address[12]),
	.D7(a7ddrphy_dfi_p3_address[12]),
	.D8(a7ddrphy_dfi_p3_address[12]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[12])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_16 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_address[13]),
	.D2(a7ddrphy_dfi_p0_address[13]),
	.D3(a7ddrphy_dfi_p1_address[13]),
	.D4(a7ddrphy_dfi_p1_address[13]),
	.D5(a7ddrphy_dfi_p2_address[13]),
	.D6(a7ddrphy_dfi_p2_address[13]),
	.D7(a7ddrphy_dfi_p3_address[13]),
	.D8(a7ddrphy_dfi_p3_address[13]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_a[13])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_17 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_bank[0]),
	.D2(a7ddrphy_dfi_p0_bank[0]),
	.D3(a7ddrphy_dfi_p1_bank[0]),
	.D4(a7ddrphy_dfi_p1_bank[0]),
	.D5(a7ddrphy_dfi_p2_bank[0]),
	.D6(a7ddrphy_dfi_p2_bank[0]),
	.D7(a7ddrphy_dfi_p3_bank[0]),
	.D8(a7ddrphy_dfi_p3_bank[0]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(a7ddrphy_pads_ba[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_18 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_bank[1]),
	.D2(a7ddrphy_dfi_p0_bank[1]),
	.D3(a7ddrphy_dfi_p1_bank[1]),
	.D4(a7ddrphy_dfi_p1_bank[1]),
	.D5(a7ddrphy_dfi_p2_bank[1]),
	.D6(a7ddrphy_dfi_p2_bank[1]),
	.D7(a7ddrphy_dfi_p3_bank[1]),
	.D8(a7ddrphy_dfi_p3_bank[1]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(a7ddrphy_pads_ba[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_19 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_bank[2]),
	.D2(a7ddrphy_dfi_p0_bank[2]),
	.D3(a7ddrphy_dfi_p1_bank[2]),
	.D4(a7ddrphy_dfi_p1_bank[2]),
	.D5(a7ddrphy_dfi_p2_bank[2]),
	.D6(a7ddrphy_dfi_p2_bank[2]),
	.D7(a7ddrphy_dfi_p3_bank[2]),
	.D8(a7ddrphy_dfi_p3_bank[2]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(a7ddrphy_pads_ba[2])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_20 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_ras_n),
	.D2(a7ddrphy_dfi_p0_ras_n),
	.D3(a7ddrphy_dfi_p1_ras_n),
	.D4(a7ddrphy_dfi_p1_ras_n),
	.D5(a7ddrphy_dfi_p2_ras_n),
	.D6(a7ddrphy_dfi_p2_ras_n),
	.D7(a7ddrphy_dfi_p3_ras_n),
	.D8(a7ddrphy_dfi_p3_ras_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_ras_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_21 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_cas_n),
	.D2(a7ddrphy_dfi_p0_cas_n),
	.D3(a7ddrphy_dfi_p1_cas_n),
	.D4(a7ddrphy_dfi_p1_cas_n),
	.D5(a7ddrphy_dfi_p2_cas_n),
	.D6(a7ddrphy_dfi_p2_cas_n),
	.D7(a7ddrphy_dfi_p3_cas_n),
	.D8(a7ddrphy_dfi_p3_cas_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_cas_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_22 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_we_n),
	.D2(a7ddrphy_dfi_p0_we_n),
	.D3(a7ddrphy_dfi_p1_we_n),
	.D4(a7ddrphy_dfi_p1_we_n),
	.D5(a7ddrphy_dfi_p2_we_n),
	.D6(a7ddrphy_dfi_p2_we_n),
	.D7(a7ddrphy_dfi_p3_we_n),
	.D8(a7ddrphy_dfi_p3_we_n),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_we_n)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_23 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_cke),
	.D2(a7ddrphy_dfi_p0_cke),
	.D3(a7ddrphy_dfi_p1_cke),
	.D4(a7ddrphy_dfi_p1_cke),
	.D5(a7ddrphy_dfi_p2_cke),
	.D6(a7ddrphy_dfi_p2_cke),
	.D7(a7ddrphy_dfi_p3_cke),
	.D8(a7ddrphy_dfi_p3_cke),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_cke)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_24 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_dfi_p0_odt),
	.D2(a7ddrphy_dfi_p0_odt),
	.D3(a7ddrphy_dfi_p1_odt),
	.D4(a7ddrphy_dfi_p1_odt),
	.D5(a7ddrphy_dfi_p2_odt),
	.D6(a7ddrphy_dfi_p2_odt),
	.D7(a7ddrphy_dfi_p3_odt),
	.D8(a7ddrphy_dfi_p3_odt),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_odt)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_25 (
	.CLK(sys4x_dqs_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip00[0]),
	.D2(a7ddrphy_bitslip00[1]),
	.D3(a7ddrphy_bitslip00[2]),
	.D4(a7ddrphy_bitslip00[3]),
	.D5(a7ddrphy_bitslip00[4]),
	.D6(a7ddrphy_bitslip00[5]),
	.D7(a7ddrphy_bitslip00[6]),
	.D8(a7ddrphy_bitslip00[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OFB(a7ddrphy0),
	.OQ(a7ddrphy_dqs_o_no_delay0),
	.TQ(a7ddrphy_dqs_t0)
);

IOBUFDS IOBUFDS(
	.I(a7ddrphy_dqs_o_no_delay0),
	.T(a7ddrphy_dqs_t0),
	.IO(ddram_dqs_p[0]),
	.IOB(ddram_dqs_n[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_26 (
	.CLK(sys4x_dqs_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip10[0]),
	.D2(a7ddrphy_bitslip10[1]),
	.D3(a7ddrphy_bitslip10[2]),
	.D4(a7ddrphy_bitslip10[3]),
	.D5(a7ddrphy_bitslip10[4]),
	.D6(a7ddrphy_bitslip10[5]),
	.D7(a7ddrphy_bitslip10[6]),
	.D8(a7ddrphy_bitslip10[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dqs_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OFB(a7ddrphy1),
	.OQ(a7ddrphy_dqs_o_no_delay1),
	.TQ(a7ddrphy_dqs_t1)
);

IOBUFDS IOBUFDS_1(
	.I(a7ddrphy_dqs_o_no_delay1),
	.T(a7ddrphy_dqs_t1),
	.IO(ddram_dqs_p[1]),
	.IOB(ddram_dqs_n[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_27 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip01[0]),
	.D2(a7ddrphy_bitslip01[1]),
	.D3(a7ddrphy_bitslip01[2]),
	.D4(a7ddrphy_bitslip01[3]),
	.D5(a7ddrphy_bitslip01[4]),
	.D6(a7ddrphy_bitslip01[5]),
	.D7(a7ddrphy_bitslip01[6]),
	.D8(a7ddrphy_bitslip01[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_dm[0])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_28 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip11[0]),
	.D2(a7ddrphy_bitslip11[1]),
	.D3(a7ddrphy_bitslip11[2]),
	.D4(a7ddrphy_bitslip11[3]),
	.D5(a7ddrphy_bitslip11[4]),
	.D6(a7ddrphy_bitslip11[5]),
	.D7(a7ddrphy_bitslip11[6]),
	.D8(a7ddrphy_bitslip11[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.OQ(ddram_dm[1])
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_29 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip02[0]),
	.D2(a7ddrphy_bitslip02[1]),
	.D3(a7ddrphy_bitslip02[2]),
	.D4(a7ddrphy_bitslip02[3]),
	.D5(a7ddrphy_bitslip02[4]),
	.D6(a7ddrphy_bitslip02[5]),
	.D7(a7ddrphy_bitslip02[6]),
	.D8(a7ddrphy_bitslip02[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay0),
	.TQ(a7ddrphy_dq_t0)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed0),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip03[7]),
	.Q2(a7ddrphy_bitslip03[6]),
	.Q3(a7ddrphy_bitslip03[5]),
	.Q4(a7ddrphy_bitslip03[4]),
	.Q5(a7ddrphy_bitslip03[3]),
	.Q6(a7ddrphy_bitslip03[2]),
	.Q7(a7ddrphy_bitslip03[1]),
	.Q8(a7ddrphy_bitslip03[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay0),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed0)
);

IOBUF IOBUF(
	.I(a7ddrphy_dq_o_nodelay0),
	.T(a7ddrphy_dq_t0),
	.IO(ddram_dq[0]),
	.O(a7ddrphy_dq_i_nodelay0)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_30 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip12[0]),
	.D2(a7ddrphy_bitslip12[1]),
	.D3(a7ddrphy_bitslip12[2]),
	.D4(a7ddrphy_bitslip12[3]),
	.D5(a7ddrphy_bitslip12[4]),
	.D6(a7ddrphy_bitslip12[5]),
	.D7(a7ddrphy_bitslip12[6]),
	.D8(a7ddrphy_bitslip12[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay1),
	.TQ(a7ddrphy_dq_t1)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_1 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip13[7]),
	.Q2(a7ddrphy_bitslip13[6]),
	.Q3(a7ddrphy_bitslip13[5]),
	.Q4(a7ddrphy_bitslip13[4]),
	.Q5(a7ddrphy_bitslip13[3]),
	.Q6(a7ddrphy_bitslip13[2]),
	.Q7(a7ddrphy_bitslip13[1]),
	.Q8(a7ddrphy_bitslip13[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_1 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay1),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed1)
);

IOBUF IOBUF_1(
	.I(a7ddrphy_dq_o_nodelay1),
	.T(a7ddrphy_dq_t1),
	.IO(ddram_dq[1]),
	.O(a7ddrphy_dq_i_nodelay1)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_31 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip20[0]),
	.D2(a7ddrphy_bitslip20[1]),
	.D3(a7ddrphy_bitslip20[2]),
	.D4(a7ddrphy_bitslip20[3]),
	.D5(a7ddrphy_bitslip20[4]),
	.D6(a7ddrphy_bitslip20[5]),
	.D7(a7ddrphy_bitslip20[6]),
	.D8(a7ddrphy_bitslip20[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay2),
	.TQ(a7ddrphy_dq_t2)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_2 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed2),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip21[7]),
	.Q2(a7ddrphy_bitslip21[6]),
	.Q3(a7ddrphy_bitslip21[5]),
	.Q4(a7ddrphy_bitslip21[4]),
	.Q5(a7ddrphy_bitslip21[3]),
	.Q6(a7ddrphy_bitslip21[2]),
	.Q7(a7ddrphy_bitslip21[1]),
	.Q8(a7ddrphy_bitslip21[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_2 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay2),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed2)
);

IOBUF IOBUF_2(
	.I(a7ddrphy_dq_o_nodelay2),
	.T(a7ddrphy_dq_t2),
	.IO(ddram_dq[2]),
	.O(a7ddrphy_dq_i_nodelay2)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_32 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip30[0]),
	.D2(a7ddrphy_bitslip30[1]),
	.D3(a7ddrphy_bitslip30[2]),
	.D4(a7ddrphy_bitslip30[3]),
	.D5(a7ddrphy_bitslip30[4]),
	.D6(a7ddrphy_bitslip30[5]),
	.D7(a7ddrphy_bitslip30[6]),
	.D8(a7ddrphy_bitslip30[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay3),
	.TQ(a7ddrphy_dq_t3)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_3 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed3),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip31[7]),
	.Q2(a7ddrphy_bitslip31[6]),
	.Q3(a7ddrphy_bitslip31[5]),
	.Q4(a7ddrphy_bitslip31[4]),
	.Q5(a7ddrphy_bitslip31[3]),
	.Q6(a7ddrphy_bitslip31[2]),
	.Q7(a7ddrphy_bitslip31[1]),
	.Q8(a7ddrphy_bitslip31[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_3 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay3),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed3)
);

IOBUF IOBUF_3(
	.I(a7ddrphy_dq_o_nodelay3),
	.T(a7ddrphy_dq_t3),
	.IO(ddram_dq[3]),
	.O(a7ddrphy_dq_i_nodelay3)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_33 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip40[0]),
	.D2(a7ddrphy_bitslip40[1]),
	.D3(a7ddrphy_bitslip40[2]),
	.D4(a7ddrphy_bitslip40[3]),
	.D5(a7ddrphy_bitslip40[4]),
	.D6(a7ddrphy_bitslip40[5]),
	.D7(a7ddrphy_bitslip40[6]),
	.D8(a7ddrphy_bitslip40[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay4),
	.TQ(a7ddrphy_dq_t4)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_4 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed4),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip41[7]),
	.Q2(a7ddrphy_bitslip41[6]),
	.Q3(a7ddrphy_bitslip41[5]),
	.Q4(a7ddrphy_bitslip41[4]),
	.Q5(a7ddrphy_bitslip41[3]),
	.Q6(a7ddrphy_bitslip41[2]),
	.Q7(a7ddrphy_bitslip41[1]),
	.Q8(a7ddrphy_bitslip41[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_4 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay4),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed4)
);

IOBUF IOBUF_4(
	.I(a7ddrphy_dq_o_nodelay4),
	.T(a7ddrphy_dq_t4),
	.IO(ddram_dq[4]),
	.O(a7ddrphy_dq_i_nodelay4)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_34 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip50[0]),
	.D2(a7ddrphy_bitslip50[1]),
	.D3(a7ddrphy_bitslip50[2]),
	.D4(a7ddrphy_bitslip50[3]),
	.D5(a7ddrphy_bitslip50[4]),
	.D6(a7ddrphy_bitslip50[5]),
	.D7(a7ddrphy_bitslip50[6]),
	.D8(a7ddrphy_bitslip50[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay5),
	.TQ(a7ddrphy_dq_t5)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_5 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed5),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip51[7]),
	.Q2(a7ddrphy_bitslip51[6]),
	.Q3(a7ddrphy_bitslip51[5]),
	.Q4(a7ddrphy_bitslip51[4]),
	.Q5(a7ddrphy_bitslip51[3]),
	.Q6(a7ddrphy_bitslip51[2]),
	.Q7(a7ddrphy_bitslip51[1]),
	.Q8(a7ddrphy_bitslip51[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_5 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay5),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed5)
);

IOBUF IOBUF_5(
	.I(a7ddrphy_dq_o_nodelay5),
	.T(a7ddrphy_dq_t5),
	.IO(ddram_dq[5]),
	.O(a7ddrphy_dq_i_nodelay5)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_35 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip60[0]),
	.D2(a7ddrphy_bitslip60[1]),
	.D3(a7ddrphy_bitslip60[2]),
	.D4(a7ddrphy_bitslip60[3]),
	.D5(a7ddrphy_bitslip60[4]),
	.D6(a7ddrphy_bitslip60[5]),
	.D7(a7ddrphy_bitslip60[6]),
	.D8(a7ddrphy_bitslip60[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay6),
	.TQ(a7ddrphy_dq_t6)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_6 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed6),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip61[7]),
	.Q2(a7ddrphy_bitslip61[6]),
	.Q3(a7ddrphy_bitslip61[5]),
	.Q4(a7ddrphy_bitslip61[4]),
	.Q5(a7ddrphy_bitslip61[3]),
	.Q6(a7ddrphy_bitslip61[2]),
	.Q7(a7ddrphy_bitslip61[1]),
	.Q8(a7ddrphy_bitslip61[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_6 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay6),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed6)
);

IOBUF IOBUF_6(
	.I(a7ddrphy_dq_o_nodelay6),
	.T(a7ddrphy_dq_t6),
	.IO(ddram_dq[6]),
	.O(a7ddrphy_dq_i_nodelay6)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_36 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip70[0]),
	.D2(a7ddrphy_bitslip70[1]),
	.D3(a7ddrphy_bitslip70[2]),
	.D4(a7ddrphy_bitslip70[3]),
	.D5(a7ddrphy_bitslip70[4]),
	.D6(a7ddrphy_bitslip70[5]),
	.D7(a7ddrphy_bitslip70[6]),
	.D8(a7ddrphy_bitslip70[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay7),
	.TQ(a7ddrphy_dq_t7)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_7 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed7),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip71[7]),
	.Q2(a7ddrphy_bitslip71[6]),
	.Q3(a7ddrphy_bitslip71[5]),
	.Q4(a7ddrphy_bitslip71[4]),
	.Q5(a7ddrphy_bitslip71[3]),
	.Q6(a7ddrphy_bitslip71[2]),
	.Q7(a7ddrphy_bitslip71[1]),
	.Q8(a7ddrphy_bitslip71[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_7 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay7),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[0] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed7)
);

IOBUF IOBUF_7(
	.I(a7ddrphy_dq_o_nodelay7),
	.T(a7ddrphy_dq_t7),
	.IO(ddram_dq[7]),
	.O(a7ddrphy_dq_i_nodelay7)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_37 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip80[0]),
	.D2(a7ddrphy_bitslip80[1]),
	.D3(a7ddrphy_bitslip80[2]),
	.D4(a7ddrphy_bitslip80[3]),
	.D5(a7ddrphy_bitslip80[4]),
	.D6(a7ddrphy_bitslip80[5]),
	.D7(a7ddrphy_bitslip80[6]),
	.D8(a7ddrphy_bitslip80[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay8),
	.TQ(a7ddrphy_dq_t8)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_8 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed8),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip81[7]),
	.Q2(a7ddrphy_bitslip81[6]),
	.Q3(a7ddrphy_bitslip81[5]),
	.Q4(a7ddrphy_bitslip81[4]),
	.Q5(a7ddrphy_bitslip81[3]),
	.Q6(a7ddrphy_bitslip81[2]),
	.Q7(a7ddrphy_bitslip81[1]),
	.Q8(a7ddrphy_bitslip81[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_8 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay8),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed8)
);

IOBUF IOBUF_8(
	.I(a7ddrphy_dq_o_nodelay8),
	.T(a7ddrphy_dq_t8),
	.IO(ddram_dq[8]),
	.O(a7ddrphy_dq_i_nodelay8)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_38 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip90[0]),
	.D2(a7ddrphy_bitslip90[1]),
	.D3(a7ddrphy_bitslip90[2]),
	.D4(a7ddrphy_bitslip90[3]),
	.D5(a7ddrphy_bitslip90[4]),
	.D6(a7ddrphy_bitslip90[5]),
	.D7(a7ddrphy_bitslip90[6]),
	.D8(a7ddrphy_bitslip90[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay9),
	.TQ(a7ddrphy_dq_t9)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_9 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed9),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip91[7]),
	.Q2(a7ddrphy_bitslip91[6]),
	.Q3(a7ddrphy_bitslip91[5]),
	.Q4(a7ddrphy_bitslip91[4]),
	.Q5(a7ddrphy_bitslip91[3]),
	.Q6(a7ddrphy_bitslip91[2]),
	.Q7(a7ddrphy_bitslip91[1]),
	.Q8(a7ddrphy_bitslip91[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_9 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay9),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed9)
);

IOBUF IOBUF_9(
	.I(a7ddrphy_dq_o_nodelay9),
	.T(a7ddrphy_dq_t9),
	.IO(ddram_dq[9]),
	.O(a7ddrphy_dq_i_nodelay9)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_39 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip100[0]),
	.D2(a7ddrphy_bitslip100[1]),
	.D3(a7ddrphy_bitslip100[2]),
	.D4(a7ddrphy_bitslip100[3]),
	.D5(a7ddrphy_bitslip100[4]),
	.D6(a7ddrphy_bitslip100[5]),
	.D7(a7ddrphy_bitslip100[6]),
	.D8(a7ddrphy_bitslip100[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay10),
	.TQ(a7ddrphy_dq_t10)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_10 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed10),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip101[7]),
	.Q2(a7ddrphy_bitslip101[6]),
	.Q3(a7ddrphy_bitslip101[5]),
	.Q4(a7ddrphy_bitslip101[4]),
	.Q5(a7ddrphy_bitslip101[3]),
	.Q6(a7ddrphy_bitslip101[2]),
	.Q7(a7ddrphy_bitslip101[1]),
	.Q8(a7ddrphy_bitslip101[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_10 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay10),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed10)
);

IOBUF IOBUF_10(
	.I(a7ddrphy_dq_o_nodelay10),
	.T(a7ddrphy_dq_t10),
	.IO(ddram_dq[10]),
	.O(a7ddrphy_dq_i_nodelay10)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_40 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip110[0]),
	.D2(a7ddrphy_bitslip110[1]),
	.D3(a7ddrphy_bitslip110[2]),
	.D4(a7ddrphy_bitslip110[3]),
	.D5(a7ddrphy_bitslip110[4]),
	.D6(a7ddrphy_bitslip110[5]),
	.D7(a7ddrphy_bitslip110[6]),
	.D8(a7ddrphy_bitslip110[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay11),
	.TQ(a7ddrphy_dq_t11)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_11 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed11),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip111[7]),
	.Q2(a7ddrphy_bitslip111[6]),
	.Q3(a7ddrphy_bitslip111[5]),
	.Q4(a7ddrphy_bitslip111[4]),
	.Q5(a7ddrphy_bitslip111[3]),
	.Q6(a7ddrphy_bitslip111[2]),
	.Q7(a7ddrphy_bitslip111[1]),
	.Q8(a7ddrphy_bitslip111[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_11 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay11),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed11)
);

IOBUF IOBUF_11(
	.I(a7ddrphy_dq_o_nodelay11),
	.T(a7ddrphy_dq_t11),
	.IO(ddram_dq[11]),
	.O(a7ddrphy_dq_i_nodelay11)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_41 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip120[0]),
	.D2(a7ddrphy_bitslip120[1]),
	.D3(a7ddrphy_bitslip120[2]),
	.D4(a7ddrphy_bitslip120[3]),
	.D5(a7ddrphy_bitslip120[4]),
	.D6(a7ddrphy_bitslip120[5]),
	.D7(a7ddrphy_bitslip120[6]),
	.D8(a7ddrphy_bitslip120[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay12),
	.TQ(a7ddrphy_dq_t12)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_12 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed12),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip121[7]),
	.Q2(a7ddrphy_bitslip121[6]),
	.Q3(a7ddrphy_bitslip121[5]),
	.Q4(a7ddrphy_bitslip121[4]),
	.Q5(a7ddrphy_bitslip121[3]),
	.Q6(a7ddrphy_bitslip121[2]),
	.Q7(a7ddrphy_bitslip121[1]),
	.Q8(a7ddrphy_bitslip121[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_12 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay12),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed12)
);

IOBUF IOBUF_12(
	.I(a7ddrphy_dq_o_nodelay12),
	.T(a7ddrphy_dq_t12),
	.IO(ddram_dq[12]),
	.O(a7ddrphy_dq_i_nodelay12)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_42 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip130[0]),
	.D2(a7ddrphy_bitslip130[1]),
	.D3(a7ddrphy_bitslip130[2]),
	.D4(a7ddrphy_bitslip130[3]),
	.D5(a7ddrphy_bitslip130[4]),
	.D6(a7ddrphy_bitslip130[5]),
	.D7(a7ddrphy_bitslip130[6]),
	.D8(a7ddrphy_bitslip130[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay13),
	.TQ(a7ddrphy_dq_t13)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_13 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed13),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip131[7]),
	.Q2(a7ddrphy_bitslip131[6]),
	.Q3(a7ddrphy_bitslip131[5]),
	.Q4(a7ddrphy_bitslip131[4]),
	.Q5(a7ddrphy_bitslip131[3]),
	.Q6(a7ddrphy_bitslip131[2]),
	.Q7(a7ddrphy_bitslip131[1]),
	.Q8(a7ddrphy_bitslip131[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_13 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay13),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed13)
);

IOBUF IOBUF_13(
	.I(a7ddrphy_dq_o_nodelay13),
	.T(a7ddrphy_dq_t13),
	.IO(ddram_dq[13]),
	.O(a7ddrphy_dq_i_nodelay13)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_43 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip140[0]),
	.D2(a7ddrphy_bitslip140[1]),
	.D3(a7ddrphy_bitslip140[2]),
	.D4(a7ddrphy_bitslip140[3]),
	.D5(a7ddrphy_bitslip140[4]),
	.D6(a7ddrphy_bitslip140[5]),
	.D7(a7ddrphy_bitslip140[6]),
	.D8(a7ddrphy_bitslip140[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay14),
	.TQ(a7ddrphy_dq_t14)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_14 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed14),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip141[7]),
	.Q2(a7ddrphy_bitslip141[6]),
	.Q3(a7ddrphy_bitslip141[5]),
	.Q4(a7ddrphy_bitslip141[4]),
	.Q5(a7ddrphy_bitslip141[3]),
	.Q6(a7ddrphy_bitslip141[2]),
	.Q7(a7ddrphy_bitslip141[1]),
	.Q8(a7ddrphy_bitslip141[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_14 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay14),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed14)
);

IOBUF IOBUF_14(
	.I(a7ddrphy_dq_o_nodelay14),
	.T(a7ddrphy_dq_t14),
	.IO(ddram_dq[14]),
	.O(a7ddrphy_dq_i_nodelay14)
);

OSERDESE2 #(
	.DATA_RATE_OQ("DDR"),
	.DATA_RATE_TQ("BUF"),
	.DATA_WIDTH(4'd8),
	.SERDES_MODE("MASTER"),
	.TRISTATE_WIDTH(1'd1)
) OSERDESE2_44 (
	.CLK(sys4x_clk),
	.CLKDIV(sys_clk),
	.D1(a7ddrphy_bitslip150[0]),
	.D2(a7ddrphy_bitslip150[1]),
	.D3(a7ddrphy_bitslip150[2]),
	.D4(a7ddrphy_bitslip150[3]),
	.D5(a7ddrphy_bitslip150[4]),
	.D6(a7ddrphy_bitslip150[5]),
	.D7(a7ddrphy_bitslip150[6]),
	.D8(a7ddrphy_bitslip150[7]),
	.OCE(1'd1),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.T1((~a7ddrphy_dq_oe_delay_tappeddelayline_tappeddelayline1)),
	.TCE(1'd1),
	.OQ(a7ddrphy_dq_o_nodelay15),
	.TQ(a7ddrphy_dq_t15)
);

ISERDESE2 #(
	.DATA_RATE("DDR"),
	.DATA_WIDTH(4'd8),
	.INTERFACE_TYPE("NETWORKING"),
	.IOBDELAY("IFD"),
	.NUM_CE(1'd1),
	.SERDES_MODE("MASTER")
) ISERDESE2_15 (
	.BITSLIP(1'd0),
	.CE1(1'd1),
	.CLK(sys4x_clk),
	.CLKB((~sys4x_clk)),
	.CLKDIV(sys_clk),
	.DDLY(a7ddrphy_dq_i_delayed15),
	.RST((sys_rst | a7ddrphy_rst_storage)),
	.Q1(a7ddrphy_bitslip151[7]),
	.Q2(a7ddrphy_bitslip151[6]),
	.Q3(a7ddrphy_bitslip151[5]),
	.Q4(a7ddrphy_bitslip151[4]),
	.Q5(a7ddrphy_bitslip151[3]),
	.Q6(a7ddrphy_bitslip151[2]),
	.Q7(a7ddrphy_bitslip151[1]),
	.Q8(a7ddrphy_bitslip151[0])
);

IDELAYE2 #(
	.CINVCTRL_SEL("FALSE"),
	.DELAY_SRC("IDATAIN"),
	.HIGH_PERFORMANCE_MODE("TRUE"),
	.IDELAY_TYPE("VARIABLE"),
	.IDELAY_VALUE(1'd0),
	.PIPE_SEL("FALSE"),
	.REFCLK_FREQUENCY(200.0),
	.SIGNAL_PATTERN("DATA")
) IDELAYE2_15 (
	.C(sys_clk),
	.CE((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_inc_re)),
	.IDATAIN(a7ddrphy_dq_i_nodelay15),
	.INC(1'd1),
	.LD(((a7ddrphy_dly_sel_storage[1] & a7ddrphy_rdly_dq_rst_re) | a7ddrphy_rst_storage)),
	.LDPIPEEN(1'd0),
	.DATAOUT(a7ddrphy_dq_i_delayed15)
);

IOBUF IOBUF_15(
	.I(a7ddrphy_dq_o_nodelay15),
	.T(a7ddrphy_dq_t15),
	.IO(ddram_dq[15]),
	.O(a7ddrphy_dq_i_nodelay15)
);

//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_1[0:15];
reg [23:0] storage_1_dat0;
always @(posedge sys_clk) begin
	if (bankmachine0_wrport_we)
		storage_1[bankmachine0_wrport_adr] <= bankmachine0_wrport_dat_w;
	storage_1_dat0 <= storage_1[bankmachine0_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign bankmachine0_wrport_dat_r = storage_1_dat0;
assign bankmachine0_rdport_dat_r = storage_1[bankmachine0_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_2: 16-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_2[0:15];
reg [23:0] storage_2_dat0;
always @(posedge sys_clk) begin
	if (bankmachine1_wrport_we)
		storage_2[bankmachine1_wrport_adr] <= bankmachine1_wrport_dat_w;
	storage_2_dat0 <= storage_2[bankmachine1_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign bankmachine1_wrport_dat_r = storage_2_dat0;
assign bankmachine1_rdport_dat_r = storage_2[bankmachine1_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_3: 16-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_3[0:15];
reg [23:0] storage_3_dat0;
always @(posedge sys_clk) begin
	if (bankmachine2_wrport_we)
		storage_3[bankmachine2_wrport_adr] <= bankmachine2_wrport_dat_w;
	storage_3_dat0 <= storage_3[bankmachine2_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign bankmachine2_wrport_dat_r = storage_3_dat0;
assign bankmachine2_rdport_dat_r = storage_3[bankmachine2_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_4: 16-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_4[0:15];
reg [23:0] storage_4_dat0;
always @(posedge sys_clk) begin
	if (bankmachine3_wrport_we)
		storage_4[bankmachine3_wrport_adr] <= bankmachine3_wrport_dat_w;
	storage_4_dat0 <= storage_4[bankmachine3_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign bankmachine3_wrport_dat_r = storage_4_dat0;
assign bankmachine3_rdport_dat_r = storage_4[bankmachine3_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_5: 16-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_5[0:15];
reg [23:0] storage_5_dat0;
always @(posedge sys_clk) begin
	if (bankmachine4_wrport_we)
		storage_5[bankmachine4_wrport_adr] <= bankmachine4_wrport_dat_w;
	storage_5_dat0 <= storage_5[bankmachine4_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign bankmachine4_wrport_dat_r = storage_5_dat0;
assign bankmachine4_rdport_dat_r = storage_5[bankmachine4_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_6: 16-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_6[0:15];
reg [23:0] storage_6_dat0;
always @(posedge sys_clk) begin
	if (bankmachine5_wrport_we)
		storage_6[bankmachine5_wrport_adr] <= bankmachine5_wrport_dat_w;
	storage_6_dat0 <= storage_6[bankmachine5_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign bankmachine5_wrport_dat_r = storage_6_dat0;
assign bankmachine5_rdport_dat_r = storage_6[bankmachine5_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_7: 16-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_7[0:15];
reg [23:0] storage_7_dat0;
always @(posedge sys_clk) begin
	if (bankmachine6_wrport_we)
		storage_7[bankmachine6_wrport_adr] <= bankmachine6_wrport_dat_w;
	storage_7_dat0 <= storage_7[bankmachine6_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign bankmachine6_wrport_dat_r = storage_7_dat0;
assign bankmachine6_rdport_dat_r = storage_7[bankmachine6_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_8: 16-words x 24-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 24 
// Port 1 | Read: Async | Write: ---- | 
reg [23:0] storage_8[0:15];
reg [23:0] storage_8_dat0;
always @(posedge sys_clk) begin
	if (bankmachine7_wrport_we)
		storage_8[bankmachine7_wrport_adr] <= bankmachine7_wrport_dat_w;
	storage_8_dat0 <= storage_8[bankmachine7_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign bankmachine7_wrport_dat_r = storage_8_dat0;
assign bankmachine7_rdport_dat_r = storage_8[bankmachine7_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_9: 3-words x 130-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 130 
// Port 1 | Read: Async | Write: ---- | 
reg [129:0] storage_9[0:2];
reg [129:0] storage_9_dat0;
always @(posedge sys_clk) begin
	if (litedramnativeportconverter_rdata_fifo_wrport_we)
		storage_9[litedramnativeportconverter_rdata_fifo_wrport_adr] <= litedramnativeportconverter_rdata_fifo_wrport_dat_w;
	storage_9_dat0 <= storage_9[litedramnativeportconverter_rdata_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramnativeportconverter_rdata_fifo_wrport_dat_r = storage_9_dat0;
assign litedramnativeportconverter_rdata_fifo_rdport_dat_r = storage_9[litedramnativeportconverter_rdata_fifo_rdport_adr];


//------------------------------------------------------------------------------
// Memory storage_10: 3-words x 38-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 38 
// Port 1 | Read: Async | Write: ---- | 
reg [37:0] storage_10[0:2];
reg [37:0] storage_10_dat0;
always @(posedge sys_clk) begin
	if (litedramnativeportconverter_wdata_fifo_wrport_we)
		storage_10[litedramnativeportconverter_wdata_fifo_wrport_adr] <= litedramnativeportconverter_wdata_fifo_wrport_dat_w;
	storage_10_dat0 <= storage_10[litedramnativeportconverter_wdata_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
end
assign litedramnativeportconverter_wdata_fifo_wrport_dat_r = storage_10_dat0;
assign litedramnativeportconverter_wdata_fifo_rdport_dat_r = storage_10[litedramnativeportconverter_wdata_fifo_rdport_adr];


FDCE FDCE(
	.C(clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(reset),
	.Q(litedramcore_reset0)
);

FDCE FDCE_1(
	.C(clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(litedramcore_reset0),
	.Q(litedramcore_reset1)
);

FDCE FDCE_2(
	.C(clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(litedramcore_reset1),
	.Q(litedramcore_reset2)
);

FDCE FDCE_3(
	.C(clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(litedramcore_reset2),
	.Q(litedramcore_reset3)
);

FDCE FDCE_4(
	.C(clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(litedramcore_reset3),
	.Q(litedramcore_reset4)
);

FDCE FDCE_5(
	.C(clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(litedramcore_reset4),
	.Q(litedramcore_reset5)
);

FDCE FDCE_6(
	.C(clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(litedramcore_reset5),
	.Q(litedramcore_reset6)
);

FDCE FDCE_7(
	.C(clkin),
	.CE(1'd1),
	.CLR(1'd0),
	.D(litedramcore_reset6),
	.Q(litedramcore_reset7)
);

PLLE2_ADV #(
	.CLKFBOUT_MULT(5'd16),
	.CLKIN1_PERIOD(10.0),
	.CLKOUT0_DIVIDE(4'd8),
	.CLKOUT0_PHASE(1'd0),
	.CLKOUT1_DIVIDE(6'd32),
	.CLKOUT1_PHASE(1'd0),
	.CLKOUT2_DIVIDE(5'd16),
	.CLKOUT2_PHASE(1'd0),
	.CLKOUT3_DIVIDE(4'd8),
	.CLKOUT3_PHASE(1'd0),
	.CLKOUT4_DIVIDE(4'd8),
	.CLKOUT4_PHASE(7'd90),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_ADV (
	.CLKFBIN(litedramcore_pll_fb),
	.CLKIN1(clkin),
	.PWRDWN(power_down),
	.RST(litedramcore_reset7),
	.CLKFBOUT(litedramcore_pll_fb),
	.CLKOUT0(clkout0),
	.CLKOUT1(clkout1),
	.CLKOUT2(clkout2),
	.CLKOUT3(clkout3),
	.CLKOUT4(clkout4),
	.LOCKED(locked)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE (
	.C(iodelay_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl0),
	.Q(xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_1 (
	.C(iodelay_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl0),
	.Q(iodelay_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_2 (
	.C(sys_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl1),
	.Q(xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_3 (
	.C(sys_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl1),
	.Q(sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_4 (
	.C(sys2x_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl2),
	.Q(xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_5 (
	.C(sys2x_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl2),
	.Q(xilinxasyncresetsynchronizerimpl2_expr)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_6 (
	.C(sys4x_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl3),
	.Q(xilinxasyncresetsynchronizerimpl3_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_7 (
	.C(sys4x_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl3_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl3),
	.Q(xilinxasyncresetsynchronizerimpl3_expr)
);

(* ars_ff1 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_8 (
	.C(sys4x_dqs_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(xilinxasyncresetsynchronizerimpl4),
	.Q(xilinxasyncresetsynchronizerimpl4_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *)
FDPE #(
	.INIT(1'd1)
) FDPE_9 (
	.C(sys4x_dqs_clk),
	.CE(1'd1),
	.D(xilinxasyncresetsynchronizerimpl4_rst_meta),
	.PRE(xilinxasyncresetsynchronizerimpl4),
	.Q(xilinxasyncresetsynchronizerimpl4_expr)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-12-13 10:28:32.
//------------------------------------------------------------------------------
