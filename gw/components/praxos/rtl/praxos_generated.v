/* Generated by Yosys 0.30+25 (git sha1 104edb458, clang 10.0.0-4ubuntu1 -fPIC -Os) */

module praxos_alu(clk, acc_in, sel_imm, imm, dm_rd_data, adder, \logic , shifter);
  wire [31:0] _00_;
  wire [31:0] _01_;
  wire _02_;
  wire [31:0] _03_;
  wire [31:0] _04_;
  wire [31:0] _05_;
  wire [31:0] _06_;
  wire _07_;
  wire [31:0] _08_;
  wire _09_;
  wire [31:0] _10_;
  wire _11_;
  wire [31:0] _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire [31:0] _20_;
  input [31:0] acc_in;
  wire [31:0] acc_in;
  output [31:0] adder;
  wire [31:0] adder;
  input clk;
  wire clk;
  input [31:0] dm_rd_data;
  wire [31:0] dm_rd_data;
  input [31:0] imm;
  wire [31:0] imm;
  output [31:0] \logic ;
  wire [31:0] \logic ;
  wire [31:0] opd;
  wire [31:0] opd_sxtd;
  input sel_imm;
  wire sel_imm;
  output [31:0] shifter;
  wire [31:0] shifter;
  assign _00_ = sel_imm ? imm : dm_rd_data;
  assign _01_ = sel_imm ? { 3'h0, imm[28:0] } : dm_rd_data;
  assign _02_ = ~ imm[31];
  assign _03_ = acc_in + opd_sxtd;
  assign _04_ = acc_in - opd_sxtd;
  assign _05_ = _02_ ? _03_ : _04_;
  assign _06_ = acc_in & opd;
  assign _07_ = imm[31:30] == 2'h1;
  assign _08_ = acc_in | opd;
  assign _09_ = imm[31:30] == 2'h2;
  assign _10_ = acc_in ^ opd;
  assign _11_ = imm[31:30] == 2'h3;
  function [31:0] \565 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \565  = b[31:0];
      3'b?1?:
        \565  = b[63:32];
      3'b1??:
        \565  = b[95:64];
      default:
        \565  = a;
    endcase
  endfunction
  assign _12_ = \565 (opd, { _10_, _08_, _06_ }, { _11_, _09_, _07_ });
  assign _13_ = imm[31:29] == 3'h0;
  assign _14_ = imm[31:29] == 3'h1;
  assign _15_ = imm[31:29] == 3'h2;
  assign _16_ = imm[31:29] == 3'h3;
  assign _17_ = imm[31:29] == 3'h4;
  assign _18_ = imm[31:29] == 3'h5;
  assign _19_ = imm[31:29] == 3'h6;
  function [31:0] \608 ;
    input [31:0] a;
    input [223:0] b;
    input [6:0] s;
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \608  = b[31:0];
      7'b?????1?:
        \608  = b[63:32];
      7'b????1??:
        \608  = b[95:64];
      7'b???1???:
        \608  = b[127:96];
      7'b??1????:
        \608  = b[159:128];
      7'b?1?????:
        \608  = b[191:160];
      7'b1??????:
        \608  = b[223:192];
      default:
        \608  = a;
    endcase
  endfunction
  assign _20_ = \608 ({ acc_in[30:0], acc_in[31] }, { acc_in[30:0], acc_in[0], acc_in[30:0], 1'h1, acc_in[30:0], 1'h0, acc_in[0], acc_in[31:1], acc_in[31], acc_in[31:1], 1'h1, acc_in[31:1], 1'h0, acc_in[31:1] }, { _19_, _18_, _17_, _16_, _15_, _14_, _13_ });
  assign opd = _00_;
  assign opd_sxtd = _01_;
  assign adder = _05_;
  assign \logic  = _12_;
  assign shifter = _20_;
endmodule

module praxos_cpu(clk, resetn, port_in, av_readdata, av_waitrequest, pm_wr_addr, pm_wr, pm_wr_data, port_addr, port_rd, port_wr, port_out, av_address, av_writedata, av_byteenable, av_write, av_read);
  wire _00_;
  wire _01_;
  wire _02_;
  wire [31:0] _03_;
  wire [31:0] _04_;
  wire [31:0] _05_;
  wire [35:0] _06_;
  wire [31:0] _07_;
  wire _08_;
  wire [1:0] _09_;
  wire [31:0] _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire [7:0] _14_;
  wire [23:0] _15_;
  wire [7:0] _16_;
  wire _17_;
  wire [31:0] _18_;
  wire [7:0] _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire [31:0] _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire [31:0] _38_;
  wire [31:0] _39_;
  wire _40_;
  wire [7:0] _41_;
  wire [7:0] _42_;
  wire [7:0] _43_;
  wire _44_;
  wire [7:0] _45_;
  wire [7:0] _46_;
  wire [7:0] _47_;
  wire [7:0] _48_;
  wire _49_;
  wire _50_;
  wire _51_;
  wire _52_;
  wire _53_;
  wire [31:0] _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  wire _58_;
  wire [31:0] _59_;
  wire _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire _64_;
  wire [31:0] _65_;
  wire _66_;
  reg [7:0] _67_ = 8'h00;
  wire [7:0] _68_;
  reg [7:0] _69_ = 8'h00;
  wire [31:0] _70_;
  reg [31:0] _71_ = 32'd0;
  wire [31:0] _72_;
  reg [31:0] _73_ = 32'd0;
  reg [31:0] _74_ = 32'd0;
  reg _75_ = 1'h0;
  reg _76_ = 1'h0;
  wire _77_;
  reg _78_ = 1'h0;
  reg _79_ = 1'h0;
  reg _80_ = 1'h0;
  reg _81_ = 1'h0;
  reg _82_ = 1'h0;
  reg _83_ = 1'h0;
  wire _84_;
  reg _85_ = 1'h0;
  reg _86_ = 1'h0;
  reg [1:0] _87_ = 2'h0;
  wire _88_;
  reg _89_;
  reg _90_;
  wire [31:0] acc;
  wire acc_en;
  wire acc_en_int;
  wire [31:0] acc_mux;
  wire [31:0] adder;
  wire [31:0] \alu:63 ;
  wire [31:0] \alu:64 ;
  wire [31:0] \alu:65 ;
  wire alu_sel;
  wire alu_sel_int;
  output [31:0] av_address;
  wire [31:0] av_address;
  output [3:0] av_byteenable;
  wire [3:0] av_byteenable;
  output av_read;
  wire av_read;
  wire av_read_int;
  input [31:0] av_readdata;
  wire [31:0] av_readdata;
  wire [31:0] av_readdata_int;
  input av_waitrequest;
  wire av_waitrequest;
  output av_write;
  wire av_write;
  wire av_write_int;
  output [31:0] av_writedata;
  wire [31:0] av_writedata;
  wire branch;
  wire branch_int;
  wire bus_busy;
  wire bus_strt;
  input clk;
  wire clk;
  wire \core:29 ;
  wire \core:30 ;
  wire \core:31 ;
  wire \core:32 ;
  wire \core:33 ;
  wire \core:34 ;
  wire \core:35 ;
  wire \core:36 ;
  wire \core:37 ;
  wire \core:38 ;
  wire \core:39 ;
  wire [31:0] \data_ram:75 ;
  wire [7:0] dm_addr;
  wire [31:0] dm_rd_data;
  wire dm_wr;
  wire [31:0] dm_wr_data;
  wire dm_wr_int;
  wire i_en;
  wire i_en_int;
  wire [31:0] index;
  wire [6:0] instr;
  wire io_zero;
  wire jal;
  wire [31:0] \logic ;
  wire [7:0] pc;
  wire pc_inc;
  wire [7:0] pc_link;
  wire [7:0] pm_addr;
  wire pm_en;
  wire [35:0] pm_rd_data;
  input pm_wr;
  wire pm_wr;
  input [7:0] pm_wr_addr;
  wire [7:0] pm_wr_addr;
  input [35:0] pm_wr_data;
  wire [35:0] pm_wr_data;
  wire pm_wr_int;
  output [15:0] port_addr;
  wire [15:0] port_addr;
  input [31:0] port_in;
  wire [31:0] port_in;
  output [31:0] port_out;
  wire [31:0] port_out;
  output port_rd;
  wire port_rd;
  wire port_rd_int;
  output port_wr;
  wire port_wr;
  wire port_wr_int;
  wire [35:0] \program_rom:72 ;
  wire [1:0] reset_sr;
  input resetn;
  wire resetn;
  wire [31:0] shifter;
  wire zero;
  function [7:0] \101 ;
    input [7:0] a;
    input [15:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \101  = b[7:0];
      2'b1?:
        \101  = b[15:8];
      default:
        \101  = a;
    endcase
  endfunction
  assign _14_ = \101 (acc[7:0], { pc_link, _10_[7:0] }, { _13_, _12_ });
  function [23:0] \104 ;
    input [23:0] a;
    input [47:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \104  = b[23:0];
      2'b1?:
        \104  = b[47:24];
      default:
        \104  = a;
    endcase
  endfunction
  assign _15_ = \104 (acc[31:8], { acc[31:8], _10_[31:8] }, { _13_, _12_ });
  assign _16_ = reset_sr[1] ? pc : pm_wr_addr;
  assign _17_ = reset_sr[1] ? 1'h0 : pm_wr;
  assign _18_ = index + { pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15], pm_rd_data[15:0] };
  assign _19_ = pm_rd_data[35] ? _18_[7:0] : pm_rd_data[7:0];
  assign _20_ = instr[6:3] == 4'h0;
  assign _21_ = instr[6:3] == 4'h1;
  assign _23_ = instr[6:3] == 4'ha;
  assign _24_ = instr[6:3] == 4'h5;
  assign _25_ = instr[6:3] == 4'h3;
  assign _26_ = instr[6:3] == 4'h4;
  assign _27_ = _25_ | _26_;
  assign _28_ = instr[6:3] == 4'hc;
  assign _29_ = _27_ | _28_;
  assign _30_ = instr[6:3] == 4'hd;
  assign _31_ = _29_ | _30_;
  function [31:0] \168 ;
    input [31:0] a;
    input [159:0] b;
    input [4:0] s;
    (* parallel_case *)
    casez (s)
      5'b????1:
        \168  = b[31:0];
      5'b???1?:
        \168  = b[63:32];
      5'b??1??:
        \168  = b[95:64];
      5'b?1???:
        \168  = b[127:96];
      5'b1????:
        \168  = b[159:128];
      default:
        \168  = a;
    endcase
  endfunction
  assign _32_ = \168 (32'hxxxxxxxx, { \logic , port_in, shifter, av_readdata_int, adder }, { _31_, _24_, _23_, _21_, _20_ });
  assign _34_ = acc_mux == 32'd0;
  assign _35_ = _34_ ? 1'h1 : 1'h0;
  assign _36_ = pm_rd_data[35:34] == 2'h0;
  assign _37_ = pm_rd_data[35:34] == 2'h1;
  assign _38_ = index + { pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31], pm_rd_data[31:16] };
  function [31:0] \216 ;
    input [31:0] a;
    input [63:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \216  = b[31:0];
      2'b1?:
        \216  = b[63:32];
      default:
        \216  = a;
    endcase
  endfunction
  assign _39_ = \216 (_38_, { dm_rd_data, pm_rd_data[31:0] }, { _37_, _36_ });
  assign _40_ = ~ reset_sr[1];
  assign _41_ = pc + pm_rd_data[7:0];
  assign _42_ = pc + 8'h01;
  assign _43_ = pc_inc ? _42_ : pc;
  assign _45_ = branch ? _41_ : _43_;
  assign _46_ = jal ? acc[7:0] : _45_;
  assign _47_ = _40_ ? 8'h00 : _46_;
  assign _48_ = pc + 8'h01;
  assign _49_ = ~ bus_busy;
  assign _50_ = bus_strt ? 1'h1 : 1'h0;
  assign _51_ = bus_strt ? pm_rd_data[35] : 1'h0;
  assign _52_ = bus_strt ? pm_rd_data[32] : 1'h0;
  assign _53_ = ~ av_waitrequest;
  assign _54_ = _53_ ? av_readdata : av_readdata_int;
  assign _56_ = _53_ ? 1'h0 : bus_busy;
  assign _57_ = _53_ ? 1'h0 : av_write_int;
  assign _58_ = _53_ ? 1'h0 : av_read_int;
  assign _59_ = _49_ ? av_readdata_int : _54_;
  assign _60_ = _49_ ? _50_ : _56_;
  assign _61_ = _49_ ? _51_ : _57_;
  assign _62_ = _49_ ? _52_ : _58_;
  assign _63_ = { 31'h00000000, port_in[0] } == 32'd0;
  assign _64_ = _63_ ? 1'h1 : 1'h0;
  assign _65_ = index + { 4'h0, pm_rd_data[27:0] };
  always @(posedge clk)
    _67_ <= _47_;
  assign _68_ = jal ? _48_ : pc_link;
  always @(posedge clk)
    _69_ <= _68_;
  assign _70_ = acc_en ? acc_mux : acc;
  always @(posedge clk)
    _71_ <= _70_;
  assign _72_ = i_en ? _39_ : index;
  always @(posedge clk)
    _73_ <= _72_;
  always @(posedge clk)
    _74_ <= _59_;
  always @(posedge clk)
    _75_ <= dm_wr_int;
  always @(posedge clk)
    _76_ <= acc_en_int;
  always @(posedge clk)
    _78_ <= i_en_int;
  always @(posedge clk)
    _79_ <= alu_sel_int;
  always @(posedge clk)
    _80_ <= branch_int;
  always @(posedge clk)
    _81_ <= _60_;
  always @(posedge clk)
    _82_ <= _61_;
  always @(posedge clk)
    _83_ <= _62_;
  assign _84_ = acc_en ? _35_ : zero;
  always @(posedge clk)
    _85_ <= _84_;
  always @(posedge clk)
    _86_ <= _64_;
  always @(posedge clk)
    _87_ <= _09_;
  always @(posedge clk)
    _89_ <= port_rd_int;
  always @(posedge clk)
    _90_ <= port_wr_int;
  assign _08_ = ~ resetn;
  assign _09_ = _08_ ? 2'h0 : { reset_sr[0], 1'h1 };
  assign _10_ = pm_rd_data[31] ? index : acc;
  assign _12_ = pm_rd_data[35:34] == 2'h1;
  assign _13_ = pm_rd_data[35:34] == 2'h2;
  praxos_alu alu (
    .acc_in(acc),
    .adder(_03_),
    .clk(clk),
    .dm_rd_data(dm_rd_data),
    .imm(pm_rd_data[31:0]),
    .\logic (_04_),
    .sel_imm(alu_sel),
    .shifter(_05_)
  );
  praxos_decode core (
    .acc_en(_00_),
    .av_read(av_read_int),
    .branch(_55_),
    .bus_busy(bus_busy),
    .bus_strt(_02_),
    .clk(clk),
    .dm_wr(_77_),
    .i_en(_11_),
    .i_neg(index[31]),
    .in_zero(io_zero),
    .instr(instr),
    .jal(_44_),
    .neg(acc[31]),
    .pc_inc(_66_),
    .pm_en(_22_),
    .port_rd(_01_),
    .port_wr(_88_),
    .resetn(reset_sr[1]),
    .sel_imm(_33_),
    .zero(zero)
  );
  praxos_dm_8 data_ram (
    .addr(dm_addr),
    .clk(clk),
    .rd_data(_07_),
    .wr(dm_wr),
    .wr_data(dm_wr_data)
  );
  praxos_pm_8 program_rom (
    .addr(pm_addr),
    .clk(clk),
    .en(pm_en),
    .rd_data(_06_),
    .wr(pm_wr_int),
    .wr_data(pm_wr_data)
  );
  assign instr = pm_rd_data[35:29];
  assign pc = _67_;
  assign pc_link = _69_;
  assign acc = _71_;
  assign index = _73_;
  assign av_readdata_int = _74_;
  assign dm_wr = _75_;
  assign acc_en = _76_;
  assign i_en = _78_;
  assign alu_sel = _79_;
  assign branch = _80_;
  assign bus_busy = _81_;
  assign av_write_int = _82_;
  assign av_read_int = _83_;
  assign zero = _85_;
  assign io_zero = _86_;
  assign adder = \alu:63 ;
  assign \logic  = \alu:64 ;
  assign shifter = \alu:65 ;
  assign acc_mux = _32_;
  assign pm_addr = _16_;
  assign pm_rd_data = \program_rom:72 ;
  assign dm_addr = _19_;
  assign dm_wr_data = { _15_, _14_ };
  assign dm_rd_data = \data_ram:75 ;
  assign reset_sr = _87_;
  assign pm_wr_int = _17_;
  assign pm_en = \core:31 ;
  assign jal = \core:33 ;
  assign branch_int = \core:34 ;
  assign pc_inc = \core:35 ;
  assign alu_sel_int = \core:32 ;
  assign acc_en_int = \core:29 ;
  assign i_en_int = \core:30 ;
  assign port_rd_int = \core:38 ;
  assign port_wr_int = \core:37 ;
  assign dm_wr_int = \core:36 ;
  assign bus_strt = \core:39 ;
  assign \core:29  = _00_;
  assign \core:30  = _11_;
  assign \core:31  = _22_;
  assign \core:32  = _33_;
  assign \core:33  = _44_;
  assign \core:34  = _55_;
  assign \core:35  = _66_;
  assign \core:36  = _77_;
  assign \core:37  = _88_;
  assign \core:38  = _01_;
  assign \core:39  = _02_;
  assign \alu:63  = _03_;
  assign \alu:64  = _04_;
  assign \alu:65  = _05_;
  assign \program_rom:72  = _06_;
  assign \data_ram:75  = _07_;
  assign port_addr = pm_rd_data[15:0];
  assign port_rd = _89_;
  assign port_wr = _90_;
  assign port_out = acc;
  assign av_address = _65_;
  assign av_writedata = acc;
  assign av_byteenable = pm_rd_data[31:28];
  assign av_write = av_write_int;
  assign av_read = av_read_int;
endmodule

module praxos_decode(clk, resetn, instr, zero, neg, i_neg, in_zero, bus_busy, av_read, acc_en, i_en, pm_en, sel_imm, jal, branch, pc_inc, dm_wr, port_wr, port_rd, bus_strt);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire [2:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire [2:0] _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire [2:0] _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  wire _41_;
  wire _42_;
  wire [2:0] _43_;
  wire _44_;
  wire _45_;
  wire _46_;
  wire _47_;
  wire _48_;
  wire _49_;
  wire _50_;
  wire _51_;
  wire _52_;
  wire _53_;
  wire _54_;
  wire _55_;
  wire _56_;
  wire _57_;
  reg [2:0] _58_;
  wire _59_;
  wire [2:0] _60_;
  wire _61_;
  wire _62_;
  wire _63_;
  wire [2:0] _64_;
  wire _65_;
  wire _66_;
  output acc_en;
  wire acc_en;
  input av_read;
  wire av_read;
  output branch;
  wire branch;
  wire branch_en;
  input bus_busy;
  wire bus_busy;
  output bus_strt;
  wire bus_strt;
  input clk;
  wire clk;
  wire [2:0] current_state;
  output dm_wr;
  wire dm_wr;
  wire do_branch;
  output i_en;
  wire i_en;
  input i_neg;
  wire i_neg;
  input in_zero;
  wire in_zero;
  input [6:0] instr;
  wire [6:0] instr;
  output jal;
  wire jal;
  input neg;
  wire neg;
  wire [2:0] next_state;
  output pc_inc;
  wire pc_inc;
  output pm_en;
  wire pm_en;
  output port_rd;
  wire port_rd;
  output port_wr;
  wire port_wr;
  input resetn;
  wire resetn;
  output sel_imm;
  wire sel_imm;
  input zero;
  wire zero;
  assign _59_ = ~ resetn;
  assign _60_ = _59_ ? 3'h0 : next_state;
  assign _61_ = current_state == 3'h0;
  assign _62_ = current_state == 3'h1;
  assign _63_ = ~ instr[0];
  assign _64_ = _63_ ? 3'h5 : 3'h0;
  assign _65_ = instr[6:3] == 4'h0;
  assign _66_ = instr[6:3] == 4'h1;
  assign _00_ = instr[6:3] == 4'h2;
  assign _01_ = instr[6:3] == 4'h3;
  assign _02_ = instr[6:3] == 4'h4;
  assign _03_ = ~ instr[2];
  assign _04_ = instr[6:3] == 4'h5;
  assign _05_ = instr[6:3] == 4'h6;
  assign _06_ = instr[6:3] == 4'h7;
  assign _07_ = instr[6:3] == 4'h8;
  assign _08_ = instr[6:3] == 4'h9;
  assign _09_ = instr[6:3] == 4'ha;
  assign _10_ = instr[6:3] == 4'hb;
  assign _11_ = instr[6:3] == 4'hc;
  assign _12_ = ~ instr[2];
  assign _13_ = _12_ ? 3'h5 : 3'h0;
  assign _14_ = instr[6:3] == 4'hd;
  assign _15_ = instr[6:3] == 4'he;
  assign _16_ = instr[6:3] == 4'hf;
  function [0:0] \400 ;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \400  = b[0:0];
      16'b??????????????1?:
        \400  = b[1:1];
      16'b?????????????1??:
        \400  = b[2:2];
      16'b????????????1???:
        \400  = b[3:3];
      16'b???????????1????:
        \400  = b[4:4];
      16'b??????????1?????:
        \400  = b[5:5];
      16'b?????????1??????:
        \400  = b[6:6];
      16'b????????1???????:
        \400  = b[7:7];
      16'b???????1????????:
        \400  = b[8:8];
      16'b??????1?????????:
        \400  = b[9:9];
      16'b?????1??????????:
        \400  = b[10:10];
      16'b????1???????????:
        \400  = b[11:11];
      16'b???1????????????:
        \400  = b[12:12];
      16'b??1?????????????:
        \400  = b[13:13];
      16'b?1??????????????:
        \400  = b[14:14];
      16'b1???????????????:
        \400  = b[15:15];
      default:
        \400  = a;
    endcase
  endfunction
  assign _17_ = \400 (1'h0, { 10'h010, instr[2], 4'h4, instr[0] }, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  function [0:0] \405 ;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \405  = b[0:0];
      16'b??????????????1?:
        \405  = b[1:1];
      16'b?????????????1??:
        \405  = b[2:2];
      16'b????????????1???:
        \405  = b[3:3];
      16'b???????????1????:
        \405  = b[4:4];
      16'b??????????1?????:
        \405  = b[5:5];
      16'b?????????1??????:
        \405  = b[6:6];
      16'b????????1???????:
        \405  = b[7:7];
      16'b???????1????????:
        \405  = b[8:8];
      16'b??????1?????????:
        \405  = b[9:9];
      16'b?????1??????????:
        \405  = b[10:10];
      16'b????1???????????:
        \405  = b[11:11];
      16'b???1????????????:
        \405  = b[12:12];
      16'b??1?????????????:
        \405  = b[13:13];
      16'b?1??????????????:
        \405  = b[14:14];
      16'b1???????????????:
        \405  = b[15:15];
      default:
        \405  = a;
    endcase
  endfunction
  assign _18_ = \405 (1'h0, 16'h2204, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  function [0:0] \409 ;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \409  = b[0:0];
      16'b??????????????1?:
        \409  = b[1:1];
      16'b?????????????1??:
        \409  = b[2:2];
      16'b????????????1???:
        \409  = b[3:3];
      16'b???????????1????:
        \409  = b[4:4];
      16'b??????????1?????:
        \409  = b[5:5];
      16'b?????????1??????:
        \409  = b[6:6];
      16'b????????1???????:
        \409  = b[7:7];
      16'b???????1????????:
        \409  = b[8:8];
      16'b??????1?????????:
        \409  = b[9:9];
      16'b?????1??????????:
        \409  = b[10:10];
      16'b????1???????????:
        \409  = b[11:11];
      16'b???1????????????:
        \409  = b[12:12];
      16'b??1?????????????:
        \409  = b[13:13];
      16'b?1??????????????:
        \409  = b[14:14];
      16'b1???????????????:
        \409  = b[15:15];
      default:
        \409  = a;
    endcase
  endfunction
  assign _19_ = \409 (1'h0, 16'h0009, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  function [0:0] \412 ;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \412  = b[0:0];
      16'b??????????????1?:
        \412  = b[1:1];
      16'b?????????????1??:
        \412  = b[2:2];
      16'b????????????1???:
        \412  = b[3:3];
      16'b???????????1????:
        \412  = b[4:4];
      16'b??????????1?????:
        \412  = b[5:5];
      16'b?????????1??????:
        \412  = b[6:6];
      16'b????????1???????:
        \412  = b[7:7];
      16'b???????1????????:
        \412  = b[8:8];
      16'b??????1?????????:
        \412  = b[9:9];
      16'b?????1??????????:
        \412  = b[10:10];
      16'b????1???????????:
        \412  = b[11:11];
      16'b???1????????????:
        \412  = b[12:12];
      16'b??1?????????????:
        \412  = b[13:13];
      16'b?1??????????????:
        \412  = b[14:14];
      16'b1???????????????:
        \412  = b[15:15];
      default:
        \412  = a;
    endcase
  endfunction
  assign _20_ = \412 (1'h0, 16'h0800, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  function [0:0] \417 ;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \417  = b[0:0];
      16'b??????????????1?:
        \417  = b[1:1];
      16'b?????????????1??:
        \417  = b[2:2];
      16'b????????????1???:
        \417  = b[3:3];
      16'b???????????1????:
        \417  = b[4:4];
      16'b??????????1?????:
        \417  = b[5:5];
      16'b?????????1??????:
        \417  = b[6:6];
      16'b????????1???????:
        \417  = b[7:7];
      16'b???????1????????:
        \417  = b[8:8];
      16'b??????1?????????:
        \417  = b[9:9];
      16'b?????1??????????:
        \417  = b[10:10];
      16'b????1???????????:
        \417  = b[11:11];
      16'b???1????????????:
        \417  = b[12:12];
      16'b??1?????????????:
        \417  = b[13:13];
      16'b?1??????????????:
        \417  = b[14:14];
      16'b1???????????????:
        \417  = b[15:15];
      default:
        \417  = a;
    endcase
  endfunction
  assign _21_ = \417 (1'h0, { 2'h2, instr[2], 13'h0840 }, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  function [0:0] \419 ;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \419  = b[0:0];
      16'b??????????????1?:
        \419  = b[1:1];
      16'b?????????????1??:
        \419  = b[2:2];
      16'b????????????1???:
        \419  = b[3:3];
      16'b???????????1????:
        \419  = b[4:4];
      16'b??????????1?????:
        \419  = b[5:5];
      16'b?????????1??????:
        \419  = b[6:6];
      16'b????????1???????:
        \419  = b[7:7];
      16'b???????1????????:
        \419  = b[8:8];
      16'b??????1?????????:
        \419  = b[9:9];
      16'b?????1??????????:
        \419  = b[10:10];
      16'b????1???????????:
        \419  = b[11:11];
      16'b???1????????????:
        \419  = b[12:12];
      16'b??1?????????????:
        \419  = b[13:13];
      16'b?1??????????????:
        \419  = b[14:14];
      16'b1???????????????:
        \419  = b[15:15];
      default:
        \419  = a;
    endcase
  endfunction
  assign _22_ = \419 (1'h0, { 10'h000, _03_, 5'h00 }, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  function [0:0] \421 ;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \421  = b[0:0];
      16'b??????????????1?:
        \421  = b[1:1];
      16'b?????????????1??:
        \421  = b[2:2];
      16'b????????????1???:
        \421  = b[3:3];
      16'b???????????1????:
        \421  = b[4:4];
      16'b??????????1?????:
        \421  = b[5:5];
      16'b?????????1??????:
        \421  = b[6:6];
      16'b????????1???????:
        \421  = b[7:7];
      16'b???????1????????:
        \421  = b[8:8];
      16'b??????1?????????:
        \421  = b[9:9];
      16'b?????1??????????:
        \421  = b[10:10];
      16'b????1???????????:
        \421  = b[11:11];
      16'b???1????????????:
        \421  = b[12:12];
      16'b??1?????????????:
        \421  = b[13:13];
      16'b?1??????????????:
        \421  = b[14:14];
      16'b1???????????????:
        \421  = b[15:15];
      default:
        \421  = a;
    endcase
  endfunction
  assign _23_ = \421 (1'h0, { 10'h000, instr[2], 5'h00 }, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  function [0:0] \425 ;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \425  = b[0:0];
      16'b??????????????1?:
        \425  = b[1:1];
      16'b?????????????1??:
        \425  = b[2:2];
      16'b????????????1???:
        \425  = b[3:3];
      16'b???????????1????:
        \425  = b[4:4];
      16'b??????????1?????:
        \425  = b[5:5];
      16'b?????????1??????:
        \425  = b[6:6];
      16'b????????1???????:
        \425  = b[7:7];
      16'b???????1????????:
        \425  = b[8:8];
      16'b??????1?????????:
        \425  = b[9:9];
      16'b?????1??????????:
        \425  = b[10:10];
      16'b????1???????????:
        \425  = b[11:11];
      16'b???1????????????:
        \425  = b[12:12];
      16'b??1?????????????:
        \425  = b[13:13];
      16'b?1??????????????:
        \425  = b[14:14];
      16'b1???????????????:
        \425  = b[15:15];
      default:
        \425  = a;
    endcase
  endfunction
  assign _24_ = \425 (1'h0, 16'h0102, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  function [2:0] \433 ;
    input [2:0] a;
    input [47:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \433  = b[2:0];
      16'b??????????????1?:
        \433  = b[5:3];
      16'b?????????????1??:
        \433  = b[8:6];
      16'b????????????1???:
        \433  = b[11:9];
      16'b???????????1????:
        \433  = b[14:12];
      16'b??????????1?????:
        \433  = b[17:15];
      16'b?????????1??????:
        \433  = b[20:18];
      16'b????????1???????:
        \433  = b[23:21];
      16'b???????1????????:
        \433  = b[26:24];
      16'b??????1?????????:
        \433  = b[29:27];
      16'b?????1??????????:
        \433  = b[32:30];
      16'b????1???????????:
        \433  = b[35:33];
      16'b???1????????????:
        \433  = b[38:36];
      16'b??1?????????????:
        \433  = b[41:39];
      16'b?1??????????????:
        \433  = b[44:42];
      16'b1???????????????:
        \433  = b[47:45];
      default:
        \433  = a;
    endcase
  endfunction
  assign _25_ = \433 (3'h0, { 6'h04, _13_, 36'ha00740a03, _64_ }, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  function [0:0] \437 ;
    input [0:0] a;
    input [15:0] b;
    input [15:0] s;
    (* parallel_case *)
    casez (s)
      16'b???????????????1:
        \437  = b[0:0];
      16'b??????????????1?:
        \437  = b[1:1];
      16'b?????????????1??:
        \437  = b[2:2];
      16'b????????????1???:
        \437  = b[3:3];
      16'b???????????1????:
        \437  = b[4:4];
      16'b??????????1?????:
        \437  = b[5:5];
      16'b?????????1??????:
        \437  = b[6:6];
      16'b????????1???????:
        \437  = b[7:7];
      16'b???????1????????:
        \437  = b[8:8];
      16'b??????1?????????:
        \437  = b[9:9];
      16'b?????1??????????:
        \437  = b[10:10];
      16'b????1???????????:
        \437  = b[11:11];
      16'b???1????????????:
        \437  = b[12:12];
      16'b??1?????????????:
        \437  = b[13:13];
      16'b?1??????????????:
        \437  = b[14:14];
      16'b1???????????????:
        \437  = b[15:15];
      default:
        \437  = a;
    endcase
  endfunction
  assign _26_ = \437 (1'h0, 16'h4000, { _16_, _15_, _14_, _11_, _10_, _09_, _08_, _07_, _06_, _05_, _04_, _02_, _01_, _00_, _66_, _65_ });
  assign _27_ = current_state == 3'h2;
  assign _28_ = ~ instr[4];
  assign _29_ = current_state == 3'h5;
  assign _30_ = bus_busy ? 3'h3 : 3'h0;
  assign _31_ = current_state == 3'h3;
  assign _32_ = current_state == 3'h4;
  function [0:0] \455 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \455  = b[0:0];
      6'b????1?:
        \455  = b[1:1];
      6'b???1??:
        \455  = b[2:2];
      6'b??1???:
        \455  = b[3:3];
      6'b?1????:
        \455  = b[4:4];
      6'b1?????:
        \455  = b[5:5];
      default:
        \455  = a;
    endcase
  endfunction
  assign _33_ = \455 (1'hx, { 1'h0, av_read, _28_, _17_, 2'h0 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \459 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \459  = b[0:0];
      6'b????1?:
        \459  = b[1:1];
      6'b???1??:
        \459  = b[2:2];
      6'b??1???:
        \459  = b[3:3];
      6'b?1????:
        \459  = b[4:4];
      6'b1?????:
        \459  = b[5:5];
      default:
        \459  = a;
    endcase
  endfunction
  assign _34_ = \459 (1'hx, { 2'h0, instr[4], _18_, 2'h0 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \464 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \464  = b[0:0];
      6'b????1?:
        \464  = b[1:1];
      6'b???1??:
        \464  = b[2:2];
      6'b??1???:
        \464  = b[3:3];
      6'b?1????:
        \464  = b[4:4];
      6'b1?????:
        \464  = b[5:5];
      default:
        \464  = a;
    endcase
  endfunction
  assign _35_ = \464 (1'hx, 6'h02, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \468 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \468  = b[0:0];
      6'b????1?:
        \468  = b[1:1];
      6'b???1??:
        \468  = b[2:2];
      6'b??1???:
        \468  = b[3:3];
      6'b?1????:
        \468  = b[4:4];
      6'b1?????:
        \468  = b[5:5];
      default:
        \468  = a;
    endcase
  endfunction
  assign _36_ = \468 (1'hx, { 3'h0, _19_, 2'h0 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \472 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \472  = b[0:0];
      6'b????1?:
        \472  = b[1:1];
      6'b???1??:
        \472  = b[2:2];
      6'b??1???:
        \472  = b[3:3];
      6'b?1????:
        \472  = b[4:4];
      6'b1?????:
        \472  = b[5:5];
      default:
        \472  = a;
    endcase
  endfunction
  assign _37_ = \472 (1'hx, { 3'h0, _20_, 2'h0 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \477 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \477  = b[0:0];
      6'b????1?:
        \477  = b[1:1];
      6'b???1??:
        \477  = b[2:2];
      6'b??1???:
        \477  = b[3:3];
      6'b?1????:
        \477  = b[4:4];
      6'b1?????:
        \477  = b[5:5];
      default:
        \477  = a;
    endcase
  endfunction
  assign _38_ = \477 (1'hx, 6'h04, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \481 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \481  = b[0:0];
      6'b????1?:
        \481  = b[1:1];
      6'b???1??:
        \481  = b[2:2];
      6'b??1???:
        \481  = b[3:3];
      6'b?1????:
        \481  = b[4:4];
      6'b1?????:
        \481  = b[5:5];
      default:
        \481  = a;
    endcase
  endfunction
  assign _39_ = \481 (1'hx, { 3'h0, _21_, 2'h0 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \485 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \485  = b[0:0];
      6'b????1?:
        \485  = b[1:1];
      6'b???1??:
        \485  = b[2:2];
      6'b??1???:
        \485  = b[3:3];
      6'b?1????:
        \485  = b[4:4];
      6'b1?????:
        \485  = b[5:5];
      default:
        \485  = a;
    endcase
  endfunction
  assign _40_ = \485 (1'hx, { 3'h0, _22_, 2'h0 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \489 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \489  = b[0:0];
      6'b????1?:
        \489  = b[1:1];
      6'b???1??:
        \489  = b[2:2];
      6'b??1???:
        \489  = b[3:3];
      6'b?1????:
        \489  = b[4:4];
      6'b1?????:
        \489  = b[5:5];
      default:
        \489  = a;
    endcase
  endfunction
  assign _41_ = \489 (1'hx, { 3'h0, _23_, 2'h0 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \493 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \493  = b[0:0];
      6'b????1?:
        \493  = b[1:1];
      6'b???1??:
        \493  = b[2:2];
      6'b??1???:
        \493  = b[3:3];
      6'b?1????:
        \493  = b[4:4];
      6'b1?????:
        \493  = b[5:5];
      default:
        \493  = a;
    endcase
  endfunction
  assign _42_ = \493 (1'hx, { 3'h0, _24_, 2'h0 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [2:0] \500 ;
    input [2:0] a;
    input [17:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \500  = b[2:0];
      6'b????1?:
        \500  = b[5:3];
      6'b???1??:
        \500  = b[8:6];
      6'b??1???:
        \500  = b[11:9];
      6'b?1????:
        \500  = b[14:12];
      6'b1?????:
        \500  = b[17:15];
      default:
        \500  = a;
    endcase
  endfunction
  assign _43_ = \500 (3'hx, { 3'h0, _30_, 3'h0, _25_, 6'h11 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  function [0:0] \503 ;
    input [0:0] a;
    input [5:0] b;
    input [5:0] s;
    (* parallel_case *)
    casez (s)
      6'b?????1:
        \503  = b[0:0];
      6'b????1?:
        \503  = b[1:1];
      6'b???1??:
        \503  = b[2:2];
      6'b??1???:
        \503  = b[3:3];
      6'b?1????:
        \503  = b[4:4];
      6'b1?????:
        \503  = b[5:5];
      default:
        \503  = a;
    endcase
  endfunction
  assign _44_ = \503 (1'hx, { 3'h0, _26_, 2'h0 }, { _32_, _31_, _29_, _27_, _62_, _61_ });
  assign _45_ = instr[6:3] == 4'he;
  assign _46_ = instr[2:0] == 3'h0;
  assign _47_ = instr[2:0] == 3'h1;
  assign _48_ = ~ zero;
  assign _49_ = instr[2:0] == 3'h2;
  assign _50_ = ~ neg;
  assign _51_ = instr[2:0] == 3'h3;
  assign _52_ = instr[2:0] == 3'h4;
  assign _53_ = instr[2:0] == 3'h5;
  assign _54_ = instr[2:0] == 3'h6;
  function [0:0] \530 ;
    input [0:0] a;
    input [6:0] b;
    input [6:0] s;
    (* parallel_case *)
    casez (s)
      7'b??????1:
        \530  = b[0:0];
      7'b?????1?:
        \530  = b[1:1];
      7'b????1??:
        \530  = b[2:2];
      7'b???1???:
        \530  = b[3:3];
      7'b??1????:
        \530  = b[4:4];
      7'b?1?????:
        \530  = b[5:5];
      7'b1??????:
        \530  = b[6:6];
      default:
        \530  = a;
    endcase
  endfunction
  assign _55_ = \530 (1'h0, { in_zero, i_neg, neg, _50_, _48_, zero, 1'h1 }, { _54_, _53_, _52_, _51_, _49_, _47_, _46_ });
  assign _56_ = _45_ ? _55_ : 1'h0;
  assign _57_ = do_branch & branch_en;
  always @(posedge clk)
    _58_ <= _60_;
  assign current_state = _58_;
  assign next_state = _43_;
  assign do_branch = _56_;
  assign branch_en = _44_;
  assign acc_en = _33_;
  assign i_en = _34_;
  assign pm_en = _35_;
  assign sel_imm = _36_;
  assign jal = _37_;
  assign branch = _57_;
  assign pc_inc = _38_;
  assign dm_wr = _39_;
  assign port_wr = _40_;
  assign port_rd = _41_;
  assign bus_strt = _42_;
endmodule

module praxos_dm_8(clk, addr, wr, wr_data, rd_data);
  reg [31:0] _0_ = 32'd0;
  reg [31:0] _1_;
  wire [8191:0] _2_;
  wire [31:0] _3_;
  input [7:0] addr;
  wire [7:0] addr;
  input clk;
  wire clk;
  wire [31:0] q;
  output [31:0] rd_data;
  wire [31:0] rd_data;
  input wr;
  wire wr;
  input [31:0] wr_data;
  wire [31:0] wr_data;
  reg [31:0] dm [255:0];
  initial begin
    dm[0] = 32'd0;
    dm[1] = 32'd0;
    dm[2] = 32'd0;
    dm[3] = 32'd0;
    dm[4] = 32'd0;
    dm[5] = 32'd0;
    dm[6] = 32'd0;
    dm[7] = 32'd0;
    dm[8] = 32'd0;
    dm[9] = 32'd0;
    dm[10] = 32'd0;
    dm[11] = 32'd0;
    dm[12] = 32'd0;
    dm[13] = 32'd0;
    dm[14] = 32'd0;
    dm[15] = 32'd0;
    dm[16] = 32'd0;
    dm[17] = 32'd0;
    dm[18] = 32'd0;
    dm[19] = 32'd0;
    dm[20] = 32'd0;
    dm[21] = 32'd0;
    dm[22] = 32'd0;
    dm[23] = 32'd0;
    dm[24] = 32'd0;
    dm[25] = 32'd0;
    dm[26] = 32'd0;
    dm[27] = 32'd0;
    dm[28] = 32'd0;
    dm[29] = 32'd0;
    dm[30] = 32'd0;
    dm[31] = 32'd0;
    dm[32] = 32'd0;
    dm[33] = 32'd0;
    dm[34] = 32'd0;
    dm[35] = 32'd0;
    dm[36] = 32'd0;
    dm[37] = 32'd0;
    dm[38] = 32'd0;
    dm[39] = 32'd0;
    dm[40] = 32'd0;
    dm[41] = 32'd0;
    dm[42] = 32'd0;
    dm[43] = 32'd0;
    dm[44] = 32'd0;
    dm[45] = 32'd0;
    dm[46] = 32'd0;
    dm[47] = 32'd0;
    dm[48] = 32'd0;
    dm[49] = 32'd0;
    dm[50] = 32'd0;
    dm[51] = 32'd0;
    dm[52] = 32'd0;
    dm[53] = 32'd0;
    dm[54] = 32'd0;
    dm[55] = 32'd0;
    dm[56] = 32'd0;
    dm[57] = 32'd0;
    dm[58] = 32'd0;
    dm[59] = 32'd0;
    dm[60] = 32'd0;
    dm[61] = 32'd0;
    dm[62] = 32'd0;
    dm[63] = 32'd0;
    dm[64] = 32'd0;
    dm[65] = 32'd0;
    dm[66] = 32'd0;
    dm[67] = 32'd0;
    dm[68] = 32'd0;
    dm[69] = 32'd0;
    dm[70] = 32'd0;
    dm[71] = 32'd0;
    dm[72] = 32'd0;
    dm[73] = 32'd0;
    dm[74] = 32'd0;
    dm[75] = 32'd0;
    dm[76] = 32'd0;
    dm[77] = 32'd0;
    dm[78] = 32'd0;
    dm[79] = 32'd0;
    dm[80] = 32'd0;
    dm[81] = 32'd0;
    dm[82] = 32'd0;
    dm[83] = 32'd0;
    dm[84] = 32'd0;
    dm[85] = 32'd0;
    dm[86] = 32'd0;
    dm[87] = 32'd0;
    dm[88] = 32'd0;
    dm[89] = 32'd0;
    dm[90] = 32'd0;
    dm[91] = 32'd0;
    dm[92] = 32'd0;
    dm[93] = 32'd0;
    dm[94] = 32'd0;
    dm[95] = 32'd0;
    dm[96] = 32'd0;
    dm[97] = 32'd0;
    dm[98] = 32'd0;
    dm[99] = 32'd0;
    dm[100] = 32'd0;
    dm[101] = 32'd0;
    dm[102] = 32'd0;
    dm[103] = 32'd0;
    dm[104] = 32'd0;
    dm[105] = 32'd0;
    dm[106] = 32'd0;
    dm[107] = 32'd0;
    dm[108] = 32'd0;
    dm[109] = 32'd0;
    dm[110] = 32'd0;
    dm[111] = 32'd0;
    dm[112] = 32'd0;
    dm[113] = 32'd0;
    dm[114] = 32'd0;
    dm[115] = 32'd0;
    dm[116] = 32'd0;
    dm[117] = 32'd0;
    dm[118] = 32'd0;
    dm[119] = 32'd0;
    dm[120] = 32'd0;
    dm[121] = 32'd0;
    dm[122] = 32'd0;
    dm[123] = 32'd0;
    dm[124] = 32'd0;
    dm[125] = 32'd0;
    dm[126] = 32'd0;
    dm[127] = 32'd0;
    dm[128] = 32'd0;
    dm[129] = 32'd0;
    dm[130] = 32'd0;
    dm[131] = 32'd0;
    dm[132] = 32'd0;
    dm[133] = 32'd0;
    dm[134] = 32'd0;
    dm[135] = 32'd0;
    dm[136] = 32'd0;
    dm[137] = 32'd0;
    dm[138] = 32'd0;
    dm[139] = 32'd0;
    dm[140] = 32'd0;
    dm[141] = 32'd0;
    dm[142] = 32'd0;
    dm[143] = 32'd0;
    dm[144] = 32'd0;
    dm[145] = 32'd0;
    dm[146] = 32'd0;
    dm[147] = 32'd0;
    dm[148] = 32'd0;
    dm[149] = 32'd0;
    dm[150] = 32'd0;
    dm[151] = 32'd0;
    dm[152] = 32'd0;
    dm[153] = 32'd0;
    dm[154] = 32'd0;
    dm[155] = 32'd0;
    dm[156] = 32'd0;
    dm[157] = 32'd0;
    dm[158] = 32'd0;
    dm[159] = 32'd0;
    dm[160] = 32'd0;
    dm[161] = 32'd0;
    dm[162] = 32'd0;
    dm[163] = 32'd0;
    dm[164] = 32'd0;
    dm[165] = 32'd0;
    dm[166] = 32'd0;
    dm[167] = 32'd0;
    dm[168] = 32'd0;
    dm[169] = 32'd0;
    dm[170] = 32'd0;
    dm[171] = 32'd0;
    dm[172] = 32'd0;
    dm[173] = 32'd0;
    dm[174] = 32'd0;
    dm[175] = 32'd0;
    dm[176] = 32'd0;
    dm[177] = 32'd0;
    dm[178] = 32'd0;
    dm[179] = 32'd0;
    dm[180] = 32'd0;
    dm[181] = 32'd0;
    dm[182] = 32'd0;
    dm[183] = 32'd0;
    dm[184] = 32'd0;
    dm[185] = 32'd0;
    dm[186] = 32'd0;
    dm[187] = 32'd0;
    dm[188] = 32'd0;
    dm[189] = 32'd0;
    dm[190] = 32'd0;
    dm[191] = 32'd0;
    dm[192] = 32'd0;
    dm[193] = 32'd0;
    dm[194] = 32'd0;
    dm[195] = 32'd0;
    dm[196] = 32'd0;
    dm[197] = 32'd0;
    dm[198] = 32'd0;
    dm[199] = 32'd0;
    dm[200] = 32'd0;
    dm[201] = 32'd0;
    dm[202] = 32'd0;
    dm[203] = 32'd0;
    dm[204] = 32'd0;
    dm[205] = 32'd0;
    dm[206] = 32'd0;
    dm[207] = 32'd0;
    dm[208] = 32'd0;
    dm[209] = 32'd0;
    dm[210] = 32'd0;
    dm[211] = 32'd0;
    dm[212] = 32'd0;
    dm[213] = 32'd0;
    dm[214] = 32'd0;
    dm[215] = 32'd0;
    dm[216] = 32'd0;
    dm[217] = 32'd0;
    dm[218] = 32'd0;
    dm[219] = 32'd0;
    dm[220] = 32'd0;
    dm[221] = 32'd0;
    dm[222] = 32'd0;
    dm[223] = 32'd0;
    dm[224] = 32'd0;
    dm[225] = 32'd0;
    dm[226] = 32'd0;
    dm[227] = 32'd0;
    dm[228] = 32'd0;
    dm[229] = 32'd0;
    dm[230] = 32'd0;
    dm[231] = 32'd0;
    dm[232] = 32'd0;
    dm[233] = 32'd0;
    dm[234] = 32'd0;
    dm[235] = 32'd0;
    dm[236] = 32'd0;
    dm[237] = 32'd0;
    dm[238] = 32'd0;
    dm[239] = 32'd0;
    dm[240] = 32'd0;
    dm[241] = 32'd0;
    dm[242] = 32'd0;
    dm[243] = 32'd0;
    dm[244] = 32'd0;
    dm[245] = 32'd0;
    dm[246] = 32'd0;
    dm[247] = 32'd0;
    dm[248] = 32'd0;
    dm[249] = 32'd0;
    dm[250] = 32'd0;
    dm[251] = 32'd0;
    dm[252] = 32'd0;
    dm[253] = 32'd0;
    dm[254] = 32'd0;
    dm[255] = 32'd0;
  end
  always @(posedge clk) begin
    if (wr)
      dm[addr] <= wr_data;
  end
  assign _3_ = dm[addr];
  always @(posedge clk)
    _0_ <= _3_;
  always @(posedge clk)
    _1_ <= q;
  assign q = _0_;
  assign rd_data = _1_;
endmodule

module praxos_pm_8(clk, en, addr, wr, wr_data, rd_data);
  wire [7:0] _0_;
  wire [7:0] _1_;
  wire [35:0] _2_;
  reg [35:0] _3_ = 36'h000000000;
  wire [9215:0] _4_;
  wire [35:0] _5_;
  input [7:0] addr;
  wire [7:0] addr;
  input clk;
  wire clk;
  wire [35:0] data_int;
  input en;
  wire en;
  wire [35:0] q;
  output [35:0] rd_data;
  wire [35:0] rd_data;
  input wr;
  wire wr;
  input [35:0] wr_data;
  wire [35:0] wr_data;
  reg [35:0] pm [255:0];
  initial begin
    pm[0] = 36'h000000000;
    pm[1] = 36'h000000000;
    pm[2] = 36'h000000000;
    pm[3] = 36'h000000000;
    pm[4] = 36'h000000000;
    pm[5] = 36'h000000000;
    pm[6] = 36'h000000000;
    pm[7] = 36'h000000000;
    pm[8] = 36'h000000000;
    pm[9] = 36'h000000000;
    pm[10] = 36'h000000000;
    pm[11] = 36'h000000000;
    pm[12] = 36'h000000000;
    pm[13] = 36'h000000000;
    pm[14] = 36'h000000000;
    pm[15] = 36'h000000000;
    pm[16] = 36'h000000000;
    pm[17] = 36'h000000000;
    pm[18] = 36'h000000000;
    pm[19] = 36'h000000000;
    pm[20] = 36'h000000000;
    pm[21] = 36'h000000000;
    pm[22] = 36'h000000000;
    pm[23] = 36'h000000000;
    pm[24] = 36'h000000000;
    pm[25] = 36'h000000000;
    pm[26] = 36'h000000000;
    pm[27] = 36'h000000000;
    pm[28] = 36'h000000000;
    pm[29] = 36'h000000000;
    pm[30] = 36'h000000000;
    pm[31] = 36'h000000000;
    pm[32] = 36'h000000000;
    pm[33] = 36'h000000000;
    pm[34] = 36'h000000000;
    pm[35] = 36'h000000000;
    pm[36] = 36'h000000000;
    pm[37] = 36'h000000000;
    pm[38] = 36'h000000000;
    pm[39] = 36'h000000000;
    pm[40] = 36'h000000000;
    pm[41] = 36'h000000000;
    pm[42] = 36'h000000000;
    pm[43] = 36'h000000000;
    pm[44] = 36'h000000000;
    pm[45] = 36'h000000000;
    pm[46] = 36'h000000000;
    pm[47] = 36'h000000000;
    pm[48] = 36'h000000000;
    pm[49] = 36'h000000000;
    pm[50] = 36'h000000000;
    pm[51] = 36'h000000000;
    pm[52] = 36'h000000000;
    pm[53] = 36'h000000000;
    pm[54] = 36'h000000000;
    pm[55] = 36'h000000000;
    pm[56] = 36'h000000000;
    pm[57] = 36'h000000000;
    pm[58] = 36'h000000000;
    pm[59] = 36'h000000000;
    pm[60] = 36'h000000000;
    pm[61] = 36'h000000000;
    pm[62] = 36'h000000000;
    pm[63] = 36'h000000000;
    pm[64] = 36'h000000000;
    pm[65] = 36'h000000000;
    pm[66] = 36'h000000000;
    pm[67] = 36'h000000000;
    pm[68] = 36'h000000000;
    pm[69] = 36'h000000000;
    pm[70] = 36'h000000000;
    pm[71] = 36'h000000000;
    pm[72] = 36'h000000000;
    pm[73] = 36'h000000000;
    pm[74] = 36'h000000000;
    pm[75] = 36'h000000000;
    pm[76] = 36'h000000000;
    pm[77] = 36'h000000000;
    pm[78] = 36'h000000000;
    pm[79] = 36'h000000000;
    pm[80] = 36'h000000000;
    pm[81] = 36'h000000000;
    pm[82] = 36'h000000000;
    pm[83] = 36'h000000000;
    pm[84] = 36'h000000000;
    pm[85] = 36'h000000000;
    pm[86] = 36'h000000000;
    pm[87] = 36'h000000000;
    pm[88] = 36'h000000000;
    pm[89] = 36'h000000000;
    pm[90] = 36'h000000000;
    pm[91] = 36'h000000000;
    pm[92] = 36'h000000000;
    pm[93] = 36'h000000000;
    pm[94] = 36'h000000000;
    pm[95] = 36'h000000000;
    pm[96] = 36'h000000000;
    pm[97] = 36'h000000000;
    pm[98] = 36'h000000000;
    pm[99] = 36'h000000000;
    pm[100] = 36'h000000000;
    pm[101] = 36'h000000000;
    pm[102] = 36'h000000000;
    pm[103] = 36'h000000000;
    pm[104] = 36'h000000000;
    pm[105] = 36'h000000000;
    pm[106] = 36'h000000000;
    pm[107] = 36'h000000000;
    pm[108] = 36'h000000000;
    pm[109] = 36'h000000000;
    pm[110] = 36'h000000000;
    pm[111] = 36'h000000000;
    pm[112] = 36'h000000000;
    pm[113] = 36'h000000000;
    pm[114] = 36'h000000000;
    pm[115] = 36'h000000000;
    pm[116] = 36'h000000000;
    pm[117] = 36'h000000000;
    pm[118] = 36'h000000000;
    pm[119] = 36'h000000000;
    pm[120] = 36'h000000000;
    pm[121] = 36'h000000000;
    pm[122] = 36'h000000000;
    pm[123] = 36'h000000000;
    pm[124] = 36'h000000000;
    pm[125] = 36'h000000000;
    pm[126] = 36'h000000000;
    pm[127] = 36'h000000000;
    pm[128] = 36'h000000000;
    pm[129] = 36'h000000000;
    pm[130] = 36'h000000000;
    pm[131] = 36'h000000000;
    pm[132] = 36'h000000000;
    pm[133] = 36'h000000000;
    pm[134] = 36'h000000000;
    pm[135] = 36'h000000000;
    pm[136] = 36'h000000000;
    pm[137] = 36'h000000000;
    pm[138] = 36'h000000000;
    pm[139] = 36'h000000000;
    pm[140] = 36'h000000000;
    pm[141] = 36'h000000000;
    pm[142] = 36'h000000000;
    pm[143] = 36'h000000000;
    pm[144] = 36'h000000000;
    pm[145] = 36'h000000000;
    pm[146] = 36'h000000000;
    pm[147] = 36'h000000000;
    pm[148] = 36'h000000000;
    pm[149] = 36'h000000000;
    pm[150] = 36'h000000000;
    pm[151] = 36'h000000000;
    pm[152] = 36'h000000000;
    pm[153] = 36'h000000000;
    pm[154] = 36'h000000000;
    pm[155] = 36'h000000000;
    pm[156] = 36'h000000000;
    pm[157] = 36'h000000000;
    pm[158] = 36'h000000000;
    pm[159] = 36'h000000000;
    pm[160] = 36'h000000000;
    pm[161] = 36'h000000000;
    pm[162] = 36'h000000000;
    pm[163] = 36'h000000000;
    pm[164] = 36'h000000000;
    pm[165] = 36'h000000000;
    pm[166] = 36'h000000000;
    pm[167] = 36'h000000000;
    pm[168] = 36'h000000000;
    pm[169] = 36'h000000000;
    pm[170] = 36'h000000000;
    pm[171] = 36'h000000000;
    pm[172] = 36'h000000000;
    pm[173] = 36'h000000000;
    pm[174] = 36'h000000000;
    pm[175] = 36'h000000000;
    pm[176] = 36'h000000000;
    pm[177] = 36'h000000000;
    pm[178] = 36'h000000000;
    pm[179] = 36'h000000000;
    pm[180] = 36'h000000000;
    pm[181] = 36'h000000000;
    pm[182] = 36'h000000000;
    pm[183] = 36'h000000000;
    pm[184] = 36'h000000000;
    pm[185] = 36'h000000000;
    pm[186] = 36'h000000000;
    pm[187] = 36'h000000000;
    pm[188] = 36'h000000000;
    pm[189] = 36'h000000000;
    pm[190] = 36'h000000000;
    pm[191] = 36'h000000000;
    pm[192] = 36'h000000000;
    pm[193] = 36'h000000000;
    pm[194] = 36'h000000000;
    pm[195] = 36'h000000000;
    pm[196] = 36'h000000000;
    pm[197] = 36'h000000000;
    pm[198] = 36'h000000000;
    pm[199] = 36'h000000000;
    pm[200] = 36'h000000000;
    pm[201] = 36'h000000000;
    pm[202] = 36'h000000000;
    pm[203] = 36'h000000000;
    pm[204] = 36'h000000000;
    pm[205] = 36'h000000000;
    pm[206] = 36'h000000000;
    pm[207] = 36'h000000000;
    pm[208] = 36'h000000000;
    pm[209] = 36'h000000000;
    pm[210] = 36'h000000000;
    pm[211] = 36'hb0000ffff;
    pm[212] = 36'hc0000ffff;
    pm[213] = 36'h600000005;
    pm[214] = 36'h500000000;
    pm[215] = 36'h4c0000005;
    pm[216] = 36'hc00000000;
    pm[217] = 36'hb0000ffff;
    pm[218] = 36'hd00010000;
    pm[219] = 36'h900010000;
    pm[220] = 36'hb0000ffff;
    pm[221] = 36'h300000027;
    pm[222] = 36'hd9fffffff;
    pm[223] = 36'h400000003;
    pm[224] = 36'h9ffff0000;
    pm[225] = 36'he5ffffffe;
    pm[226] = 36'h0a0000001;
    pm[227] = 36'hc00000000;
    pm[228] = 36'he1fffffea;
    pm[229] = 36'h900010000;
    pm[230] = 36'hb0000ffff;
    pm[231] = 36'h300000027;
    pm[232] = 36'hd9fffffff;
    pm[233] = 36'h400000004;
    pm[234] = 36'h700000000;
    pm[235] = 36'h680000002;
    pm[236] = 36'h9fffc0000;
    pm[237] = 36'h8f0000000;
    pm[238] = 36'hc00000002;
    pm[239] = 36'h680000001;
    pm[240] = 36'h900040000;
    pm[241] = 36'h1f0000000;
    pm[242] = 36'h700000001;
    pm[243] = 36'h680000000;
    pm[244] = 36'h900010000;
    pm[245] = 36'hb0000ffff;
    pm[246] = 36'h30000001c;
    pm[247] = 36'hd9fffffff;
    pm[248] = 36'h30000000a;
    pm[249] = 36'h700000000;
    pm[250] = 36'h600000000;
    pm[251] = 36'h300000000;
    pm[252] = 36'h600000004;
    pm[253] = 36'ha60000000;
    pm[254] = 36'h600000003;
    pm[255] = 36'h380000000;
  end
  always @(posedge clk) begin
    if (wr)
      pm[_1_] <= wr_data;
  end
  reg [35:0] _6_;
  always @(posedge clk) begin
    _6_ <= pm[_0_];
  end
  assign _5_ = _6_;
  assign _0_ = 8'hff - addr;
  assign _1_ = 8'hff - addr;
  assign _2_ = en ? q : data_int;
  always @(posedge clk)
    _3_ <= _2_;
  assign q = _5_;
  assign data_int = _3_;
  assign rd_data = data_int;
endmodule
